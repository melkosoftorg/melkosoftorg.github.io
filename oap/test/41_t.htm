<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Вопросы теста 41</title>
<link rel=stylesheet type=text/css href=lec.css>
</head>
<body>
<table cellpadding=0 cellspacing=0>
<tr id=top><td colspan=5>
<center>
<a id=top href=../plan_2.htm>Календарно-тематический план &nbsp &nbsp </a>
</center>
</td></tr>
<tr>
<td class=bok></td>
<td class=bok1></td>
<td>
<p id=head>Вопросы тестирования по теме:
<br>Объектно-ориентированное программирование. Классы.</p>

<p id=head1>Сформулировать определения</p>
<ol>
<li>Инкапсуляция,  пакетирование (Encapsulation) -  это
<p><li>Наследование  (Inheritance) -  это
<p><li>Полиморфизм  (Polymorphism)  -  многоформенность  -  это
<p><li>Объектно - ориентированное программирование  -  это
<p><li>Классы -  это
<p><li>Операция   ::  -  это
<p><li>Спецификатор доступа   private  означает 
<p><li>Спецификатор доступа   public  означает
<p><li>Спецификатор доступа   protected  означает 
<p><li>Класс можно определить с помощью конструкции: 
<p><li>Для описания объекта класса используется конструкция: 
<p><li>Обращение к компонентам класса с помощью квалифицированных имен:
<p><li>Обращаться к компонентам класса с помощью уточненного имени: 
<p><li>Инициализация статического компонента 
<p><li>Обращение к статическому компоненту через имя конкретного объекта: 
<p><li>Способ доступа к элементам объекта класса через явное использование указателя на объект класса и операции косвенного выбора компонента
<p><li>Вызов компонентной функции через уточненное имя
<p><li>Вызов компонентной функции через указатель на объект класса:
<p><li>Обращение к статическому компоненту через квалифицированное имя:
<p><li>Обращение к статическому компоненту через имя конкретного объекта:
<p><li>Определение конструктора в теле класса
<p><li>Явный вызов конструктора при непустом списке фактических параметров:
<p><li>Явный вызов конструктора, приводящий к созданию объекта, не имеющего имени:
<p><li>Определение деструктора имеет вид:
<p><li>Явный вызов деструктора имеет вид
<p><li>Обращение к компонентным данным объекта из операторов, выполняемых вне определения классов, с помощью уточненного имени по известному имени объекта:
<p><li>Обращение к компонентным данным объекта из операторов, выполняемых вне определения классов, по заданному указателю на объект:
<p><li>Вызов статической компонентной функции используя квалифицированное имя:
<p><li>Определение указателя на принадлежащие классу функции:
<p><li>Определение указателя на компонентные данные класса
<p><li>Определение указателя и его явная инициализация, с использованием адреса компонента:
<p><li>Внешнее определении компонентной функции (квалифицированное имя компонентной функции) имеет вид:
<p><li>При внешнем определении компонентной функции в теле класса помещается ее прототип:
<p><li>Вне тела класса компонентная функция определяется таким образом:
<p><li>Разыменование указателей на компоненты класса
<p><li>Доступ к компонентам конкретных объектов через указатель
<p><li>Объектно - ориентированная программа
<p><li>Компонентная функция - конструктор
<p><li>Функции деструкторы классов (destructor)
<p><li>Спецификаторы доступа
<p><li>Указатель<pre>	this имя_класса * const this = адрес_объекта;</pre>
<p><li>Классы, включающие виртуальные функции, носят название
<p><li>Классы, в которых есть хотя бы одна чистая (пустая) виртуальная функция носят название
<p><li>Классы, объявленные внутри блока, например внутри определения функции, носят название
<p><li>Функции, которые, не являясь компонентом класса, имеют доступ к его защищенным и собственным компонентам называются
<p><li>Классы, на основе которых строятся другие классы, называются
<p><li>Классы, построенные на основе базовых классов, называются
<p><li>Определение операции-функции имеет вид:
<p><li>Для задания шаблона производного класса используется синтаксис:
<p><li>Чистой виртуальной функцией называется компонентная функция, которая имеет определение:
<p><li>Конструкция, называемая <b>чистый спецификатор</b>
<p><li>Пример описания чистой виртуальной функции:
</ol>
<p id=head1>Что означает данное описание для класса  example</p>
<ol>
<li>example  X1, ex1(55), D; 
<p><li>example  *point = &D; 
<p><li>example  dim[8]; 
<p><li>example  &Name = X1; 
</ol>
<p id=head1>В определении класса</p>
<pre><b>			ключ_класса имя_класса                
			{
				список компонентов
			} объекты класса (через запятую);
</b></pre>
<ol>
<li>ключ класса  -  это                                              
<p><li>имя_класса  -  это                                               
<p><li>список_компонентов  -  это                                       
</ol>
<p id=head1>Какой смысл во фрагменте программы</p>
<pre><b>
	class AZ
	{
		int ii; float ее; char сс;
		public:
			AZ(int in, float en, char cn) : 
					ii(5), ee(ii * en + in), cc(cn)
			{ } ...
	};
</b></pre>
<p id=head1>имеет строка программы</p>
<ol>
<li>&nbsp;&nbsp;&nbsp;AZ A(2, 3.0, 'd');
<p><li>&nbsp;&nbsp;&nbsp;AZ Х = AZ(0, 2.0, 'd');
<p><li>&nbsp;&nbsp;&nbsp;AZ A(5, 2.0, 'd');
<p><li>&nbsp;&nbsp;&nbsp;AZ A(2, 5.0, 'd');
<p><li>&nbsp;&nbsp;&nbsp;AZ Х = AZ(5, 2.0, 'd');
</ol>
<p>&nbsp</p>
</td><td class=bok1></td><td class=bok></td></tr>
<tr id=top><td colspan=5><center>
<a id=top href=../plan_2.htm>Календарно-тематический план &nbsp &nbsp </a>
</center>
</td></tr>
</body>
</html>