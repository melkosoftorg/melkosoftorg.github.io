<html>
<head>
<title>ОП | Для конспекта | Лекция № 22</title>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="ru">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../css/style.css" title="style">
</head>
<body bgcolor="#ffffff" text="000066">
<p><center><table width="100%">
<tr bgcolor="#f3f3f3" class="author"><td align=center valign=top>Для конспекта
</td></tr>
<tr><td>
<p>&nbsp;</p>
<h2>Команда повторения - цикл</h2>
<ol>
<p><li>Циклы позволяют многократно выполнять отдельный оператор или последовательность операторов.
<p><li>Тело цикла - многократно повторяемые действия.
<p><li>Существуют три основных типа циклов.
<p><table align="center" widtch="94%" border=0>
<tr valign="top" align="center"><td width="33%">for - для
</td><td width="33%">while - пока
</td><td width="34%">do ... while - делать ... пока
</td></tr>
<tr valign="top"><td>Используется в том случае, когда известно точное количество повторов, которое нужно выполнить (цикл с параметром).
</td><td>Используется в том случае, когда не известно точное число повторов и при этом нет необходимости, чтобы цикл непременно был выполнен хотя бы один раз.
</td><td>Используется в тех случаях, когда вы не знаете точного количества повторов, но в то же время цикл необходимо выполнить хотя бы один раз.
</td></tr>
<tr valign="top"><td><img src="../lec/sem_1/22/for.gif" alt="Цикл for - цикл с параметром">
</td><td><img src="../lec/sem_1/22/pic_03_2.gif" alt="Цикл while">
</td><td><img src="../lec/sem_1/22/pic_03_1.gif" alt="Цикл do ... while">
</td></tr>
<tr valign="top"><td>
<pre>
for (выраж1; выраж2; выраж3)
{
	операторы тела цикла;
}
</pre>
</td><td>
<pre>
выраж1;
while(выраж2)
{
	операторы тела цикла;
	выраж3;
}
</pre>
</td><td>
<pre>
выраж1;
do
{
	операторы тела цикла;
	выраж3;
} while(выраж2);
</pre>
</td></tr>
<tr><td colspan=3>
<pre>
	выраж1; - задать перед циклом начальное значение переменной, изменяющейся в цикле 
	выраж2; - проверить условие окончания или повторения цикла
	выраж3; - изменить переменную перед каждым новым повторением цикла
</pre>
</td></tr>
</table>
<p><li>Итерационные циклы - это циклы, для которых число повторений тела цикла заранее не известно, циклы, оканчивающиеся по условию. 
<p><li>Для организации цикла любого типа необходимо:
<ol>
<li>Задать перед циклом начальное значение переменной, изменяющейся в цикле  (x = x1).
<li>Изменять переменную перед каждым новым повторением цикла (x += h).
<li>Проверять условие окончания или повторения цикла (x <= x2).
<li>Управлять циклом, то есть переходить к его началу, если он не закончен, или выходить из него по окончании.
</ol>
<p><li>Фрагменты программного кода выполнения примера для каждого типа циклов.<br>
<p><i>Пример:</i> составить таблицу значений функции y = e<sup>x</sup> при всех x, изменяющихся от начального значения x1&nbsp;=&nbsp;2.1 до конечного значения x2&nbsp;=&nbsp;3.2 с шагом h&nbsp;=&nbsp;0.1.
<p>x - управляющая переменная цикла.
<p><table align="center" width="94%" border=0>
<tr valign="top"><td width="33%">
<pre>
float x, x1 = 2.1, x2 = 3.2, h = 0.1;
for (x = x1; x <= x2; x += h)
{
	y = exp(x);
	cout << "\nx = " << x
	    <<	"\ty = " << y;
}
</pre>
</td><td width="33%">
<pre>
float x, x1 = 2.1, x2 = 3.2, h = 0.1;
x = x1;
while(x <= x2)
{
	y = exp(x);
	cout << "\nx = " << x
	    <<	"\ty = " << y;
	x += h;	
}
</pre>
</td><td width="34%">
<pre>
float x, x1 = 2.1, x2 = 3.2, h = 0.1;
x = x1;
do
{
	y = exp(x);
	cout << "\nx = " << x
	    <<	"\ty = " << y;
	x += h;	
} while(x <= x2);
</pre>
</td></tr>
</table>
<p><li>Если необходимо выйти из цикла до его завершения используется оператор break. 
<p><li>Выполнение оператора continue приводит к пропуску оставшихся операторов в теле цикла и выполнению следующей итерации цикла.
<p><li>Бесконечный цикл - это цикл, выполнение которого никогда не закончится естественным образом по его условию.
</ol>
<p>&nbsp;</p>
</td></tr>
<tr bgcolor="#f3f3f3"><td align=center valign=top class="author">&copy;&nbsp;Ставропольский колледж связи, 2012
</td></tr><tr><td>
</table></center></p>
</body>
</html> 