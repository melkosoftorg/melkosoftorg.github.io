<html>
<head>
<title>ОП | Для конспекта | Лекция № 18
</title>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="ru">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../css/style.css" title="style">
</head>
<body bgcolor="#ffffff" text="000066">
<p><center><table width="100%">
<tr bgcolor="#f3f3f3" class="author"><td align=center valign=top>Для конспекта
</td></tr>
<tr><td>
<p>&nbsp;</p>
<h2>Алгоритмы и способы их задания </h2>
<ol>
<p><li>Алгоритм - понятное и точное предписание (указание) исполнителю совершить определенную последовательность действий для достижения поставленной цели.
<p><li>Алгоритм состоит из отдельных пунктов - команд.
<p><li>Команда - это одно законченное действие. 
<p><li>Исполнитель алгоритма - это человек, компьютер, автомат, умеющий выполнять вполне определенный набор действий.
<p><li>Алгоритмический язык - средство описания алгоритмов, ориентированное на исполнителя - человека.
<p><li>Свойства алгоритмов:
<ul type="disc">
<li>Дискретность - свойство алгоритма переходить к выполнению следующего действия только после того, как закончено предыдущее; обусловливает пошаговый характер процесса получения результата, при котором выполняется конечное число заданных алгоритмом действий.
<li>Точность - свойство алгоритма, при котором исполнитель, выполнив очередную команду, точно знает, какую команду надо выполнять следующей.
<li>Понятность или определенность - свойство алгоритма, требующее, чтобы каждая команда алгоритма была понятна исполнителю и исполнитель должен быть в состоянии выполнить каждую команду алгоритма в строгом соответствии с ее назначением.
<li>Результативность - свойство алгоритма приводить к получению результата после выполнения над исходными данными заданной алгоритмом последовательности действий. Одно из возможных решений - установление факта, что задача решения не имеет.
<li>Массовость - свойство алгоритма, означающее, что если алгоритм разработан для решения определенной задачи, то он должен быть применим для решения задач этого типа при всех допустимых значениях исходных данных.
</ul>
<p><li>Язык программирования - средство описания алгоритмов, ориентированное на исполнителя - ЭВМ.
<p><li>Словесный способ записи алгоритмов - это способ записи алгоритмов, при котором описание последовательных этапов обработки данных, задается в произвольном изложении на естественном языке.
<p><li>Структурно-стилизованный способ записи алгоритмов - это записи на алгоритмическом языке псевдокода, занимающем промежуточное место между естественным и формальным языками.
<p><li>Графический способ записи алгоритмов - это описание последовательных этапов обработки данных посредством совокупности блочных символов (блоков), соединяемых линиями передачи управления.
<p><li>Наиболее часто употребляемые символы действий:
<p><img src="img/t02_01.gif" align="left" HSPACE=10 VSPACE=0> для обозначения вычислительного действия или  последовательности вычислительных действий
<br>&nbsp;
<p><img src="img/t02_02.gif" align="left" HSPACE=10 VSPACE=0> для обозначения ручного ввода с клавиатуры
<br>&nbsp;
<p><img src="img/t02_03.gif" align="left" HSPACE=10 VSPACE=0> (проверка условий) для обозначения переходов управления по условию
<br>&nbsp;
<p><img src="img/t02_04.gif" align="left" HSPACE=10 VSPACE=0> (начало цикла) для организации циклических конструкций; внутри блока записывается параметр цикла,   для  которого указывается его начальное значение,  граничное условие и правило изменения значения параметра для каждого повторения
<br>&nbsp;
<p><img src="img/t02_05.gif" align="left" HSPACE=10 VSPACE=0> (вычисления по подпрограмме) для организации вычислений в стандартной подпрограмме
<br>&nbsp;
<p><img src="img/t02_06.gif" align="left" HSPACE=10 VSPACE=0> (ввод - вывод) для обозначения операций ввода и вывода информации
<br>&nbsp;
<p><img src="img/t02_07.gif" align="left" HSPACE=10 VSPACE=0> для обозначения действий: начало, конец,  останов, вход и выход в подпрограммах
<br>&nbsp;
<p><img src="img/t02_08.gif" align="left" HSPACE=10 VSPACE=0> (пояснения, содержание подпрограмм, формулы) позволяет включать в схемы алгоритмов пояснения к функциональным блокам.
<br>&nbsp;
<p><img src="img/t02_09.gif" align="left" HSPACE=10 VSPACE=0> (линии потока) для  обозначения порядка выполнения действий; естественное направление сверху вниз и слева направо; при передаче управления снизу вверх и справа  налево  направление следует отметить стрелкой
<br>&nbsp;
<p><img src="img/t02_10.gif" align="left" HSPACE=10 VSPACE=0> (соединитель, разрыв линий потока) когда схема алгоритма разбивается на автономные части,  особенно  если она  не умещается на одном листе
<br>&nbsp;
<p><li>Программный способ записи алгоритмов - это тексты на языках программирования.
<p><li>Программа - это последовательность указаний (команд) для ввода исходных данных, их обработки и выдачи результатов для реализации алгоритма задачи, записанная по правилам языка программирования.
</ol>
<h2>Элементарные базовые управляющие структуры </h2>
<ol>
<p><li>Алгоритм для решения любой логической задачи можно составить из структур: следование, ветвление, цикл.
<p><li>Соединяться между собой базовые алгоритмические структуры могут следующими способами: последовательным, вложенным.
<p><li>&nbsp;
<p><img src="img/t02_11.gif" align="left" HSPACE=10 VSPACE=0> Алгоритм линейной структуры (следование) - алгоритм, в котором блоки выполняются последовательно друг за другом, в порядке, заданном схемой (естественный порядок).
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p>
<p><li>&nbsp;
<p><img src="img/t02_12.gif" align="left" HSPACE=10 VSPACE=0> Алгоритм разветвленной структуры (ветвление) - такая схема, в которой предусмотрено разветвление указанной последовательности действий на два направления в зависимости от итога проверки заданного условия.
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p>
<p><li>Алгоритм циклической структуры (повторение) - алгоритм, в котором предусмотрено неоднократное выполнение одной и той же последовательности действий при различных значениях параметров, изменяемых при каждом новом выходе на повторение.
<br><i>Тело цикла</i> - многократно повторяемые действия.
<p><li>Параметр цикла - переменная, изменяющаяся в цикле.
<p><li>Для организации цикла любого типа необходимо:
<ol>
<li>Задать перед циклом начальное значение переменной, изменяющейся в цикле. 
<li>Изменять переменную перед каждым новым повторением цикла. 
<li>Проверять условие окончания или повторения цикла. 
<li>Управлять циклом, то есть переходить к его началу, если он не закончен, или выходить из него по окончании. 
</ol>
<p><li>&nbsp;
<p><img src="img/t02_13.gif" align="left" HSPACE=10 VSPACE=0> Если заранее известно, сколько раз будет выполнено тело цикла, то удобно применять цикл с параметром (регулярный цикл). 
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p>
<p><li>Если число повторений цикла не известно, то есть цикл заканчивается по условию, используется или цикл с постусловием (ДО) или цикл с предусловием (ПОКА).
<p><li>&nbsp;
<p><img src="img/t02_14.gif" align="left" HSPACE=10 VSPACE=0> Цикл с постусловием (ДО) - алгоритм,  в котором предусмотренная для многократного исполнения последовательность действий обязательно будет выполнена хотя бы один раз.
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p>
<p><li>&nbsp;
<p><img src="img/t02_15.gif" align="left" HSPACE=10 VSPACE=0>
Цикл с предусловием (ПОКА) - алгоритм,  в котором предусмотренная для многократного исполнения последовательность действий может оказаться не  выполненной ни разу.
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p>                  	
</ol>
<p>&nbsp;</p>
</td></tr>
<tr bgcolor="#f3f3f3"><td align=center valign=top class="author">&copy;&nbsp;Ставропольский колледж связи, 2011
</td></tr><tr><td>
</table></center></p>
</body>
</html> 