<html>
<head>
<title>ОП | Для конспекта | Лекция № 42</title>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="ru">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../css/style.css" title="style">
</head>
<body bgcolor="#ffffff" text="000066">
<p><center><table width="100%">
<tr bgcolor="#f3f3f3" class="author"><td align=center valign=top>Для конспекта
</td></tr>
<tr><td>
<p>&nbsp;</p>
<h2>Объектно-ориентированное программирование </h2>
<ol>
<p><li>Объектно - ориентированное программирование - это технология создания новых объектов (типов данных), которые наследуют определенные черты существующих (ранее созданных) объектов (типов данных)
<p><li>Объектно - ориентированная программа
<ul type="disc">
<li>не имеет жесткого алгоритма работы,
<li>представляет собой систему объектов, каждый из которых может выполнять какие-то функции в ответ на полученное сообщение
</ul>
<p><li>Инкапсуляция, пакетирование (Encapsulation) - это слияние данных и функций, работающих с этими данными, порождающее абстрактные типы данных, определяемые пользоватем
<p><li>Наследование (Inheritance) - это возможность передачи некоторых свойств одного объекта другому объекту
<p><li>Полиморфизм (Polymorphism) - многоформенность - это способность объекта отреагировать на некоторый запрос сообразно своему типу, даже если на стадии компиляции тип объекта, к которому направлен запрос, еще не известен
<p><li>Классы - это структуры, которые содержат не только объявления данных, но и функций, называемых функциями - членами (member functions) и определяющих, что может делать класс
<p><li>Спецификаторы доступа можно использовать для изменения видимости компонент в определении класса
<p><li>Спецификатор доступа private означает собственный, локальный. К ним имеют доступ только функции - члены данного класса и функции - друзья класса.
<p><li>Спецификатор доступа public означает общедоступный, глобальный. Предназначены для обеспечения интерфейса объектов класса с программой, в которой они существуют.
<p><li>Спецификатор доступа protected означает защищенный. Доступны функциям - членам данного класса и дружественным функциям производных классов.
<p><li>В определении класса
<pre>
	ключ_класса имя_класса
	{
		список компонентов
	} объекты класса (через запятую);
</pre>
<p>ключ класса - это одно из служебных слов class, struct, union
<br>имя_класса - это произвольно выбираемый идентификатор
<br>список_компонентов - это определения и описания типизированных данных и принадлежащих классу функций (компонентные функции)
<p><li>Класс - это тип, введенный программистом. Каждый тип служит для определения объектов.
Например, создан класс example:
<pre>
	class example
	{	float x, у, z;
		long a, b, с;
	};
</pre>
<p><li>Для описания объекта класса используется конструкция: имя_класса имя_объекта;
<p><table width="90%" align="center" border=0>
<tr valign="top"><td width="20%">example X1, ex1(55), D;
</td><td> - объекты данного класса
</td></tr>
<tr valign="top"><td>example *point = &D;
</td><td> - указатель на объект данного класса
</td></tr>
<tr valign="top"><td>example dim[8];
</td><td> - массив объектов данного класса
</td></tr>
<tr valign="top"><td>example &Name = X1;
</td><td> - ссылка на объект данного класса
</td></tr>
</table>
<p><li>Компонентная функция - конструктор - используется для инициализации объектов класса
<p><li>Определение конструктора в теле класса
<pre>
	имя_класса(список_формальных_параметров)
	{
		операторы_тела_конструктора
	}
</pre>
<p><li>Явный вызов конструктора при непустом списке фактических параметров:
<pre>
	имя_класса имя_объекта(фактические_параметры_конструктора);
</pre>
<p><li>Явный вызов конструктора, приводящий к созданию объекта, не имеющего имени:
<pre>
	имя_класса (фактические_параметры_конструктора);
</pre>
<p><li>Противоположные действия по отношению к конструктору вызывают функции деструкторы классов (destructor), или разрушители объектов. 
<p><li>Функции деструкторы классов (destructor) вызываются неявно, автоматически для возврата системе памяти, выделенной под объект, как только объект класса уничтожается
<p><li>Определение деструктора имеет вид:
<pre>
	~имя_класса() { операторы_тела деструктора };
</pre>
<p><li>Инициализация данных объекта с помощью конструктора. Определен класс AZ:
<pre>
	class AZ
	{
		int ii; float ее; char сс;
		public:
			AZ(int in, float en, char cn) : ii(5), ee(ii * en + in), cc(cn)
			{ } ...
	};
</pre>
<p>Программным кодом
<p><table width="90%" align="center" border=0>
<tr valign="top"><td width="20%">AZ A(2, 3.0, 'd');</td><td>создается именованный объект A,<br>компонент объекта A.ii == 5,<br>компонент объекта A.ее == 17,<br>компонент объекта A.cc == 'd'
</td></tr>
<tr valign="top"><td width="20%">AZ Х = AZ(0, 2.0, 'd');</td><td>создается безымянный объект,<br>в объекте значение ii == 5,<br>в объекте значение ее == 10,<br>в объекте значение cc == 'd',<br>копируется в объект Х
</td></tr>
<tr valign="top"><td width="20%">AZ A(5, 2.0, 'd');</td><td>создается именованный объект A,<br>компонент объекта A.ii == 5,<br>компонент объекта A.ее == 15,<br>компонент объекта A.cc == 'd'
</td></tr>
<tr valign="top"><td width="20%">AZ A(2, 5.0, 'd');</td><td>создается именованный объект A,<br>компонент объекта A.ii == 5,<br>компонент объекта A.ее == 27,<br>компонент объекта A.cc == 'd'
</td></tr>
<tr valign="top"><td width="20%">AZ Х = AZ(5, 2.0, 'd');</td><td>создается безымянный объект,<br>в объектезначение  ii == 5,<br>в объектезначение  ее == 15,<br>в объектезначение  cc == 'd',<br>копируется в объект Х
</td></tr>
</table>
<p><li>Внешнее определении компонентной функции (квалифицированное имя компонентной функции) имеет вид:
<pre>
	имя_класса :: имя_компонентной_функции
</pre>
<p><li>При внешнем определении компонентной функции в теле класса помещается ее прототип:
<pre>
	тип имя_функции(спецификация_и_инициалиэация_параметров);
</pre>
<p><li>Вне тела класса компонентная функция определяется таким образом:
<pre>
	тип имя_класса :: имя_функции(спецификация_формальных_параметров)
	{
		тело_принадлежащей_классу_функции
	}
</pre>
<p><li>Операция :: - это уточнение области действия
<p><li>Обращение к компонентам класса с помощью квалифицированных имен:
<pre>
	имя_объекта.имя_класса :: имя_компонента
</pre>
<p><li>Обращаться к компонентам класса с помощью уточненного имени:
<pre>
	имя_объекта.имя_элемента
</pre>
<p><li>Способ доступа к элементам объекта класса через явное использование указателя на объект класса и операции косвенного выбора компонента
<pre>
	указатель_на_объект_класса -> имя_элемента
</pre>
<p><li>Вызов компонентной функции через уточненное имя
<pre>
	имя_объекта.обращение_к_компонентной_функции
</pre>
<p><li>Вызов компонентной функции через указатель на объект класса:
<pre>
	указатель_на_объект_класса -> обращение_к_компонентной_функции
</pre>
</ol>
<p>&nbsp;</p>
</td></tr>
<tr bgcolor="#f3f3f3"><td align=center valign=top class="author">&copy;&nbsp;Ставропольский колледж связи, 2012
</td></tr><tr><td>
</table></center></p>
</body>
</html> 