<html>
<head>
<title>ОП | Для конспекта | Лекция № 46
</title>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="ru">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../css/style.css" title="style">
</head>
<body bgcolor="#ffffff" text="000066">
<p><center><table width="100%">
<tr bgcolor="#f3f3f3" class="author"><td align=center valign=top>Для конспекта
</td></tr>
<tr><td>
<p>&nbsp;</p>
<h2>Виртуальные функции и абстрактные классы</h2>
<ol>
<p><li>Классы, включающие виртуальные функции, носят название полиморфные
<p><li>Классы, в которых есть хотя бы одна чистая (пустая) виртуальная функция носят название абстрактные
Абстрактные классы пользуются "ограниченными правами": 
<ul type="disc">
<li>невозможно создать объект абстрактного класса, 
<li>абстрактный класс нельзя употреблять для задания типа параметра функции или в качестве типа возвращаемого функцией значения, 
<li>абстрактный класс нельзя использовать при явном приведении типов. В то же время можно определять указатели и ссылки на абстрактные классы. 
<li>объект абстрактного класса не может быть формальным параметром функции, однако формальным параметром может быть указатель абстрактного класса, что дает возможность передавать в вызываемую функцию в качестве фактического параметра значение указателя на производный объект, заменяя им указатель на абстрактный базовый класс.
</ul>
<p><li>Классы, объявленные внутри блока, например, внутри определения функции, носят название локальные
<p><li>Чистой виртуальной функцией называется компонентная функция, которая имеет определение:
<pre>
	virtual тип имя_функции(список_формальных_параметров) = 0;
</pre>
<p><li>= 0 - конструкция, называемая "чистый спецификатор"
<p><li>Пример описания чистой виртуальной функции:
<pre>
	virtual void fpure(void) = 0;
</pre>
<p><li>Шаблон семейства функций (function template) определяет неограниченное множество родственных функций и имеет следующий вид: 
<pre>
	template <список_параметров шаблона> определение функции
</pre>
<p><li>Аналогично определяется шаблон семейства классов: 
<pre>
	template <список_параметров_шаблона> определение класса
</pre>
<p><li>Формат определения объекта одного из классов, порождаемых шаблоном классов: 
<pre>
	имя параметризованного_класса <фактические_параметры шаблона> имя объекта(параметры_конструктора);
</pre>
</ol>
<p>&nbsp;</p>
</td></tr>
<tr bgcolor="#f3f3f3"><td align=center valign=top class="author">&copy;&nbsp;Ставропольский колледж связи, 2012
</td></tr><tr><td>
</table></center></p>
</body>
</html> 