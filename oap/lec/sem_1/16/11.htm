<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 16</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=a>&nbsp 11 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Примеры программ</p>
<center><table border="5" width="90%" cellpadding=5>
<tr><td width="16%" align="center"><a href="#01">Пример 1</a></td><td>Цвета и стили заполнения</td></tr>
<tr><td width="16%" align="center"><a href="#02">Пример 2</a></td><td>Палитра, стили заполнения, геометрические фигуры</td></tr>
<tr><td width="16%" align="center"><a href="#03">Пример 3</a></td><td>Движение закрашенного красного прямоугольника слева направо</td></tr>
<tr><td width="16%" align="center"><a href="#04">Пример 4</a></td><td>Орнамент из линий</td></tr>
<tr><td width="16%" align="center"><a href="#05">Пример 5</a></td><td>Рекурсивный узор из окружностей </td></tr>
<tr><td width="16%" align="center"><a href="#06">Пример 6</a></td><td>Плывущий корабль </td></tr>
<tr><td width="16%" align="center"><a href="#07">Пример 7</a></td><td>Мигающий светофор</td></tr>
<tr><td width="16%" align="center"><a href="#08">Пример 8</a></td><td>Рисование эллипса с заданным углом наклона</td></tr>
<tr><td width="16%" align="center"><a href="#09">Пример 9</a></td><td>Рисование звездчатого многоугольника</td></tr>
<tr><td width="16%" align="center"><a href="#10">Пример 10</a></td><td>Прямоугольник, перемещаемый клавишами стрелка</td></tr>
<tr><td width="16%" align="center"><a href="#11">Пример 11</a></td><td>Построение звездного неба в верхней части экрана, затем в его нижней части</td></tr>
<tr><td width="16%" align="center"><a href="#12">Пример 12</a></td><td>Построение кривых Гильберта порядка N</td></tr>
<tr><td width="16%" align="center"><a href="#13">Пример 13</a></td><td>Организация выбора</td></tr>
<tr><td width="16%" align="center"><a href="#14">Пример 14</a></td><td>Коллекция фигур</td></tr>
<tr><td width="16%" align="center"><a href="#15">Пример 15</a></td><td>Праздничный салют</td></tr>
</table></center>
<p>&nbsp; </p>
<a name="01"></a>
<b><center>Цвета и стили заполнения</center></b>
<pre><b>
#include&lt;graphics.h&gt;
#include&lt;conio.h&gt;
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include"..\\h\\init.h"
main()
{       
	init();
	struct fillsettingstype save; char savepattern[8];
	char gray50[] = {0xFF, 0x55, 0xAD, 0x11, 0xFF, 0x55, 0xAD, 0x11};
	getfillsettings (&save);			// получить текущую установку
	if (save.pattern == USER_FILL)		// если шаблон пользователя,
		getfillpattern(savepattern);		// то сохранить его
	setfillstyle(SLASH_FILL, BLUE);		// изменить стиль заполнения
	bar(0, 0, 50, 50);				// заштриховать голубой полоской
	setfillpattern(gray50, YELLOW);		// собственный шаблон заполнения
	bar(50, 50, 100, 100);			// вычертить новую желтую полоску
	setfillstyle(1, 4);				// изменить стиль заполнения
	bar(100, 100, 150, 150);
	setfillstyle(2, 3); bar(150, 150, 200, 200); setfillstyle(3, 12); bar(200, 200, 250, 250);
	setfillstyle(5, 5); bar(250, 250, 300, 300); setfillstyle(6, 6); bar(300, 300, 350, 350);
	setfillstyle(7, 7); bar(350, 350, 400, 400); setfillstyle(8, 8); bar(100, 0, 150, 50);
	setfillstyle(9, 9); bar(150, 50, 200, 100); setfillstyle(10, 10);bar(200, 100, 250, 150);
	setfillstyle(11, 2); bar(250, 150, 300, 200); setfillstyle(1, 11); bar(300, 200, 350, 250);
	setfillstyle(2, 13); bar(350, 250, 400, 300); setfillstyle(3, 14); bar(400, 300, 450, 350);
	setfillstyle(4, 15); bar(450, 350, 500, 400);
	if (save.pattern == USER_FILL)		// если шаблон пользователя, то восстановить его 
		setfillpattern(savepattern, save.color);
	else					// иначе восстановить старый стиль
		setfillstyle(save.pattern, save.color);
	getch(); closegraph();
}

</b></pre>
<a name="02"></a>
<p><b><center>Палитра, стили заполнения, геометрические фигуры</center></b>
<pre><b>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include"..\\h\\init.h"
main()
{
	init();
	int x, y;
	struct palettetype palette; int color;
	getpalette(&palette);					// получить текущую палитру
	for(color = 0; color < palette.size; color++)
	{	setfillstyle(1, color);				// вычертить прямоугольники
		bar(20 * (color - 1), 0, 20 * color, 20);
		bar3d(20 * (color - 1), 70, 20 * color, 190, 16, color);
		setlinestyle(0, 3, 3); rectangle(20 * (color - 1), 200, 20 * color, 250);
		setfillstyle(5, color); sector(450, 70, 50, 280, 90, 60);	// дуги и сектора
		ellipse(450, 70, 285, 45, 90, 60); ellipse(450, 70, 285, 45, 87, 57);
		setfillstyle(2, color + 5); pieslice(450, 270, 0, 45, 85);
		setfillstyle(9, color + 2); pieslice(450, 270, 46, 145, 85);
		setfillstyle(3, color + 3); pieslice(450, 270, 146, 245, 85);
		setfillstyle(8, color + 4); pieslice(450, 270, 246, 359, 85);
	}
	if (palette.size > 1)			// только в случае двух и более цветов
	{
		do				// изменить случайно цвета
			setpalette(random(palette.size), random(palette.size));
		while(!kbhit());			// пока не нажата клавиша
		getch();				// сбросить нажатие
	}; setallpalette(&palette);			// восстановить палитру
	clearviewport(); setbkcolor(BLUE); setcolor(RED); setfillstyle(1, 3);
	x = getmaxx() / 2; y = getmaxy() / 2; pieslice(x, y, 270, 360, 100);
	setfillstyle(1, 2); pieslice(x, y, 0, 270, 100); settextstyle(1, 0, 2);
	moveto(x - 20, y - 40); outtext("75 %"); moveto(x + 20, y + 40); outtext("25 %");
	getch(); closegraph();
}

</b></pre>
<a name="03"></a>
<p><b><center>Движение закрашенного красного прямоугольника слева направо</center></b>
<pre><b>
#include&lt;graphics.h>
#include&lt;stdlib.h>
#include&lt;stdio.h>
#include&lt;conio.h>
#include&lt;dos.h>
#include"..\\h\\init.h"
void main()
{	
	init();
	setlinestyle(0, 0, 1); setwritemode(XOR_PUT);	// для стирания линий
	setbkcolor(7); setcolor(RED); setfillstyle(1, RED); bar(1, 90, 10, 110);
	for(int i = 11; i <= 300; i++)
	{
		line(i - 10, 90, i - 10, 110);			// удалить сторону слева
		line(i, 90, i, 110);				// пририсовать линию справа
		delay(20);
	}
	getch(); closegraph();
}
</b></pre>
<a name="04"></a>
<p><b><center>Орнамент из линий</center></b>
<pre><b>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;math.h&gt;
#include"..\\h\\init.h"
// построение рисунка
void Run ()
{
	double ang1, ang2, ang3, ang4, dz;
	ang1 = 0; ang3 = 0 + 0.1; ang2 = 2; ang4 = 2 + 0.1; 
	double cx, cy;		// Координаты центра вращения
	double x1, y1, x2, y2, x3, y3, x4, y4;
	int j;
	setcolor (LIGHTGRAY); 
	for (j = 0; j < 480; j++) 
		line (0, j, 639, j);
	for (; ;)
	{
		cx = 320 + cos(ang1 / 5) * 100; cy = 240 + sin(ang1 / 5) * 100;
		// Координаты концов отрезка
		x1 = cx + cos(ang1) * 120; y1 = cy + sin(ang1) * 80;
		x3 = cx + cos(ang3) * 120; y3 = cy + sin(ang3) * 80;
		x2 = cx + cos(ang2) * 80; y2 = cy + sin(ang2) * 120;
		x4 = cx + cos(ang4) * 80; y4 = cy + sin(ang4) * 120;
		setcolor (7);				// Цвет фона. Стереть линии
		line(x3, y3, x4, y4); line(x3 + 1, y3, x4 + 1, y4); line (x3 - 1, y3, x4 - 1, y4);
		setcolor (random(15)); line(x1, y1, x2, y2);	// Отрисовка отрезка
		dz = random (5) / 100;			// Изменение углов вращения
		ang1 += (0.01 + dz); ang2 += 0.02; ang3 += (0.01 + dz); ang4 += 0.02;
		if (kbhit())
			break;	// Выход из цикла по клавише
	} 
	getch(); closegraph(); 
}
int main(void)
{
	init();  
	Run();  
}

</b></pre>
<a name="05"></a>
<p><b><center>Рекурсивный узор из окружностей</center></b>
<p>Программа иллюстрирует использование рекурсивных методов &nbsp;&nbsp;и&nbsp;&nbsp; <a href="../12/04.htm">рекурсивных функций</a> &nbsp;&nbsp;применительно к графическим построениям.
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;dos.h&gt;
#include"..\\h\\init.h"
void elem(int x, int y, int r, int p)
{
        if(p)                   // p - порядок узора
        {
                circle(x, y, r);
                delay(100);
                elem(x + r, y, r / 2, p - 1);
                elem(x, y - r, r / 2, p - 1);
                elem(x - r, y, r / 2, p - 1);
                elem(x, y + r, r / 2, p - 1);
        }
}
void main()
{
	init();
	elem(320, 240, 60, 5);
	outtext("Нажмите  для завершения");
	getch(); closegraph();
}

</pre>

<a name="06"></a>
<p><b><center>Плывущий корабль</center></b>
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;dos.h&gt;
#include"..\\h\\init.h"
void ship(int x, int y, int color)
{
	const dx = 5, dy = 5; setcolor(color);
	// корпус
	moveto(x, y);
	lineto(x, y - 2 * dy); lineto(x + 10 * dx, y - 2 * dy);
	lineto(x + 11 * dx, y - 3 * dy); lineto(x + 17 * dx, y - 3 * dy);
	lineto(x + 14 * dx, y); lineto(x, y);
	// надстройка
	moveto(x + 3 * dx, y - 2 * dy);
	lineto(x + 4 * dx, y - 3 * dy); lineto(x + 4 * dx, y - 4 * dy);
	lineto(x + 13 * dx, y - 4 * dy); lineto(x + 13 * dx, y - 3 * dy);
	line(x + 5 * dx, y - 3 * dy, x + 9 * dx, y - 3 * dy);
	// капитанский мостик
	rectangle(x + 8 * dx, y - 4 * dy, x + 11 * dx, y - 5 * dy);
	// труба	
	rectangle(x + 7 * dx, y - 4 * dy, x + 8 * dx, y - 7 * dy);
	// иллюминаторы
	circle(x + 12 * dx, y - 2 * dy, dx / 2); circle(x + 14 * dx, y - 2 * dy, dx / 2);
	// мачта
	line(x + 10 * dx, y - 5 * dy, x + 10 * dx, y - 10 * dy);
	// оснастка
	moveto(x + 17 * dx, y - 3 * dy);
	lineto(x + 10 * dx, y - 10 * dy); lineto(x, y - 2 * dy);
}
void main()
{
	init();
	int x, y, maxx, dx = 5;
	maxx = getmaxx();
	x = -10; y = 100;
	while(x < maxx)
	{
		ship(x, y, GREEN); delay(90);
		ship(x, y, BLACK); x += dx;
	}
	setcolor(GREEN);
	outtextxy(10, 10, "Рейс завершен");
	outtextxy(10, 24, "Нажмите ");
	getch(); closegraph();
}
</pre>
<a name="07"></a>
<b><center><p>Мигающий светофор</center></b>
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;dos.h&gt;
#include"..\\h\\init.h"
void krug(int x, int y, int r, int fc, int bc)
{
	setfillstyle(SOLID_FILL, fc);
	setcolor(fc); pieslice(x, y, 0, 360, r);
	setcolor(bc); circle(x, y, r);
}
void main()
{
	init();
	outtextxy(10, 10, "Соблюдай правила уличного движения");
	rectangle(88, 88, 112, 152);
	// Горит красный свет
	krug(100, 100, 10, RED, WHITE);
	krug(100, 120, 10, LIGHTGRAY, WHITE);
	krug(100, 140, 10, LIGHTGRAY, WHITE);
	for(int i = 1; i < 2; i++)
	{
		// Здесь горит красный
		delay(3000);
		// Включить желтый
		krug(100, 120, 10, YELLOW, WHITE); delay(1000);
		// Выключить красный
		krug(100, 100, 10, LIGHTGRAY, WHITE);
		// Выключить желтый
		krug(100, 120, 10, LIGHTGRAY, WHITE);
		// Включить зеленый
		krug(100, 140, 10, GREEN, WHITE); delay(2000);
		// Мигающий зеленый сигнал
		for(int j = 1; j < 4; j++)
		{
			delay(500);
			krug(100, 140, 10, GREEN, WHITE); delay(500);
			krug(100, 140, 10, LIGHTGRAY, WHITE);
		}
		// Включить желтый
		krug(100, 120, 10, YELLOW, WHITE); delay(1500);
		// Выключить желтый
		krug(100, 120, 10, LIGHTGRAY, WHITE);
		// Включить красный
		krug(100, 100, 10, RED, WHITE);
	}
	outtextxy(10, 25, "Нажмите ");
	getch(); closegraph();
}
</pre>
<a name="08"></a>
<b><center><p>Рисование эллипса с заданным углом наклона</center></b>
<p>В программе изображается эллипс, повернутый относительно данного эллипса на заданный угол и закрашенный посредством множества точек.
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;iostream.h&gt;
#include&lt;conio.h&gt;
#include&lt;math.h&gt;
#include"..\\h\\init.h"
void main()
{
	clrscr();
	float a;
	int xr = 50, yr = 90, x, y, xn = 60, yn = 100;		// координаты
	int bk = 7, c = 1, b = 3, st = 1;			// цвета и стили
	cout << "Угол наклона в градусах (0 - 90) ";
	cin >> a; a *= M_PI / 180;				// выразить угол в радианах
	init(); setbkcolor(bk);
	// нарисовать и закрасить эллипс
	setcolor(c); setfillstyle(st, b); fillellipse(xn, yn, xr, yr);
	// исследуем область экрана и если точка принадлежит эллипсу, рисуем ее в отраженном эллипсе
	for(y = 0; y <= 300; y++)
	{
		for(x = 0; x <= 170; x++)
		{
			// рисовать, если цвет точки исследуемой области равен цвету рисования - получим контур эллипса
			// if(getpixel(x, y) == c)
			// рисовать, если цвет точки исследуемой области равен цвету рисования или цвету заполнения
			// получим закрашенный при помощи точек эллипс 
			if(getpixel(x, y) == b || getpixel(x, y) == c)
			{
				xn = x * cos(a) - y * sin(a) + 300;
				yn = x * sin(a) + y * cos(a);
				putpixel(xn, yn, c);
			}
		}
	}
	getch(); closegraph();
}
</pre>
<a name="09"></a>
<b><center><p>Рисование звездчатого многоугольника<br>n - количество вершин звезды</center></b>
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;dos.h&gt;
#include&lt;conio.h&gt;
#include&lt;math.h&gt;
#include"..\\h\\init.h"
void main()
{
	init();
	// r, R - радиусы вписанной и описанной окружностей
	// x, y - координаты центра правильного звездчатого 2*n-угольника
	// c, b, st - цвет рисования, цвет и стиль заполнения
	int num, a, r, R, x, y, c, b, st, dx, dy, bk;
	float alfa, dg;
	const int n = 15, N = 4 * (n + 1);
	int poly[N] = {0};
	R = 150; r = 20;
	x = getmaxx() / 2; y = getmaxy() / 2;
	c = 4; b = 14; st = 1;
	dg = M_PI / n;
	num = 0; alfa = 0;
	poly[num] = x + R; poly[num + 1] = y;
	for(num = 2; num < N - 4; num += 2)
	{
		alfa += dg;
		if(num % 4 == 0)
			a = R;
		else
			a = r;
		dx = a * cos(alfa); dy = a * sin(alfa);
		poly[num] = x + dx; poly[num + 1] = y - dy;
	}
	poly[num] = poly[0]; poly[num + 1] = poly[1];
	bk = 2;			// цвет фона
	// изобразить заданным цветом
	setbkcolor(bk); setcolor(c);
	setfillstyle(st, b); fillpoly(2 * n, poly);
	delay(2500);
	// изобразить цветом фона
	setbkcolor(bk); setcolor(bk);
	setfillstyle(st, bk); fillpoly(2 * n, poly);
	delay(2500);
	// изобразить новым заданным цветом
	c = 15; b = 12; st = 1;
	setbkcolor(bk); setcolor(c);
	setfillstyle(st, b); fillpoly(2 * n, poly);
	getch(); closegraph();
}
</pre>
<a name="10"></a>
<b><center><p>Прямоугольник, перемещаемый клавишами стрелка</center></b>
<pre>
#include&lt;graphics.h>
#include&lt;stdlib.h>
#include&lt;stdio.h>
#include&lt;conio.h>
#include"..\\h\\init.h"
#define	ESC		27
#define	UP_ARROW	72
#define	DOWN_ARROW	80
#define	RIGHT_ARROW	77
#define	LEFT_ARROW	75
// построение прямоугольника и управление его перемещением
void MoveRec()
{
	int i, x, y, x1, y1, x2, y2, scalex = 5, scaley = 5, dx = 70, dy = 20;
	int MaxColors, MaxX, MaxY;
	MaxColors = getmaxcolor() + 1;
	MaxX = getmaxx(); MaxY = getmaxy();
	setbkcolor(BLUE); setfillstyle(1, WHITE);
	// начальная позиция - прямоугольник в центре экрана
	x1 = MaxX/2 - dx; y1=MaxY/2 - dy;
	x2 = MaxX/2 + dx; y2=MaxY/2 + dy;
	bar(x1, y1, x2, y2);
	for(i = getch(); i != ESC; i=getch())
	{
		if(i) continue;		// алфавитно-цифровая клавиша
		switch(getch())
		{
			case	UP_ARROW	: x = 0; y =-1; break;
			case	DOWN_ARROW	: x = 0; y = 1; break;
			case	RIGHT_ARROW	: x = 1; y = 0; break;
			case	LEFT_ARROW	: x =-1; y = 0; break;
			default			: continue;
		}	// не вышли ли за границу экрана
		if ((x1 + x * scalex < 0) || (x2 + x * scalex > MaxX))
			x = 0;
		if ((y1 + y * scaley < 0) || (y2 + y * scaley > MaxY))
			y = 0;
		// старое изображение закрасить цветом фона
		setfillstyle(1, BLUE); bar(x1, y1, x2, y2);
		// нарисовать новый прямоугольник
		setfillstyle(1, RED);
		x1 += x * scalex; x2 += x * scalex;
		y1 += y * scaley; y2 += y * scaley;
		bar(x1, y1, x2, y2);
	}
}
void main()
{
	init();
	MoveRec();
}
</pre>
<a name="11"></a>
<b><center><p>Построение звездного неба в верхней части экрана, затем в его нижней части</center></b>
<pre>
// звездное небо
#include&lt;graphics.h>
#include&lt;stdlib.h>
#include&lt;stdio.h>
#include&lt;conio.h>
#include"..\\h\\init.h"
void Pixel()	// вывод точек (пикселов)
{
	int seed = 1000, x, y, h, w, color;
	long int i;
	// максимальное число цветов и размер экрана
	int MaxColors, MaxX, MaxY;
	MaxColors = getmaxcolor() + 1;
	MaxX = getmaxx(); MaxY = getmaxy();    cleardevice(); srand(seed);
	for(i = 0; i < 20000; i++)	// в верхней части экрана
	{
		x = 1 + random(MaxX - 1); y = 1 + random(MaxY / 2 - 1);
		color = random(MaxColors); putpixel(x, y, color);
	}
	getch();
	setviewport(0, MaxY / 2, MaxX, MaxY, 1);
	srand(seed);
	for(i = 0; i < 20000; i++)	// в нижней части экрана
	{
		x = 1 + random(MaxX - 1); y = 1 + random(MaxY - 1);
		color = random(MaxColors); putpixel(x, y, color);
	}
}
void main()
{
	init();
	Pixel();
	getch(); closegraph();
}
</pre>
<a name="12"></a>
<b><center><p>Построение кривых Гильберта порядка N</center></b>
<pre>
#include&lt;graphics.h>
#include&lt;stdlib.h>
#include&lt;stdio.h>
#include&lt;conio.h>
#include"..\\h\\init.h"
#define ESC	27
#define H0	500	// начальная величина соединительной линии
int N, x, y, h;
void A(int);
void D(int);
void B(int);
void C(int);
#define	incX	x += h; lineto(x, y)
#define	incY	y += h; lineto(x, y)
#define	decX	x -= h; lineto(x, y)
#define	decY	y -= h; lineto(x, y)
void A(int i)
{
	if(i > 0)
	{
		D(i - 1); decX; A(i - 1); incY; A(i - 1); incX; B(i - 1);
	}
}
void B(int i)
{
	if(i > 0)
	{
		C(i - 1); decY; B(i - 1); incX; B(i - 1); incY; A(i - 1);
	}
}
void C(int i)
{
	if(i > 0)
	{
		B(i - 1); incX; C(i - 1); decY; C(i - 1); decX; D(i - 1);
	}
}
void D(int i)
{
	if(i > 0)
	{
		A(i - 1); incY; D(i - 1); decX; D(i - 1); decY; C(i - 1);
	}
}
// построение кривых
void Gilbert()
{
	int j = 0; h = H0;
	init();
	do
	{
		setcolor(j + 1);
		x = getmaxx() / 2 + 150; y = getmaxy() / 2 - 240;
		j++; h /= 2; x += h / 2; y += h / 2;
		moveto(x, y);		// отсюда начинаем рисовать кривую
		A(j); getch();
	} while(j < N);
	closegraph();
}
void main()
{
	int i; clrscr();
	nn:	cputs("Порядок кривой ? (не выше 7)  >>"); cscanf("%d", &N);
		Gilbert();
		puts("Повторим ? ");
		if((i = getch()) != ESC)
			goto nn;
}
</pre>
<a name="13"></a>
<b><center><p>Организация выбора</center></b>
<p>В программе осуществляется переключение графического и текстового режимов, организован выбор задания из трех предложенных.
<p>Используются функции:
<ul>
<li>init()&nbsp - инициализация графики,
<li>ogl()&nbsp - перечень пунктов меню,
<li>z1() &nbsp - задание "Рисуем графические примитивы",
<li>z2() &nbsp - задание "Страничка текста в графике",
<li>z3() &nbsp - задание "Текстовый режим".
</ul>
<pre>
	#include&lt;graphics.h>
	#include&lt;stdlib.h>
	#include&lt;stdio.h>
	#include&lt;conio.h>
	#include&lt;dos.h>
	#include "..\\h\\init.h"
	void ogl()
	{
		int style = installuserfont("arus.chr");
		settextstyle(style,0,2);
		setcolor(11); outtextxy(240,20,"Меню");
		setcolor(9); outtextxy(100,150,"1. Рисуем графические примитивы");
		setcolor(9); outtextxy(100,180,"2. Страничка текста в графике");
		setcolor(9); outtextxy(100,210,"3. Текстовый режим");
		setcolor(9); outtextxy(100,240,"4. Закончить работу");
		setcolor(11); outtextxy(250,385,"Выбирай !");
	}
	void z1()
	{
		clearviewport();
		int style = installuserfont("trip.chr"); settextstyle(style,0,4);
		setcolor(12); outtextxy(53,15,"Рисуем графические примитивы");
		setcolor(GREEN); bar3d(30, 100, 50, 200, 15,1);
		bar3d(220, 200, 260, 230, 15, 1); bar3d(100, 200, 140, 230, 15, 0);
		bar3d(100, 100, 140, 200, 15, 1);
		int i, x, y, color;
		x = getmaxx() / 2; y = getmaxy() / 2;
		for(i = 7; i >= 1; i--)
		{
			if(i%2)  color = BLUE;
			else     color = RED;
			setcolor(color);  circle(x, y, 20*i);
			setfillstyle(SOLID_FILL, color);
			floodfill(x,y, color);
			delay(300);
		}
	}
	void z2()
	{
		clearviewport();
		int style;
		settextjustify(LEFT_TEXT, TOP_TEXT);
		style=installuserfont("goth.chr");
		settextstyle(style,0,4);
		char *str = "а б в г д е ж з и й к л м н о п р";
		int x = textwidth(str); int y = textheight(str);
		outtextxy((getmaxx() - x) / 2, y, str);
		str = "r s t u v w x y z";
		x = textwidth(str); y = textheight(str);
		outtextxy((getmaxx() - x) / 2, gety() + 2*y, str);
	}
	void z3()
	{       
		restorecrtmode(); textmode(2);
		window(1,1,80,25);  textbackground(11); textcolor(0);clrscr();
		_setcursortype(_NOCURSOR);
		window(7,6,75,21);  textbackground(0);clrscr();
		window(5,5,73,20);  textcolor(14); textbackground(1); clrscr();
		gotoxy(29,2); cprintf("Р У Б А И");
		gotoxy(28,4); cprintf("Омар Хайям");
		gotoxy(15,6); cprintf("Пусть каждый миг и каждая весна -");
		gotoxy(15,7); cprintf("Вся жизнь весельем будет вспоена,");
		gotoxy(15,8); cprintf("Ведь жизнь есть суть всего земного царства,");
		gotoxy(15,9); cprintf("Как проведешь, так и пройдет она.");
	}
	void main()
	{
		char ch; init();
		int cmode=getgraphmode();
		do
		{
			ogl();
			switch(ch = getch())
			{
				case '1': z1(); break;
				case '2': z2(); break;
				case '3': z3(); break;
			} getch(); setgraphmode(cmode);
		} while( ch != '4');
		closegraph();
	}
</pre>
<a name="14"></a>
<b><center><p>Коллекция фигур</center></b>
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;dos.h&gt;
#include&lt;math.h&gt;
#include"..\\h\\init.h"
void main()
{
	init();
	randomize();
	int i, j, x, y, xl, yl, xr, yr, color;
	const int N = 18, n = 4, m = 30;
	int xt[N], yt[N], xd[n], yd[n];
	float t, dt, s, r;
	// вложенные квадраты
	cleardevice();
	x = getmaxx() / 4; y = getmaxy() / 4;
	for (i = 1; i <= 30; i++)
	{
		setcolor(1 + random(15));
		xl = x - 3 * i; yl = y - 3 * i;
		xr = x + 3 * i; yr = y + 3 * i;
		rectangle(xl, yl, xr, yr);
	}
	// отрезки, окружности и круги
	for (i = 1; i <= 50; i++)
	{
		xl = random(320); yl = random(480);
		xr = random(320); yr = random(480);
		setcolor(1 + random(15));
		line(300 + xl, yl, 300 + xr, yr);
		circle(300 + random(320), random(480), random(50));
		setfillstyle(1, random(13)); x = random(30);
		fillellipse(300 + random(320), random(480), x, x);
	}
	// калейдоскоп - 4 * 1500 точек до нажатия клавиши
	xl = 250; yl = 230;
	while(!kbhit())
	{
		color = 1 + random(15);
		for(i = 0; i < 1500; i++)
		{
			x = random(xl / 2); y = random(yl / 2);
			// рисуем точку
			putpixel(x, yl + y, color);
			// три отражения нарисованной точки
			putpixel(xl - x, yl + y, color);
			putpixel(xl - x, yl + yl - y, color);
			putpixel(x, yl + yl - y, color);
		} delay(300);
	}
	cleardevice();
	// павлин
	xl = 320; yl = 200;
	setcolor(15);
	for(x = 0; x < xl; x++)
	{
		xr = 120 + yl / 2 * sin((float) x / 30);
		yr =  90 + yl / 2 * cos((float) x / 30);
		line(x, 7 * yl / 4, xr, 5 * yl / 4 + yr);
	}
	// кружево
	setcolor(15);
	t = 0; dt = 2 * M_PI / N;
	yl = 200; xl = 320;
	xr = yl / 2;	// радиус описанной окружности
	for(i = 0; i < N; i++)
	{
		t += dt;
		xt[i] = xl / 2 + xr * cos(t);
		yt[i] = yl / 2 + xr * sin(t);
	}
	for(i = 0; i < N - 1; i++)
	{
		for(j = i + 1; j < N - 1; j++)
		{
			line(xl + xt[i], yt[i], xl + xt[j], yt[j]);
		}
	}
	// убегающий квадрат
	xr = 150; xl = 340; yl = 220;
	xt[0] = xl; xt[1] = xl + xr; xt[2] = xl + xr; xt[3] = xl;
	yt[0] = yl + xr; yt[1] = yl + xr; yt[2] = yl; yt[3] = yl;
	s = .08; r = 1 - s;
	for(i = 0; i <= m; i++)
	{
		for(j = 0; j < n; j++)
		{
			xd[j] = r * xt[j] + s * xt[(j + 1) % 4];
			yd[j] = r * yt[j] + s * yt[(j + 1) % 4];
		}
		for(j = 0; j < n; j++)
		{
			line(xt[j], yt[j], xt[(j + 1) % 4], yt[(j + 1) % 4]);
		}
		for(j = 0; j < n; j++)
		{
			xt[j] = xd[j]; yt[j] = yd[j];
		}
	}
	// круги на воде
	for(j = 7; j < 16; j++)
	{
		setcolor(j);
		for(xr = 10; xr <= 60; xr += 3)
		{
			circle(560, 400, xr);
			delay(50);
		} delay(20);
	}
	// пять кривых
	// 0 - спираль Архимеда	1 - улитка Паскаля	2 - кардиоида
	// 3 - трилистник	4 - четырехлистник
	setviewport(10, 10, 330, 210, 1);
	x = 100; setcolor(15);
	for(i = 0; i < 5; i++)
	{
		j = 75;
		switch(i)
		{
			case 0: xl = x; yl = x; break;
			case 1: xl = x + 3 * j / 2; yl = x; break;
			case 2: xl = x + 2 * j; yl = x; break;
			case 3: xl = x + j ; yl = x; break;
			case 4: xl = x + j; yl = x; break;
		}
		for(t = 0; t <= 2 * M_PI; t += M_PI / j)
		{
			switch(i)
			{
				case 0: r = j * t / 8; break;
				case 1: r = j / 2 + j * cos(t); break;
				case 2: r = j * (1 + cos(t)); break;
				case 3: r = j * cos(3 * t); break;
				case 4: r = j * cos(2 * t); break;
			}
			xr = x + r * cos(t);
			yr = x - r * sin(t);
			line(xl, yl, xr, yr);
			xl = xr; yl = yr;
		}
		delay(500); clearviewport();
	}
	// геометрический узор
	xr = 60; xl = 10; yl = 17;
	// рисуем 3 строки по 4 узора в каждой
	for(x = 0; x < 3; x++)
	{
		for(y = 0; y < 4; y++)
		{
			xt[0] = xl; xt[1] = xl + xr; xt[2] = xl + xr; xt[3] = xl;
			// определяем направление вращения квадрата
			if((x%2==0 && y%2==0) || (x%2==1 && y%2==1))
			{
				yt[0] = yl + xr; yt[1] = yl + xr; yt[2] = yl; yt[3] = yl;
			}
			else
			{
				yt[0] = yl; yt[1] = yl; yt[2] = yl + xr; yt[3] = yl + xr;
			}
			s = .8; r = 1 - s;
			// вращаем квадрат
			for(i = 0; i < 21; i++)
			{
				for(j = 0; j < 4; j++)
				{
					xd[j] = r * xt[j] + s * xt[(j + 1) % 4];
					yd[j] = r * yt[j] + s * yt[(j + 1) % 4];
				}
				for(j = 0; j < 4; j++)
				{
					line(xt[j], yt[j], xt[(j + 1) % 4], yt[(j + 1) % 4]);
				}
				for(j = 0; j < 4; j++)
				{
					xt[j] = xd[j]; yt[j] = yd[j];
				}
			} xl += xr;
		} xl = 10; yl += xr;
		delay(500);
	}
	getch(); getch(); closegraph();
}
</pre>
<a name="15"></a>
<b><center><p>Праздничный салют</center></b>
<pre>
#include&lt;graphics.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
#include&lt;conio.h&gt;
#include&lt;dos.h&gt;
#include"..\\h\\init.h"
void main()
{
	init();
	setbkcolor(0); cleardevice();
	randomize();
	int color, x, y, x1, y1, dx, dy, r, h, w;
	float i;
	// построения на экране линий, окружностей и рамки для окна
	x1 = 10; dy = 10;
	for(y1 = dy; y1 <= getmaxy() - dy; y1 += dy)
	{
		setlinestyle(0, 1, 3);
		color = 1 + random(15); setcolor(color);
		line(x1, y1, x1 + random(100), y1);
		setlinestyle(0, 1, 1); setfillstyle(random(12), color);
		r = 5 + random(10);
		fillellipse(140 + random(80), 50 + random(380), r, r);
	}
	x1 = 250; y1 = 30; w = 350; h = 410;
	setfillstyle(1, 11); bar(x1 - 8, y1 - 8, x1 + w + 8, y1 + h + 8);
	setfillstyle(1, 9); bar(x1 - 4, y1 - 4, x1 + w + 4, y1 + h + 4);
	// создать графическое окно и рисовать в нем салют
	setviewport(x1, y1, x1 + w, y1 + h, 1); clearviewport();
	x = w / 2;  dy = h / 50;
	setcolor(7); setfillstyle(1, 7); r = 1;
	for(y = h - dy; y > 2 * h / 3; y -= dy)
	{
		setcolor(7); setfillstyle(1, 7);
		fillellipse(x, y, r, r);
		delay(90);
		setcolor(0); setfillstyle(1, 0);
		fillellipse(x, y, r, r);
		if(y % 3 == 0)
			r++;
	}
	setcolor(2); setfillstyle(1, 2);
	fillellipse(x, y, r, r);
	delay(70);
	setcolor(0); setfillstyle(1, 0);
	fillellipse(x, y, r, r);
	r = 1;
	for(;;)
	{
		color = 1 + random(15); setcolor(color);
		i = random(280) * .011;
		setfillstyle(1, color);
		x1 = x + random(w / 3) * cos(i);
		y1 = y - random(h / 2) * sin(i);
		r = 1 + random(2);
		fillellipse(x1, y1, r, r);
		delay(70);
		setcolor(0); setfillstyle(1, 0);
		fillellipse(x1, y1, r, r);
		for(i = 0; i <= 2 * M_PI; i += M_PI_4 / 5)
		{
			putpixel(x1 + random(30) * cos(i), y1 + random(20) * sin(i), color);
			delay(1);
		}
		delay(50);
		if(kbhit())
			break;
	}
	getch(); closegraph();
}
</pre>

<p>&nbsp</p>
</td>
</tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=a>&nbsp 11 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>