<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 05</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=a>&nbsp 8 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
 <p align=center class=dbi><br>Перечень операций языка Си

<ul>
	<li><a href="08.htm#1">Операции, уровень приоритета которых равен 1</a>	</li>
<li><a href="08.htm#2">Операции, уровень приоритета которых равен 2</a>	</li>
<li><a href="08.htm#3">Операции, уровень приоритета которых равен 3</a>	</li>
<li><a href="08.htm#4">Операции, уровень приоритета которых равен 4</a>	</li>
<li><a href="08.htm#5">Операции, уровень приоритета которых равен 5</a>	</li>
<li><a href="08.htm#6">Операции, уровень приоритета которых равен 6</a>	</li>
<li><a href="08.htm#7">Операции, уровень приоритета которых равен 7</a>	</li>
<li><a href="08.htm#8">Операции, уровень приоритета которых равен 8</a>	</li>
<li><a href="08.htm#9">Операции, уровень приоритета которых равен 9</a>	</li>
<li><a href="08.htm#10">Операции, уровень приоритета которых равен 10</a>	</li>
<li><a href="08.htm#11">Операции, уровень приоритета которых равен 11</a>	</li>
<li><a href="08.htm#12">Операции, уровень приоритета которых равен 12</a>	</li>
<li><a href="08.htm#13">Операции, уровень приоритета которых равен 13</a>	</li>
<li><a href="08.htm#14">Операции, уровень приоритета которых равен 14</a>	</li>
<li><a href="08.htm#15">Операции, уровень приоритета которых равен 15</a>	</li>	

 <li><a href="08.htm#16">Приоритеты и порядок вычислений операторов</a></li>
	 
     
</ul>

<p  id="id_122">Рассмотрим множество операций языка Си. Описанные операции входят в это 

множество. Язык Си отличается их большим разнообразием. В этом разделе будет обсуждаться их 

семантика. Каждая операция характеризуется уровнем приоритета и порядком, в котором эти 

операции выполняются - слева направо или справа налево. Если все операции выражения имеют один 

и тот же уровень приоритета, то значение выражения вычисляется слева направо в соответствии с 

порядком выполнения операций. Все операции с одним и тем же уровнем приоритета имеют один и тот 

же порядок. Однако, если в выражении имеются операции с различными уровнями приоритета, то 

сначала выполняются операции с наивысшим уровнем приоритета, затем - следующего за ним 

приоритета и так далее в порядке убывания приоритета. Операции одного уровня приоритета 

выполняются в последовательности, указанной их порядком.</p>
<a name="1"></a>    <p align=center class=db>Операции, уровень приоритета которых равен 1<p  

id="id_123"><b>Операции вызова функции, индексирования и выбора</b>. В качестве операций языка 

Си рассматриваются также скобки в вызове функции, квадратные скобки для индексирования 

массивов, точка и стрелка вправо для выбора компонентов структуры или объединения. Уровень этих 

операторов равен 1, все операции выполняются слева направо.</p>
    <center><h4>Операция вызова функции: ( )</h4></center><p  id="id_124">Пример 1:</p>
 <pre>fe(e1, e2,...,en);</pre>
    <p  id="id_126">Вызов функции fe  с аргументами e1, e2, ..., en. Значением этого выражения 

является значение, которое возвращает функция.</p>
    <p  id="id_129">Пример 2:</p>
 <pre>x = sqrt (y);</pre>
    <center><h4>Операция индексирования массива: []</h4></center><p  id="id_131">Синтаксис:</p>
 <pre>array [2]</pre>
    <p  id="id_133">Значением выражения является третий элемент массива.</p>
    <p  id="id_134">Присвоение значения 26  одиннадцатому элементу массива записывается таким 

образом:</p>
    <pre>array[10]=26;</pre>
    <p  id="id_137">Первый элемент массива описывается выражением array[0]  (более подробно о 

массивах описано в лекции 12).</p>
<center><h4>Операция выбора компонентов структуры или объединения: .</h4></center><p  

id="id_139">Синтаксис:</p>
<pre>struct.element</pre>
<p  id="id_141">Значением этого выражения является элемент element  структуры struct  или 

объединения (см. лекцию 14). Оператор:</p>
<pre>struct.element=1963;</pre>
<p  id="id_145">присваивает значение 1963  этому элементу.</p>
<center><h4>Операция выбора компонентов структуры с указателем: -&gt;</h4></center><p  

id="id_147">Синтаксис:</p>
<pre>my_birthday-&gt;day,</pre>
<p  id="id_149">my_birthday  - указатель на структуру. Оператор:</p>
<pre>my_birthday-&gt;day=26;</pre>
<p  id="id_152">присваивает значение 26  структурной переменной day, на которую указывает 

my_birthday.</p>
<a name="2"></a><p align=center class=db>Операции, уровень приоритета которых равен 2<p  

id="id_156"><b>Унарные операции</b>. Для унарных операций требуется только один операнд ; эти 

операции либо префиксные, либо постфиксные. Операция sizeof  имеет два варианта: префиксная 

операция и унарная операция.</p>
<center><h4>Операция косвенной ссылки: *</h4></center><p  id="id_158">Это указатель на любой 

тип T, кроме void. Тип результата T.</p>
<p  id="id_162">Использование:</p>
<pre>*pe</pre>
<p  id="id_164">Значением выражения является переменная, адресуемая указателем pe.</p>
<p  id="id_166">Пример 1:</p>
<pre>*ptr=c;</pre>
<p  id="id_168">Пример 2:</p>
<pre>*fpe;</pre>
<p  id="id_170">Значением выражения является функция, адресуемая указателем fpe.</p>
<p  id="id_172">Пример 3:</p>
<pre>fpe=*funcname;
(*fpe)(arg1, arg2);</pre>
<center><h4>Операция получения адреса: &amp;</h4></center><p  id="id_174">У этой операции тип 

операнда  есть переменная любого типа, кроме void. Тип результата - указатель на Т.</p>
<p  id="id_177">Использование:</p>
<pre>&amp;v</pre>
<p  id="id_179">Значением выражения является адрес переменной v.</p>
<p  id="id_181">Пример:</p>
<pre>myptr=&amp;n;</pre>
<center><h4>Операция отрицания: -</h4></center><p  id="id_183">Тип операнда  - арифметический. 

Тип результата: unsigned, long, double, int.</p>

    <center><h4>Операция логического отрицания: !</h4></center><p  id="id_188">Тип операнда  - 

арифметический или указатель. Тип результата - int. Если операнд  равен 0, то результат равен 1 

 и наоборот.</p>
    <p  id="id_192">Пример:</p>
 <pre>if(!good) printf("not good");</pre>
    <center><h4>Операция дополнения до 1: ~</h4></center><p  id="id_194">Тип операнда  - 

интегральный. Тип результата: int, long, unsigned.</p>
    <p  id="id_198">Пример:</p>
 <pre>opposite=~mask;</pre>
    <p  id="id_200">Дополнение до единицы значения mask. Результат присваивается переменной 

opposite.</p>
    <center><h4>Операция увеличения: ++</h4></center><p  id="id_203">Тип операнда  - 

арифметический или указатель. Тип результата: int, unsigned, long, double, указатель. Значение 

операнда  увеличивается, и становится новым значением операнда. Значение указателя 

увеличивается на величину указываемого объекта, значения других операндов  увеличиваются на 

единицу.</p>
    <center><h4>Операция увеличения, постфиксная: ++</h4></center><p  id="id_208">Тип операнда  

- арифметический или указатель. Тип результата: int, unsigned, long, double, указатель. 

Значение операнда  увеличивается, но возвращается старое значение операнда. Значение указателя 

увеличивается на величину указываемого объекта, другие операнды  увеличиваются на единицу.</p>
    <p  id="id_213">Использование:</p>
 <pre>iv++</pre>
    <p  id="id_215">Увеличение iv  на 1. Значением этого выражения является значение iv  до 

увеличения.</p>
    <p  id="id_219">Пример:</p>
 <pre>j=i++;</pre>
    <p  id="id_221">Использование:</p>
 <pre>pv++;</pre>
    <p  id="id_223">Увеличение указателя pv  на 1, так что он будет указывать на следующий 

объект того же типа. Значением этого выражения является значение pv  до увеличения.</p>
    <p  id="id_227">Пример:</p>
 <pre>*ptr++=0;</pre>
    <p  id="id_229">Присвоить значение 0  переменной, на которую указывает ptr, затем увеличить 

значение указателя ptr  так, чтобы он указывал на следующую переменную того же типа.</p>
    <center><h4>Операция уменьшения: --</h4></center><p  id="id_233">Тип операнда  - те же, что 

и для ++. Тип результата - те же, что и для ++.</p>
    <p  id="id_236">Использование:</p>
 <pre>--iv</pre>
    <p  id="id_238">Уменьшение iv  на 1. Значением этого выражения является значение iv  после 

уменьшения.</p>
    <p  id="id_242">Пример:</p>
    <pre>i=--j;</pre>
    <center><h4>Операция уменьшения (постфиксная): --</h4></center><p  id="id_244">Тип операнда 

 - те же, что и для ++ (постфиксная).</p>
        <p  id="id_246">Использование:</p>
    <pre>iv--</pre>
        <p  id="id_248">Уменьшение iv  на 1. Значением этого выражения является значение iv  до 

уменьшения.</p>
        <p  id="id_252">Пример:</p>
 <pre>j=i--;</pre>
        <center><h4>Операция определения требуемой памяти в байтах: sizeof</h4></center><p  

id="id_254">Тип операнда  - значение любого типа или имени типа. Тип результата - unsigned. 

Используется как sizeof  (выражение) или sizeof  (имя типа).</p>
        <p  id="id_258">Пример:</p>
        <pre>n=sizeof(arname)/sizeof(int);</pre>
        <p  id="id_260">Число элементов в массиве целых чисел, определяемое как число байт в 

массиве, поделенное на число байт, занимаемых одним элементом массива.</p>
        <a name="3"></a><p align=center class=db>Операции, уровень приоритета которых равен 3<p 

 id="id_261"><b>Мультипликативные операции</b>. Порядок выполнения мультипликативных операций - 

слева направо.</p>
        <center><h4>Операция умножения: *</h4></center><p  id="id_262">Тип операндов  - 

арифметический. Тип результатов: int, unsigned, long, double.</p>
        <p  id="id_267">Использование:</p>
    <pre>ae1*ae2</pre>
        <p  id="id_269">Произведение значений ae1*ae2.</p>
        <p  id="id_271">Пример:</p>
 <pre>z=35*5;</pre>
 
    <center><h4>Операция деления: /</h4></center><p  id="id_273">Тип операндов  - 

арифметический. Тип результата - int, unsigned, long, double.</p>
    <p  id="id_278">Использование:</p>
 <pre>ae1/ae2</pre>
    <p  id="id_280">Частное от деления ae1  на ae2.</p>
    <p  id="id_283">Пример:</p>
 <pre>i=j/7;</pre>
        <center><h4>Операция получения остатка: %</h4></center><p  id="id_285">Тип операндов  - 

интегральный. Тип результата int, unsigned, long. Знак остатка машинно-зависим.</p>
        <p  id="id_289">Использование:</p>
 <pre>ae1%ae2</pre>
        <p  id="id_291">Остаток от деления по модулю.</p>
        <p  id="id_292">Пример:</p>
 <pre>j=i%2;</pre>
        <p  id="id_294">Если i  четное число, то j  равно нулю.</p>
        <a name="4"></a><p align=center class=db>Операции, уровень приоритета которых равен 4<p 

 id="id_297">Уровень приоритета аддитивных операций равен 4. Выполняются эти операции слева 

направо.</p>
        <center><h4>Операция сложения: +</h4></center><p  id="id_298">Тип операндов:</p>
        <ol  id="id_299"><li>арифметический;</li><li>один операнд  указатель, другой - 

интегрального типа; оба операнда  не могут быть указателями.</li></ol>
        <p  id="id_302">Тип результата: int, unsigned, long, double, указатель. Перед сложением 

значение целого операнда  умножается на величину элемента данных, тип которых соответствует 

типу указателя.</p>
 Использование:
 <pre>ae1+ae2</pre>
        <p  id="id_309">Сумма значений ae1  и ae2.</p>
        <p  id="id_312">Пример 1:</p>
 <pre>i=i+100;</pre>
        <p  id="id_314">Первоначальное значение i  увеличивает на 100.</p>Пример 2:
 <pre>last=arname+arsize-1;</pre>
    <p  id="id_319">Присваивает переменной last  адрес последнего элемента массива arname.</p>
    <center><h4>Операция вычитания: -</h4></center><p  id="id_322">Тип операндов:</p>
    <ol  id="id_323"><li>арифметический;</li><li>один операнд  - указатель, другой - 

интегрального типа;</li><li>операнды  - указатели одного типа.</li></ol>
    <p  id="id_327">В первом случае тип результата: int, unsigned, long, double. Во втором 

случае тип результата - указатель. До вычитания значение целого операнда  умножается на 

величину элемента данных, тип которых соответствует типу указателя. В третьем случае тип 

результата - int. Результат - число объектов, отделенных двумя указателями.</p>
    <p  id="id_333"><b>Арифметические действия с указателями</b>. Арифметические действия с 

указателями отличаются от арифметических действий с обычными целыми значениями, и определяются 

следующим образом. Предположим, что i  является целым выражением, а указатели p  и q  указывают 

на элементы типа Т. Сложение значения i  и p  эквивалентно сложению числа ячеек памяти в 

байтах, занятых i  элементами типа Т. Аналогично определяется операция вычитания. Результат 

вычитания двух указателей типа Т  является не разностью значений двух указателей, а числом 

элементов типа Т, размещенных между ячейками, ссылки на которые обеспечиваются указателями. 

Никакие другие арифметические действия с указателями не допускаются. Вычитание указателей имеет 

смысл только для указателей, ссылающихся на элементы одного и того же массива, поскольку только 

в этом случае разность адресов элементов массива всегда равна 
произведению целого значения на величину элемента.</p>
    <p  id="id_344">Использование:</p>
 <pre>ae1-ae2</pre>
    <p  id="id_346">Разность значений ae1  и ae2.</p>
    <p  id="id_349">Пример 1:</p>
 <pre>i=j-100;</pre>
    <p  id="id_351">Использование:</p>
 <pre>pe-ie</pre>
    <p  id="id_353">Адрес переменной типа pe, меньше на ie  адреса, заданного указателем 

pe.</p>
    <p  id="id_357">Пример 2:</p>
 <pre>first=last-arsize+1;</pre>
    <p  id="id_359">Использование:</p>
 <pre>pe1-pe2</pre>
    <p  id="id_361">Число переменных типа pe  в диапазоне от pe2  до pe1.</p>
    <p  id="id_365">Пример 3:</p>
 <pre>arsize=last-first;</pre>
 
 
 

    <a name="5"></a><p align=center class=db>Операции, уровень приоритета которых равен 5<p  

id="id_367">Уровень приоритета операций сдвига равен 5. Порядок выполнения операций - слева 

направо.</p>
    <center><h4>Операция сдвига влево: &lt;&lt;</h4></center><p  id="id_368">Тип операнда  - 

интегральный. Тип результата - такой же, как у левого операнда. Правый операнд  преобразуется к 

типу int. Левый операнд  сдвигается на число разрядов, равное значению правого операнда. 

Освобождающие разряды заполняются нулями.</p>
    <p  id="id_370">Использование:</p>
 <pre>ie1&lt;&lt;ie2</pre>
    <p  id="id_372">Двоичное представление ie1  сдвигается влево на ie2  разрядов, 

освобождающие разряды заполняются нулями.</p>
    <p  id="id_375">Пример:</p>
 <pre>four=x&lt;&lt;2;</pre>
    <center><h4>Операция сдвига вправо: &gt;&gt;</h4></center><p  id="id_377">Тип операнда  - 

интегральный. Тип результата - такой же, как у левого операнда. Правый операнд  преобразуется к 

типу int. Левый операнд  сдвигается на число разрядов, равное  значению правого операнда. Сдвиг 

будет логическим сдвигом, если левый операнд  имеет тип unsigned.</p>
    <p  id="id_380">Использование:</p>
 <pre>ie1&gt;&gt;ie2</pre>
    <p  id="id_382">Двоичное представление ie1  сдвигается вправо на ie2  разрядов. Сдвиг 

вправо может быть арифметическим (т. е. освобождающиеся слева разряды заполняются значениями 

знакового разряда) или логическим в зависимости от реализации, однако гарантируется, что сдвиг 

вправо целых чисел без знака будет логическим и освобождающиеся слева разряды будут заполняться 

нулями.</p>
    <p  id="id_385">Пример:</p>
 <pre>x=x&gt;&gt;3;</pre>
    <a name="6"></a><p align=center class=db>Операции, уровень приоритета которых равен 6<p  

id="id_387">Уровень приоритета операций отношения равен 6. Выполняются эти операции слева 

направо.</p>
    <center><h4>Операция меньше: &lt;</h4></center><p  id="id_388">Тип операндов  - 

арифметический или указатель. Тип результата - int.</p>
    <p  id="id_390">Использование:</p>
 <pre>ae1&lt;ae2</pre>
    <p  id="id_392">Истина, если ae1  меньше, чем ae2.</p>
    <p  id="id_395">Пример:</p>
 <pre>if(x&lt;0) printf("negative");</pre>
        <center><h4>Операция больше: &gt;</h4></center><p  id="id_397">Тип операндов  - 

арифметический или указатель. Тип результата - int.</p>
        <p  id="id_399">Использование:</p>
 <pre>ae1&gt;ae2</pre>
        <p  id="id_401">Истина, если ae1  больше, чем ae2.</p>
        <p  id="id_404">Пример:</p>
 <pre>if(x&gt;0) printf("positive");</pre>
        <center><h4>Операция меньше или равно: &lt;=</h4></center><p  id="id_406">Тип операндов 

 - арифметический или указатель. Тип результата - int.</p>
                <p  id="id_408">Использование:</p>
 <pre>ae1&lt;=ae2</pre>
                <p  id="id_410">Истина, если ae1  меньше или равно ae2.</p>
                <center><h4>Операция больше или равно: &gt;=</h4></center><p  id="id_413">Тип 

операндов  - арифметический или указатель. Тип результата - int.</p>
                <p  id="id_415">Использование:</p>
                <div  class="example" id="id_416"><pre>ae1&gt;=ae2</pre></div>
                <p  id="id_417">Истина, если ae1  больше или равно ae2.</p>
                <a name="7"></a><p align=center class=db>Операции, уровень приоритета которых 

равен 7<p  id="id_420">Уровень приоритетов операций равенства/неравенства равен 7, выполняются 

они слева направо.</p>
                <center><h4>Операция равенство "=="</h4></center><p  id="id_421">Тип операндов  

- арифметический или указатель. Тип результата - int.</p>
                <p  id="id_423">Использование:</p>
 <pre>ie1==ie2</pre>
                <p  id="id_425">Истина, если ie1  равно ie2, иначе - ложь.</p>
                <center><h4>Операция неравенство: !=</h4></center><p  id="id_428">Тип операндов 

 - арифметический или указатель. Тип результата  - int.</p>
                <p  id="id_430">Единственным целым значением, с которым можно сравнивать 

указатели, является нулевое значение!</p>
                <p  id="id_431">Использование:</p>
 <pre>ie1!=ie2</pre>
                <p  id="id_433">Истина, если ie1  не равно ie2.</p>
                <p  id="id_436">Пример:</p>
 <pre>while (i!=0) 
	i=func;</pre>
                <a name="8"></a><p align=center class=db>Операция, уровень приоритета которой 

равен 8<p  id="id_438">Уровень приоритета операции поразрядное И равен 8. Выполняются такие 

операции слева направо.</p>
                <center><h4>Операция поразрядное И: &amp;</h4></center><p  id="id_439">Тип 

операндов  - интегральный. Тип результата: int, long, unsigned.</p>
                <p  id="id_443">Использование:</p>
 <pre>ie1 &amp; ie2</pre>
                <p  id="id_445">Побитовая операция И двоичных представлений ie1  и ie2. 

Значение выражения содержит 1  во всех разрядах, в которых и ie1  и ie2  содержат 1, и 0  во 

всех остальных разрядах.</p>
 Пример:
 <pre>flag=((x&amp;mask)!=0);</pre>
 <a name="9"></a><p align=center class=db>Операция, уровень приоритета которой равен 9<p  

id="id_455">Уровень приоритета операции поразрядное исключающее ИЛИ равен 9. Порядок выполнения 

таких операций слева направо.</p>
 <center><h4>Операция поразрядное исключающее или: ^</h4></center><p  id="id_456">Тип операндов 

 - интегральный. Тип результата: int, long, unsigned.</p>
 <p  id="id_460">Использование:</p>
 <pre>ie1^ie2</pre>
 <p  id="id_462">Побитовая операция исключающее ИЛИ двоичных представлений ie1  и ie2. Значение 

выражения содержит 1  в тех разрядах, в которых и ie1  и ie2  имеют разные двоичные значения, и 

0  во всех остальных разрядах.</p>
 <p  id="id_469">Пример:</p>
 <pre>diffbits=x^y;</pre>
 <a name="10"></a><p align=center class=db>Операция, уровень приоритета которой равен 10<p  

id="id_471">Уровень приоритета операции поразрядное включающее ИЛИ равен 10, порядок выполнения 

таких операторов - слева направо.</p>
 <center><h4>Операция поразрядное включающее или: |</h4></center><p  id="id_472">Тип операндов  

- интегральный. Тип результата: int, long, unsigned.</p>
 <p  id="id_476">Использование:</p>
 <pre>ie1 | ie2</pre>
 <p  id="id_478">Побитовая операция ИЛИ двоичных представлений ie1  и ie2. Значение выражения 

содержит 1  во всех разрядах, в которых ie1  или ie2  содержат 1, и 0  во всех остальных 

разрядах.</p>
 <p  id="id_486">Пример:</p>
 <pre>attrsum=attr1 | attr2;</pre>
 <a name="11"></a><p align=center class=db>Операция, уровень приоритета которой равен 11<p  

id="id_488">Уровень приоритета логической (условной) операции и равен 11. Выполняется операция 

слева направо.</p>
 <center><h4>Операция логическое И: &amp;&amp;</h4></center><p  id="id_489">Тип операндов  - 

арифметический или указатель. Тип результата - int. Если первый операнд  равен 0, то результат 

равен 0. В противном случае результат будет равен 1, если второй операнд  не равен 0, и равен 

0, если второй операнд  равен 0  (если первый операнд  равен 0, то второй операнд  не 

вычисляется).</p><div  class="lecture_mark" id="mark_489">Использование:</div>
 <pre>e1&amp;&amp;e2</pre>
 <p  id="id_500">Логическая операция И значений e1  и e2. Вначале проверяется значение e1 ; 

значение e2  проверяется только в том случае, если значение e1  - Истина. Значением выражения 

является Истина, если значения e1  и e2  - Истина.</p>
 <p  id="id_511">Пример:</p>
 <pre>if(p!=NULL&amp;&amp;*p&gt;7) n++;</pre>
 <p  id="id_513">Если p  - ненулевой указатель и значение переменной, на которую указывает p, 

больше, чем 7, то в этом случае n  увеличивается на 1. Обратите внимание, что если значение 

указателя p  равно NULL ( 0 ), то выражение *p  не имеет смысла.</p>
 <a name="12"></a><p align=center class=db>Операция, уровень приоритета которой равен 12<p  

id="id_523">Уровень приоритета операции равен 12, выполняются такие операции слева направо.</p>
 <center><h4>Операция логическое ИЛИ: ||</h4></center><p  id="id_524">Тип операндов  - 

арифметический или указатель. Тип результата int. Если хотя бы один операнд  не равен 0, 

результат равен 1 ; иначе результат будет равен 0.</p>
 <p  id="id_529">Использование:</p>
 <pre>e1 || e2</pre>
 <p  id="id_531">Логическая операция ИЛИ значений e1  и e2. Вначале проверяется значение e1 ; 

значение e2  проверяется только в том случае, если значение e1  - ложь. Значением выражения 

является Истина, если истинно любое значение e1  или e2.</p>
 <p  id="id_539">Пример 1:</p>
 <pre>if(x&lt;A || x&gt;B) printf("out of range");</pre>
<a name="13"></a> <p align=center class=db>Операция, уровень приоритета которой равен 13<p  

id="id_541">Уровень приоритета операции равен 13, выполняются такие операции слева направо.</p>
 <center><h4>Операция условный оператор: ?</h4></center><p  id="id_542">Тип операндов  - 

арифметические; второй и третий операнды  могут быть указателями, структурами, объединениями. 

Тип результата: int, long, unsigned, double, указатель, структура или объединение. Второй и 

третий операнды  преобразуются к одному и тому же типу.</p>
 <p  id="id_547">Условный оператор является единственным оператором, для которого необходимы 

три операнда ; используется он следующим образом:</p>
 <pre>a ? b : c</pre>
 <p  id="id_549">где a, b, c  - выражения. Если a  не равно 0, то результат выражения a ? b : c 

 равен b ; иначе результат равен c. Из двух последних операндов  вычисляется только один.</p>
 <p  id="id_558">Использование:</p>
 <pre>ae?e1:e2</pre>
 <p  id="id_560">или</p>
 <pre>pe?e1:e2 (где pe - указатель)</pre>
 <p  id="id_562">Если истинно ae  или pe, то выполняется e1 ; иначе выполняется e2. Значением 

этого выражения является значение выражения e1  или e2.</p>
 <p  id="id_569">Пример:</p>
 <pre>abs=(i&lt;=0)?-i:i;</pre>
  <a name="14"></a><p align=center class=db>Операция, уровень приоритета которой равен 14<p  

id="id_571">Уровень приоритета операции равен 14, выполняются такие операции справа налево.</p>
  <center><h4>Операция простое присваивание "="</h4></center><p  id="id_572">Тип операндов: 

арифметические, указатели, объединения или структуры. Тип результата: если оба операнда имеют 

арифметический тип, то значение правого операнда  преобразуется к типу левого операнда.</p>
  <p  id="id_573">Использование:</p>
 <pre>v=e</pre>
  <p  id="id_575">Присваивание значения e  переменной v.</p>
  <p  id="id_578">Пример:</p>
 <pre>x=y;</pre>
<center><h4>Операция сложное присваивание "="</h4></center><p  id="id_580">Обозначим 

&lt;знак&gt; один из знаков : +, -, *, /, %, &gt;&gt;, &lt;&lt;, &amp;, ^, |.</p>
<p  id="id_591">В результате выполнения операции присваивания</p>
<pre>v=e</pre>
<p  id="id_593">где v  - переменная, а e  - выражение, значение выражения становится новым 

значением переменной v.</p>
<center><h4>Операция присваивания</h4></center>
<pre>v &lt;знак&gt;= e</pre>
<p  id="id_598">приблизительно эквивалентна оператору присваивания</p>
<pre>v = v&lt;знак&gt; e</pre>
<p  id="id_600">Пример 1:</p>
<pre>y+=2; /* Увеличение переменной y на 2 */
p+=n;
x-=3;
ptr-=2;
timesx*=x;
x/=2;
x%=10;
x&gt;&gt;=4;
x&lt;&lt;=1;
remitems&amp;=mask;
control^=seton;
additems |=mask;</pre>
<p  id="id_602">Типы операндов  и результата сложного оператора присваивания можно определить 

на основании этой эквивалентности. Однако приведенный эквивалент для сложного оператора 

присваивания не совсем точен. В выражении</p>
<pre>v &lt;знак&gt;= e</pre>
<p  id="id_604">операнд  v вычисляется только один раз, в то время как в выражении</p>
<pre>v = v &lt;знак&gt; e</pre>
<p  id="id_606">этот операнд  вычисляется дважды. Это различие проявляется в побочных эффектах, 

связанных с вычислением операнда  v, например, при изменении значения какой-либо переменной. 

Рассмотрим это на примерах:</p>
<pre>a[i++]* = n;</pre>
<p  id="id_609">При выполнении вычисление левого операнда  дает побочный эффект - увеличение 

значения переменной i. Следовательно, это присваивание не эквивалентно присваиванию</p>
<pre>a[i++] = a[i++]*n;.</pre>
<p  id="id_612">Эквивалентом первой операции присваивания  может служить последовательность 

операций</p>
<pre>a[i]=a[i]*n;
i=i+1;</pre>
<p  id="id_614">а эквивалентом второй - последовательность операций</p>
<pre>a[i]=a[i+1]*n;
i=i+2;</pre>
<p  id="id_616">или последовательность операций</p>
<pre>a[i+1]=a[i]*n;
i=i+2;</pre>
<p  id="id_618">в зависимости от того, какая часть операции присваивания  вычисляется раньше - 

левая или правая. <b>Порядок таких вычислений не определен</b>.</p>
<a name="15"></a><p align=center class=db>Операция, уровень приоритета которой равен 15<p  

id="id_619">Уровень приоритета операции равен 15, выполняются такие операции слева направо.</p>
<center><h4>Операция запятая: ,</h4></center><p  id="id_620">Тип результата совпадает с типом 

правого операнда. Операция объединяет два выражения в одно выражение, значением которого 

является значение правого операнда;  значение левого операнда  вычисляется только для получения 

побочных эффектов.</p>
<p  id="id_621">Использование:</p>
<pre>el,e2</pre>
<p  id="id_623">Сначала выполняется выражение e1, потом выражение е2. Значением всего выражения 

является значение выражения е2.</p>
<p  id="id_627">Пример:</p>
<pre>for(i=A,j=B;i&lt;j;i++,j--) 
	/* организация циклического повторения. 
		 Оператор со счетчиком */
p[i]=p[j];</pre>


<p  id="id_629">Примеры простых задач</p>
<pre>
	/* Задача № 1 (пример на использование операции *) 
	Определить площадь боковой поверхности конуса радиуса 
	r и имеющего длину образующей l.*/
	#include &lt;stdio.h&gt;
	#include &lt;math.h&gt;
	/* подключение библиотеки математических функций */
	const float pi=3.14159;
	float r=10; float l=50; float s;
	main()
	{
		s=pi*r*l;
		printf("\n Площадь боковой поверхности s=%f",s);
	}

	/* Задача № 2 (пример на использование операций +,
	 * и /. Тело движется прямолинейно с ускорением. 
	 Даны а(м/сек2) - ускорение, V(M/C) - начальная 
	 скорость. Требуется определить, какой путь пройдет 
	 тело за t секунд.*/
	#include &lt;stdio.h&gt;
	float а, v, t, s ;
	main()
	{
		a=20.2;
		v=50.3;
		t=65;
		s=(v*t)+(a*t*t/2);
		printf("\n Путь s=%f M",s);
	}

	/* Задача № 3 (пример на использование операций =, 
	/ и вычисления степени). Вычислите среднее арифметическое 
	и среднее геометрическое трех чисел а,b,с.*/ 
	#include &lt;stdio.h&gt; 
	#include &lt;math.h&gt; 
	float a=b=c=2005.1; float x,у;
	main ()
	{
		x=(a+b+c)/3;
		y=pow( (a*b*c),(1/3)); 
		/*функция pow берется из библиотеки math.h*/
		printf("\n среднее арифметическое x=%f",x);
		printf("\n среднее геометрическое y=%f",y);
	}

	/* Задача № 4 (пример на использование операций 
	=,*, / и функции hypot. Даны катеты прямоугольного 
	треугольника. Найти его гипотенузу и площадь.*/ 
	#include &lt;stdio.h&gt;
	#include &lt;math.h&gt; 
	float x=y=50.7; float z,s; 
	main() 
	{
		z=hypot(х, у) ;/* вычисление гипотенузы*/ 
		s=x*y/2;
		printf("\n гипотенуза=%f см",z); 
		printf("\n Плoщaдь=%f кв см",s);
	}
</pre>





<a name="16"></a><p align=center class=dbi><br>Приоритеты и порядок вычислений операторов</p>
<ul>
<li>Операторы, перечисленные на одной строке, имеют одинаковый приоритет. 
<li>Операции с высшими приоритетами вычисляются первыми. Наивысшим приоритетом является 

приоритет равный 1. 
<li>Унарные операторы +, -, * имеют более высокий приоритет, чем те же операторы в 
бинарном варианте.
</ul>
<center>  
<table border="1" width="70%">
    <tr>
        <th>Прио-<br>ритет</th>
        <th>Знак операции</th>
        <th>Типы операции </th>
        <th>Порядок выполнения</th>
    </tr>
    <tr>
        <td align="center">2</td>
        <td align="center">() [] . -&gt;</td>
        <td align="center">Выражение</td>
        <td align="center">Слева направо</td>
    </tr>
    <tr>
        <td align="center">1</td>
        <td align="center">- ~ ! * &amp; ++ -- sizeof
        приведение типов </td>
        <td align="center">Унарные</td>
        <td align="center">Справа налево</td>
    </tr>
    <tr>
        <td align="center">3</td>
        <td align="center">* / %</td>
        <td align="center">Мультипликативные</td>
        <td align="center" rowspan="11">Слева направо</td>
    </tr>
    <tr>
        <td align="center">4</td>
        <td align="center">+ -</td>
        <td align="center">Аддитивные</td>
    </tr>
    <tr>
        <td align="center">5</td>
        <td align="center">&lt;&lt; &gt;&gt;</td>
        <td align="center">Сдвиг</td>
    </tr>
    <tr>
        <td align="center">6</td>
        <td align="center">&lt; &gt; &lt;= &gt;=</td>
        <td align="center">Отношение</td>
    </tr>
    <tr>
        <td align="center">7</td>
        <td align="center">== !=</td>
        <td align="center">Отношение
        (равенство)</td>
    </tr>
    <tr>
        <td align="center">8</td>
        <td align="center">&amp;</td>
        <td align="center">Поразрядное И</td>
    </tr>
    <tr>
        <td align="center">9</td>
        <td align="center">^</td>
        <td align="center">Поразрядное
        исключающее ИЛИ</td>
    </tr>
    <tr>
        <td align="center">10</td>
        <td align="center">|</td>
        <td align="center">Поразрядное ИЛИ</td>
    </tr>
    <tr>
        <td align="center">11</td>
        <td align="center">&amp;&amp;</td>
        <td align="center">Логическое И</td>
    </tr>
    <tr>
        <td align="center">12</td>
        <td align="center">||</td>
        <td align="center">Логическое ИЛИ</td>
    </tr>
    <tr>
        <td align="center">13</td>
        <td align="center">? :</td>
        <td align="center">Условная</td>
    </tr>
    <tr>
        <td align="center">14</td>
        <td align="center">= *= /= %= += -= &amp;= |= &gt;&gt;=
        &lt;&lt;= ^=</td>
        <td align="center">Простое и составное
        присваивание</td>
        <td align="center">Справа налево</td>
    </tr>
    <tr>
        <td align="center">15</td>
        <td align="center">,</td>
        <td align="center">Последовательное
        вычисление</td>
        <td align="center">Слева направо</td>
    </tr>
</table>
</center>  

<p>



<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp </a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=a>&nbsp 8 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>