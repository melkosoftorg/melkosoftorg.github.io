<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 13</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Локальные переменные</p>
Если программа содержит другие функции, кроме функции main(), необходимо решить, 
где и как надо определять переменные. 
<p>Любые имена программы на языке Си могут быть объявлены либо вне всех функций и блоков 
(то есть,  на уровне файла),  либо внутри функции или блока.
 В связи с этим различают файловую или <b>глобальную</b>  область  видимости  (действия) имен
 и <b>локальную</b> область видимости (область видимости блока или функции).
<p><b><i>Локальные переменные</i></b> - переменные, известные только одной функции, именно той, 
которая их содержит.
<p>Даже в том случае, если использовано одно и то же имя для переменных в двух различных 
функциях, компилятор (а значит и компьютер) считает их разными переменными.
<p>Имена, объявленные в блоке, видны и могут быть использованы только в этом блоке,
 причем,  в случае конфликта имен (одинаковых имен),  локальное объявление данных создает совершенно новую
 переменную и перекрывает глобальное объявление. После выхода из блока становится доступным старое имя
 с объявлением более высокого уровня.  


<p>В приведенном ниже примере определены и инициализированы три переменные с именем i:
<ol>
<li>int i = 1; - в теле функции PrintI();
<li>int i = 10; - в теле функции main();
<li>int i = 100; - в ограниченном фигурными скобками блоке тела функции main().
</ol>
<p>Имена, объявленные в блоке, видны и могут быть использованы только в этом блоке. После выхода из блока становится доступным старое имя с объявлением более высокого уровня.
<pre>
	#include&lt;stdio.h>
	#include&lt;conio.h>
	void PrintI(void)
	{
		int i = 1;
		printf("PrintI: i = %d\n", i);
	}
	void main(void)
	{
		clrscr();
		int i = 10;
		printf("1 - main: i = %d\n", i);
		PrintI();
		{
			int i = 100;
			printf("2 - main: i = %d\n", i);
			PrintI();
		}
		printf("3 - main: i = %d\n", i);
		PrintI();
		getch();
	}
	<b><i>Результаты:</i></b>
			1 - main: i = 10
			PrintI: i = 1
			2 - main: i = 100
			PrintI: i = 1
			3 - main: i = 10
			PrintI: i = 1
</pre>
<p>Это произошло потому, что локальные определения имени i перекрывают объявления более высокого уровня,
  создают и инициализируют новые  локальные  переменные  с именем i. 
 После выхода из очередного блока его локальные переменные уничтожаются и открывается доступ к соответствующей
 переменной охватывающего блока. 
<p>Функция PrintI() всегда имеет дело с переменной i, описанной на файловом (глобальном) уровне,
  потому, что локальной переменной i в функции PrintI() нет. 
<br><i> Все три переменные, описанные в примере, соответствуют разным ячейкам памяти, несмотря на одинаковые имена.</i>



<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>