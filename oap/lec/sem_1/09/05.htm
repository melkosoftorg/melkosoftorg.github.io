<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 09</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<!--tr><td class=rule>
Внимание!
<ol>В окнах такого цвета будут отображаться правила и примечания относительно 
лекционного материала
</ol></td></tr-->
<tr>
<td class=usual>
<p align=center class=dbi><br>Функции-элементы get и getline</p>
<b><i>Функция-элемент get без аргументов</i></b> вводит одиночный символ из указанного потока и 
возвращает этот символ в качестве значения вызова функции. Этот вариант функции get 
возвращает EOF, когда в потоке встречается признак конца файла.
<p>Фрагмент программы демонстрирует использование функций-элементов eof и get для ввода из 
входного потока cin и использование функции-элемента put для вывода в выходной поток 
cout.
<pre>
	int c;
	cout << "До ввода cin.eof() равно " << cin.eof() 
		<< "\nПредложение завершается Ctrl-Z";
	while ( (c = cin.get() ) != EOF)
		cout.put(c);
	cout << "\nEOF в этой системе равно " << c;
	cout << "\nПосле ввода cin.eof() равно " << 
	cin.eof();

		До ввода cin.eof() равно 0
		Предложение завершается Ctrl-Z
		Вводим предложение ^Z
		Вводим предложение
		EOF в этой системе равно -1
		После ввода cin.eof() равно 1
</pre>
<p>Другой вариант <b><i>функции-элемента get с символьным аргументом</i></b> вводит очередной 
символ из входного потока и сохраняет его в символьном аргументе. <br>Этот вариант 
функции get возвращает ложь, когда встречается признак конца файла; в остальных 
случаях этот вариант функции get возвращает ссылку на тот объект класса istream, для 
которого вызывалась функция-элемент get.
<p>Третий вариант <b><i>функции-элемента get принимает три параметра</i></b>: 
<ul>
<li>символьный массив, 
<li>максимальное число символов, 
<li>ограничитель (по умолчанию значение '\n'). 
</ul>
Этот вариант читает символы из входного потока до тех пор, пока не достигнуто число символов на 1 
меньше указанного максимального числа, или пока не считывается ограничитель. 
Затем для завершения введенной строки в символьный массив, используемый в качестве буфера 
программы, помещается нулевой символ. <br>Ограничитель в символьный массив не 
помещается, а остается во входном потоке, он будет следующим считываемым символом. 
<br>Таким образом, результатом второго подряд использования функции get явится 
пустая строка, если только ограничитель не удалить из входного потока.
<p><b><i>Функция-элемент getline</i></b> действует подобно третьему варианту функции-элемента 
get и помещает нулевой символ после строки в символьном массиве. <br>Но в отличие от get 
функция getline удаляет символ ограничитель из потока (читает этот символ и 
отбрасывает его); этот символ не сохраняется в символьном массиве. 
<p>Программа иллюстрирует работу функций.
<pre>
  #include&lt;iostream.h&gt;
  #include&lt;conio.h&gt;
  #include&lt;string.h&gt;
  const int SS = 80;
  void main()
  {
    char buf1[SS], buf2[SS], buf3[SS];
    cout << "Введите предложение, имеющее внутри символ i \n"; 
    cin >> buf1;
    cout << "\n1. buf1 - из cin прочитана строка до пробела " << buf1 << " - " 
	<< strlen(buf1) << " байт" << endl;
    cin.get(buf2, SS, 'i');	// get с ограничителем-i
    cout << "2. buf2 - cin.get() с ограничителем i выводит" << buf2 << " - " 
	<< strlen(buf2) << " байт" << endl;
    cin.getline(buf3, SS, ' ');	// строка до пробела
    cout << "3. buf3 - cin.getline() с ограничителем прочитана строка "	
	<< buf3 << " - " << strlen(buf3) << " байт" << endl;
    cin.getline(buf3, SS);
    cout << "4. buf3 - cin.getline()прочитана строка " << buf3 << " - " 
	<< strlen(buf3) << " байт" << endl << endl;
    cout << "Первые 5 байт из" << buf1 << endl;
    cout.write(buf1, 5); // выводит первые 5 байт из buf1
    getch();
  }       
	Введите предложение, имеющее внутри символ i
	Borland International - Borland C++
	1. buf1 - из cin прочитана строка до пробела Borland - 7 байт
	2. buf2 - cin.get() с ограничителем i выводит  Internat - 9 байт
	3. buf3 - cin.getline() с ограничителем прочитана строка ional - 5 байт
	4. buf3 - cin.getline() прочитана строка - Borland C++ - 13 байт
	Первые 5 байт из Borland
	Borla   
</pre>
<p><b><i>Функция-элемент ignore</i></b> 
пропускает заданное число символов (по умолчанию один 
символ) или завершает свою работу при обнаружении заданного ограничителя (по 
умолчанию символом ограничителем является EOF, который заставляет функцию ignore 
пропускать до конца файла при чтении из файла).
<p><b><i>Функция-элемент putback</i></b> возвращает обратно в этот поток предыдущий символ, 
полученный из входного потока с помощью функции get. <br>Функция полезна для 
приложений, которые просматривают входной поток с целью поиска записи, 
начинающейся с заданного символа. Когда этот символ введен, приложение возвращает 
его в поток, так что он может быть включен в те данные, которые будут вводиться.
<p><b><i>Функция-элемент peek</i></b> возвращает очередной символ из входного потока, но не удаляет 
его из потока.
<p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>