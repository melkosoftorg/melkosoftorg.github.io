<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОАП | Лекция № 14</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>

<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="09.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 10 &nbsp</a></td>
<td>&nbsp&nbsp<a href="#end" class=p>Конец страницы</a>&nbsp&nbsp</td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<!--tr><td class=rule>
Внимание!
<ol>В окнах такого цвета будут отображаться правила и примечания относительно 
лекционного материала
</ol></td></tr-->
<tr>
<td class=usual>
<p align=center class=dbi><br>Обращение к функции - вызов функции</p>
Выполнение программы всегда начинается с функции main(). Когда при выполнении программы встречается имя функции, 
происходит <b>обращение</b> к этой функции (она <b>вызывается</b>), то есть управление программой передается функции.
 После того как функция выполнила свою работу, управление возвращается в то место, откуда функция
 была вызвана — в вызывающее окружение (calling environment). 
<p>Вызов функции имеет вид:	
<pre>		имя_функции (список_фактических параметров);
</pre>
<p>Например, описание (прототип) функции:
<pre>
		int func(int x, int y, int z);
</pre>
<p>Определение функции:
<pre>
		int func(int x, int y, int z)
		{
			int v;
			v = x * y * z;
			return v;
		}
</pre>
<p>Вызов функции поместим в теле функции main():
<pre>
		void main()
		{
			int a = 3, b = 7, c = 2, z;
			z = func(a, b, c);
			...
			z = func(1, 9, 12);
		}
</pre>

<p>На рис. в качестве примера показана программа, которая выводит на дисплей вопрос и ответ на него.
 Цифры указывают порядок выполнения инструкций. 
<p><IMG src="14_02.PNG">
<p>Инструкция <b>answer();</b> в main() вызывает функцию <i>answer()</i> так, как если бы она содержалась в библиотеке Си,
 с той разницей, что текст функции answer() находится не в библиотеке, а включен в программный код.
Функции answer() не передаются никакие параметры, так как она содержит всю информацию, необходимую для выполнения своей задачи.
 После выполнения функции puts() в answer() инструкция <i>return(0);</i> передает управление инструкции, помещенной в теле main() 
непосредственно за инструкцией вызова функции answer(). Инструкция<i> return(0);</i> в main() завершает выполнение программы. 
<p><b><i>Функцию можно вызвать из любого места программы, в том числе, из другой функции. </i></b>
<p>В следующем листинге приведен текст программы с двумя НЕбиблиотечными функциями. Первая из них называется 
<b>question()</b> и вызывается из main(). Вторая значится под именем <b>answer()</b> и вызывается из функции question(). 
<pre>
//Программа, в которой осуществляется вызов двух функций. 

main()
{
	puts("Добро пожаловать в наш Опросник.\n");
	question();
	puts("Благодарим за участие.\n");
	return(0);
}
question()
{
	int move_on;
	puts("Скажите название графического интерфейса фирмы Microsoft.\n");
	puts("Для получения правильного ответа нажмите Enter.\n");
	move_on = getchar();
	answer();
	return(0);
}
answer()
{
	puts("Правильный ответ - Windows.\n");
	return(0);
}
</pre>
Ниже приведен результат работы этой программы, причем для каждого сообщения указана функция, выводящая его на экран. 
<pre>
Добро пожаловать в наш Опросник.				main()
Скажите название графического интерфейса фирмы Microsoft.	question()
Для получения правильного ответа нажмите Enter.			question()
Правильный ответ - Windows.					answer()
Благодарим за участие.						main()
</pre>
Лучший способ использования функций — это разбивка программы на отдельные блоки.
 Функция main() выполняет при этом обязанности организатора, определяя начало программы и обеспечивая вызов других функций. 
<p>Это хорошо продемонстрировано в следующем листинге, являющемся вариантом программы Опросника.
 Здесь main() содержит только инструкции вызова функций. Настоящая «работа» программы обеспечивается в функциях, вызываемых main().
<pre>
//Программа, использующая main() для вызова других функций. 

main()
{
	welcome();
	question();
	answer();
	the_end();
	return(0);
}
welcome()
{
	puts("Добро пожаловать в наш Опросник.\n");
	return(0);
}
question()
{
	int move_on;
	puts("Скажите название графического интерфейса фирмы Microsoft.\n");
	puts("Для получения правильного ответа нажмите Enter.\n");
	move_on = getchar();
	return(0);
}
answer()
{

	puts("Правильный ответ - Windows.\n");
	return(0);
}
the_end()
{
	puts("Благодарим за участие.\n");
	return(0);
}
</pre> 
Подобная структура упрощает процесс поиска ошибок.


<p align=center class=dbi><br>Передача параметров</p>
<p>Параметры в определении функции называют формальными параметрами.
 <b><i>Формальньные параметры</i></b> — это то, вместо чего будут подставлены <b>фактические значения</b>,
 передаваемые функции в момент ее вызова. 
<p><b><i>Вызов функции имеет вид</i></b>:	
<pre>		имя_функции (список_фактических параметров);
</pre>
При обращении к функции <i>формальные параметры заменяются фактическими</i>, причем 
соблюдается строгое соответствие параметров по типам. Значением выражения "вызов функции" является возвращаемое функцией значение, тип которого соответствует типу функции. 
<p>Соответствие между формальными и фактическими параметрами устанавливается по их взаимному расположению в списках. 
<p>Фактические параметры передаются из вызывающей 
программы в функцию <b>по значению</b>.
Когда применяется вызов по значению, переменные передаются функции как аргументы, их значения копируются 
в соответствующие параметры функции, а сами переменные  изменяются в вызывающем окружении.
 В сущности, вызываемые по значению параметры являются локальными в своей процедуре. Им могут 
передаваться выражения, значения которых присваиваются этим локальным переменным (параметрам).
<p>Таким образом, список_фактических параметров 
<ul>
<li>либо пусто, 
<li>либо void, 
<li>либо разделенные запятыми фактические параметры.
</ul>
<p><i>Как передать параметр нашей собственной функции?</i> Посмотрите на следующую программу: 
<pre>
void main()
{
	int count;
	count = 5;
	doubles(count);
}

void doubles(int num)
{
	printf("%d", num * 2);
}
</pre>
<p>Инструкция <b>doubles(count); </b> в функции main() вызывает функцию и передает ей значение переменной count.  
Функция <b>doubles()</b> получает аргумент в качестве значения переменной num.
 Переменная num, таким образом, имеет то же значение, что и переменная count. 
<p>Вот что происходит при работе функции doubles() в приведенной выше программе:
<ol>
<li>Осуществляется вызов функции doubles(), которой передается значение переменной count. 
<li>Аргумент функции doubles() с именем num получает значение 5. 
<li>Функция удваивает полученное значение и отображает конечный результат с помощью функции printf().
</ol>



</td>
</tr>

</table>

<!-- -------End of Inside table------- -->

<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="09.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 10 &nbsp</a></td>
<td>&nbsp&nbsp<a href="#start" class=p>Начало страницы</a>&nbsp&nbsp
&nbsp&nbsp&nbsp&nbsp

</td>
</tr>
</table>
<a name=#end></a>
</body>
</html>