<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | СР 01</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>

<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->

<table width=98% border=0 cellpadding=0 cellspacing=0>

<tr>
<td class=usual>

<p align=center class=dbi><br>Этап 6. &nbsp Отладка и испытание программы</p>
<p>Обнаружение ошибок, допущенных при вводе программы и данных с клавиатуры, 
их локализацию и устранение выполняют на этапе отладки и испытания 
(тестирования) программы. По данным разных авторов, этап отладки и 
тестирования программы занимает от 50 до 70 % времени, затрачиваемого на 
все этапы создания программы и получения решения с помощью ЭВМ.
<p><i>Отладка программы - это процесс поиска и устранения ошибок в программе, производимый по результатам её прогона на компьютере.</i>
<p>Отладка осуществляется с помощью тестов, то есть программа выполняется 
с некоторым заранее продуманным набором исходных данных, для которого известен результат.
<br>Чем сложнее программа, тем большее число тестов требуется для ее 
проверки. Очень "хитрую" программу трудно протестировать исчерпывающим 
образом. Всегда есть шанс, что какой-то "подводный камень" остался незамеченным.
<p><i>Тестирование (англ. test - испытание) - это испытание, проверка правильности работы программы в целом, либо её составных частей.</i>
<p>Отладка и тестирование — это два четко различимых и непохожих друг на друга этапа: 
<ul>
<li>при отладке происходит локализация и устранение синтаксических ошибок и явных ошибок кодирования; 
<li>в процессе же тестирования проверяется работоспособность программы, не содержащей явных ошибок. 
</ul>
<p>Тестирование устанавливает факт наличия ошибок, а отладка выясняет ее причину.
<p><table align=center width=90% border=1 cellpadding=5 cellspacing=10>
<tr><td class=rule>
<b>Примечание:</b> Английский термин debugging ("отладка") буквально означает "вылавливание жучков".
<br>Термин появился в 1945 году, когда один из первых компьютеров — "Марк-1" прекратил работу из-за того, что в его электрические цепи попал мотылек и заблокировал своими останками одно из тысяч реле машины.
</td></tr>
</table>
<p><b><i>Ошибки могут быть "языковые", могут быть алгоритмические.</i></b> 
<ol>
<li>Первый тип ошибок, как правило, помогает обнаружить компилятор с 
языка программирования. Это ошибки, связанные с нарушением правил языка 
программирования. Их еще называют <i><b>ошибками времени компиляции</b></i>, 
ибо обнаруживаются они именно во время компиляции. Сам компилятор в той 
или иной форме выдает пользователю сообщение о характере ошибки и ее 
месте в тексте программы. Исправив очередную ошибку, пользователь 
повторяет компиляцию. И так продолжается до тех пор, пока не будут 
ликвидированы все ошибки этого уровня.

<li>Алгоритмические ошибки приводят к различным последствиям.<br> 
<ul>
<li type="disc">Во-первых, могут возникнуть невыполнимые действия. <br>Например: деление на 
нуль, корень квадратный из отрицательного числа, выход индекса за границы 
строки и тому подобное. <br>Это <i><b>ошибки времени исполнения</b></i>. Они приводят 
к прерыванию выполнения программы. <br>Как правило, имеются системные программные 
средства, помогающие в поиске таких ошибок.<br>

<li type="disc">Другая ситуация, когда алгоритмические ошибки не приводят к прерыванию 
выполнения программы. Программа выполняется до конца, получаются какие-то 
результаты, но они не являются верными. 
</ul></ol>
<p>В современных программных системах отладка осуществляется часто с использованием специальных программных средств, называемых отладчиками. Эти средства позволяют исследовать внутреннее поведение программы. 
<p><i>Программа-отладчик обычно обеспечивает следующие возможности:</i>
<ul>
<li>пошаговое исполнение программы с остановкой после каждой команды (оператора); 
<li>просмотр текущего значения любой переменной или нахождение значения любого выражения, в том числе, с использованием стандартных функций; при необходимости можно установить новое значение переменной; 
<li>установку в программе "контрольных точек", то есть точек, в которых программа временно прекращает свое выполнение, так что можно оценить промежуточные результаты, и другое. 
</ul>
<p><i>При отладке программ важно помнить следующее:</i>
<ul>
<li>в начале процесса отладки надо использовать простые тестовые данные; 
<li>возникающие затруднения следует четко разделять и устранять строго поочередно; 
<li>не нужно считать причиной ошибок машину, так как современные машины и трансляторы обладают чрезвычайно высокой надежностью. 
</ul>
<p>Для окончательной отладки алгоритма и анализа его правильности производится тестирование.
<p><i><b>Тест</b></i> - это такой вариант решения задачи, для которого заранее 
известны результаты. 
<p>Например, контрольный пример для вычисления периметра, площади и высот треугольника со сторонами
a = 3, b = 4, c = 5 предполагает следующие значения искомых величин:
P = 12, S = 6, h<sub>a</sub> = 4, h<sub>b</sub> = 3, h<sub>с</sub> =2.4. 
<p>Как правило, один тестовый вариант не доказывает правильность программы. 
Программист должен продумать систему тестов, построить план тестирования 
для исчерпывающего испытания всей программы.
<p>Тестовые данные должны обеспечить проверку всех возможных условий возникновения ошибок: 
<ul>
<li>должна быть испытана каждая ветвь алгоритма; 
<li>очередной тестовый прогон должен контролировать нечто такое, что еще не было проверено на предыдущих прогонах; 
<li>первый тест должен быть максимально прост, чтобы проверить, работает ли программа вообще; 
<li>арифметические операции в тестах должны предельно упрощаться для уменьшения объема вычислений; 
<li>количества элементов последовательностей, точность для итерационных вычислений, количество проходов цикла в тестовых примерах должны задаваться из соображений сокращения объема вычислений; 
<li>минимизация вычислений не должна снижать надежности контроля; 
<li>тестирование должно быть целенаправленным и систематизированным, так как случайный выбор исходных данных привел бы к трудностям в определении ручным способом ожидаемых результатов; кроме того, при случайном выборе тестовых данных могут оказаться непроверенными многие ситуации; 
<li>усложнение тестовых данных должно происходить постепенно. 
</ul>
<p>Пример. Система тестов для задачи нахождения корней квадратного уравнения&nbsp;&nbsp; <b>a&nbsp;&#8729;&nbsp;x<sup>2</sup>&nbsp;+&nbsp;b&#8729;x&nbsp;+&nbsp;c&nbsp;=&nbsp;0</b>
<p><table align=center width="90%" border=1>
<tr valign=top align=center><td rowspan=2 width="7%">№<br>теста</td><td rowspan=2 width="25%">Проверяемый<br>случай</td><td colspan=3 width="24%">Коэффициенты</td><td rowspan=2>Результаты
</td></tr>
<tr valign=top align=center><td width="8%">a</td><td width="8%">b</td><td width="8%">c	
</td></tr>
<tr valign=top><td align=center>1</td><td>d > 0</td><td align=center>1</td><td align=center>1</td><td align=center>-2</td><td>x<sub>1</sub> = 1, x<sub>2</sub> =  -2
</td></tr>
<tr valign=top><td align=center>2</td><td>d = 0</td><td align=center>1</td><td align=center>2</td><td align=center>1</td><td>x<sub>1</sub> = -1, x<sub>2</sub> =  -1
</td></tr>
<tr valign=top><td align=center>3</td><td>d < 0</td><td align=center>2</td><td align=center>1</td><td align=center>2</td><td>Действительных корней нет, корни комплексные
</td></tr>
<tr valign=top><td align=center>4</td><td>a = 0,   b = 0,   c = 0</td><td align=center>0</td><td align=center>0</td><td align=center>0</td><td>х — любое число
</td></tr>
<tr valign=top><td align=center>5</td><td>a = 0,   b = 0,   c &#8800; 0</td><td align=center>0</td><td align=center>0</td><td align=center>2</td><td>Неправильное уравнение
</td></tr>
<tr valign=top><td align=center>6</td><td>a = 0,   b &#8800; 0</td><td align=center>0</td><td align=center>2</td><td align=center>1</td><td>Линейное уравнение. Один корень: x = -0,5
</td></tr>
<tr valign=top><td align=center>7</td><td>a &#8800; 0,   b &#8800; 0,   с = 0</td><td align=center>2</td><td align=center>1</td><td align=center>0</td><td>x<sub>1</sub> = 0, x<sub>2</sub> = -0,5
</td></tr>
</table></p>
<p>Процесс тестирования можно разделить на три этапа. 
<ol>
<i><li>Проверка в нормальных условиях.</i> Предполагает тестирование на основе данных, которые характерны для реальных условий функционирования программы. 
<p><i><li>Проверка в экстремальных условиях.</i> Тестовые данные включают граничные  значения области изменения входных переменных, которые должны восприниматься программой как правильные данные. Типичными примерами таких значений являются очень маленькие или очень большие числа и отсутствие данных. Еще один тип экстремальных условий — это граничные объемы данных, когда массивы состоят из слишком малого или слишком большого числа элементов. 
<p><i><li>Проверка в исключительных ситуациях.</i> Проводится с использованием данных, значения которых лежат за пределами допустимой области изменений. Известно, что все программы разрабатываются в расчете на обработку какого-то ограниченного набора данных. Поэтому важно получить ответ на следующие вопросы: 
<ul type=disc>
<li>что произойдет, если программе, не расчитанной на обработку отрицательных и нулевых значений переменных, в результате какой-либо ошибки придется иметь дело как раз с такими данными? 
<li>как будет вести себя программа, работающая с массивами, если количество их элементов певысит величину, указанную в объявлении массива? 
<li>что произойдет, если числа будут слишком малыми или слишком большими?
</ul>
</ol>
<p>Наихудшая ситуация складывается тогда, когда программа воспринимает неверные данные как правильные и выдает неверный, но правдоподобный результат. 
<br>Программа должна сама отвергать любые данные, которые она не в состоянии обрaбатывать правильно.
<p><b><i>Итак, тестиpование и отладка это:</i></b>
<ul type="disc">
<li>синтаксическая отладка; 
<li>отладка семантики и логической стpуктуpы; 
<li>тестовые pасчеты и анализ pезультатов тестиpования; 
<li>совершенствование пpогpаммы. 
<li>анализ результатов решения задачи и уточнение в случае необходимости математической модели с повторным выполнением всех этапов.
</ul>
</td>
</tr>
</table>

<!-- -------End of Inside table------- -->

<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>