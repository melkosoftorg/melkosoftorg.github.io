<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
  
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
  <title>ОП | Лекция № 1</title>

  
  
  <link rel="stylesheet" type="text/css" href="../../../css/lec.css">

</head><body>
<a name="#start"></a>
<table class="pages" align="center" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td>&nbsp;&nbsp;<a href="../../../plan_1.htm" class="p">Календарно-тематический
план</a>&nbsp;&nbsp;</td>
      <td><a href="index.htm" class="p">&nbsp; План лекции &nbsp;</a></td>
      <td><a href="01.htm" class="p">&nbsp; 1 &nbsp;</a></td>
      <td><a href="02.htm" class="p">&nbsp; 2 &nbsp;</a></td>
      <td><a href="03.htm" class="a">&nbsp; 3 &nbsp;</a></td>
      <td><a href="04.htm" class="p">&nbsp; 4 &nbsp;</a></td>
    </tr>
  </tbody>
</table>

<!-- -------Inside table------- -->
<table border="0" cellpadding="5" cellspacing="0" width="98%">

  <tbody>
    <tr>
      <td class="usual">
      <p class="dbi" align="center"><br>
Основные способы представления алгоритмов</p>
      <p>Для строгого задания различных структур данных и алгоритмов их
обработки требуется иметь такую систему формальных обозначений и
правил, чтобы смысл всякого используемого предписания трактовался точно
и однозначно. Соответствующие системы правил называют языками описаний.
      <br>
      <i>Алгоритмический язык</i> - средство описания алгоритмов,
ориентированное на исполнителя - человека.
      <br>
      <br>
      </p>
      <p class="wbi">Словесные (записи на естественном языке).</p>
      <p>Словесный способ записи алгоритмов представляет собой описание
последовательных этапов обработки данных и задается в произвольном
изложении на естественном языке. Например, <a href="01.htm#01" target="window-1">в алгоритме Евклида</a>. Способ основан на
использовании общепринятых средств общения между людьми и с точки
зрения написания трудности для авторов алгоритмов не представляет.
Однако для исполнителей такие описания алгоритмов часто не приемлемы.
Они строго не формализуемы, страдают многословностью записи, допускают
неоднозначность толкования отдельных предписаний. Поэтому такой способ
описания алгоритмов не имеет широкого распространения.<br>
      </p>
      <p class="wbi">Структурно-стилизованные (записи на
алгоритмическом языке псевдокода).</p>
      <p>Структурно-стилизованный способ записи алгоритмов основан на
формализованном представлении предписаний, задаваемых путем
использования ограниченного набора типовых синтаксических конструкций,
представленных в понятном для разработчика алгоритмов виде. Такие
средства описания алгоритмов часто называются псевдокодами.
      <br>
Псевдокод занимает промежуточное место между естественным и формальным
языками. С одной стороны, он близок к обычному естественному языку,
поэтому алгоритмы могут на нем записываться и читаться как обычный
текст. С другой строны, в псевдокоде используются некоторые формальные
конструкции и математическая символика, что приближает запись алгоритма
к общепринятой математической записи. <br>
В псевдокоде не приняты строгие синтаксические правила для записи
команд, присущие формальным языкам, что облегчает запись алгоритма на
стадии его проектирования и дает возможность использовать более широкий
набор команд, рассчитанный на абстрактного исполнителя. <br>
Однако в псевдокоде обычно имеются некоторые конструкции, присущие
формальным языкам, что облегчает переход от записи на псевдокоде к
записи алгоритма на формальном языке. В частности, в псевдокоде, так
же, как и в формальных языках, есть служебные слова, смысл которых
определен раз и навсегда. Они выделяются в печатном тексте жирным
шрифтом, а в рукописном тексте подчеркиваются. </p>
      <p><b><i>
      <center>Основные служебные слова</center>
      </i></b></p>
      <table align="center" cellpadding="1" width="70%">
        <tbody>
          <tr>
            <td width="32%"><b>алг</b> (алгоритм)</td>
            <td width="32%"><b>сим</b> (символьный)</td>
            <td width="12%"><b>дано</b></td>
            <td width="12%"><b>для</b></td>
            <td width="12%"><b>да</b>
            </td>
          </tr>
          <tr>
            <td><b>арг</b> (аргумент)</td>
            <td><b>лит</b> (литерный)</td>
            <td><b>надо</b></td>
            <td><b>от</b></td>
            <td><b>нет</b>
            </td>
          </tr>
          <tr>
            <td><b>рез</b> (результат)</td>
            <td><b>лог</b> (логический)</td>
            <td><b>если</b></td>
            <td><b>до</b></td>
            <td><b>при</b>
            </td>
          </tr>
          <tr>
            <td><b>нач</b> (начало)</td>
            <td><b>таб</b> (таблица)</td>
            <td><b>то</b> </td>
            <td><b>знач</b></td>
            <td><b>выбор</b>
            </td>
          </tr>
          <tr>
            <td><b>кон</b> (конец)</td>
            <td><b>нц</b> (начало цикла)</td>
            <td><b>иначе</b></td>
            <td><b>и</b></td>
            <td><b>ввод</b>
            </td>
          </tr>
          <tr>
            <td><b>цел</b> (целый)</td>
            <td><b>кц</b> (конец цикла)</td>
            <td><b>все</b></td>
            <td><b>или</b></td>
            <td><b>вывод</b>
            </td>
          </tr>
          <tr>
            <td><b>вещ</b> (вещественный)</td>
            <td><b>длин</b> (длина)</td>
            <td><b>пока</b></td>
            <td> <b>не</b></td>
            <td><b>утв</b>
            </td>
          </tr>
        </tbody>
      </table>
      <br>
Единого или формального определения псевдокода не существует, поэтому
возможны различные псевдокоды, отличающиеся набором служебных слов и
основных (базовых) конструкций.
      <p>Разновидностью структурно-стилизованного способа описания
алгоритмов является русский алгоритмический язык (РАЯ), содержащий
систему обозначений для единообразной и точной записи алгоритмов и
задания правил их использования. <br>
      </p>
      <p><b><i>
      <center>Общий вид алгоритма и пример разработки</center>
      </i></b></p>
      <table align="center" cellpadding="1" width="95%">
        <tbody>
          <tr valign="top">
            <td width="50%">
            <ol>
              <b>алг</b> название алгоритма (аргументы и результаты)
              <ul>
                <b>дано</b> | условия применимости алгоритма
                <br>
                <b>надо</b> | цель выполнения алгоритма
              </ul>
              <b>нач</b> описание промежуточных величин
              <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| последовательность команд (тело
алгоритма)
              <br>
              <b>кон</b>
            </ol>
            </td>
            <td>
            <ol>
              <b>алг</b> Сумма квадратов (<b>арг цел</b> n, <b>рез цел</b>
S)
              <ul>
                <b>дано</b> | n &gt; 0
                <br>
                <b>надо</b> | S = 1*1 + 2*2 + 3*3 + ... + n*n
              </ul>
              <b>нач цел</b> i
              <ul>
                <b>ввод</b> n; S := 0
                <br>
                <b>нц для</b> i <b>от</b> 1 <b>до</b> n
                <ul>
S := S + i*i
                </ul>
                <b>кц</b>
                <br>
                <b>вывод</b> "S = ", S
              </ul>
              <b>кон</b>
            </ol>
            </td>
          </tr>
        </tbody>
      </table>
      <p>В предложениях <b>дано</b> и <b>надо</b> после знака <b>|</b>
записаны комментарии. Комментарии можно помещать в конце любой строки.
Они не обрабатываются транслятором, но существенно облегчают понимание
алгоритма. </p>
      <p>В предложении <b>алг</b> после названия алгоритма в круглых
скобках указываются характеристики (<b>арг</b>, <b>рез</b>) и тип
значения (<b>цел</b>, <b>вещ</b>, <b>сим</b>, <b>лит</b>, <b>лог</b>)
всех входных (аргументы) и выходных (результаты) переменных.
      </p>
      <p>Часть алгоритма от слова <b>алг</b> до слова <b>нач</b>
называется <i>заголовком</i>.
      <br>
Часть алгоритма, заключенная между словами <b>нач</b> и <b>кон</b>
называется <i>телом алгоритма</i>. <br>
При описании массивов (таблиц) используется служебное слово <b>таб</b>,
дополненное граничными парами по каждому индексу элементов массива. </p>
      <ol>
        <p><b>алг</b> Объем и площадь цилиндра (<b>арг вещ</b> R, H, <b>рез
вещ</b> V, S) <br>
        <b>алг</b> Корни КвУр (<b>арг вещ</b> а, b, c, <b>рез вещ</b>
x1, x2, <b>рез лит</b> t) <br>
        <b>алг</b> Исключить элемент (<b>арг цел</b> N, <b>арг рез вещ
таб</b> А[1 : N]) </p>
      </ol>
      <p>Предложения <b>дано</b> и <b>надо</b> не обязательны. В них
рекомендуется записывать утверждения, описывающие состояние среды
исполнителя алгоритма.
      </p>
      <ol>
        <b>алг</b> Замена (<b>арг лит</b> Str1, Str2, <b>арг рез лит</b>
Text)
        <ul>
          <b>дано</b> | длины подстрок Str1 и Str2 совпадают
          <br>
          <b>надо</b> | всюду в строке Text подстрока Str1 заменена на
Str2
        </ul>
        <p><b>алг</b> Число максимумов (<b>арг цел</b> N, <b>арг вещ</b>
таб A[1 : N], <b>рез</b> цел K)
        </p>
        <ul>
          <b>дано</b> | N &gt; 0
          <br>
          <b>надо</b> | К - число максимальных элементов в таблице А
        </ul>
        <p><b>алг</b> Сопротивление (<b>арг вещ</b> R1, R2, <b>арг цел</b>
N, <b>рез вещ</b> R)
        </p>
        <ul>
          <b>дано</b> | N &gt; 5, R1 &gt; 0, R2 &gt; 0
          <br>
          <b>надо</b> | R - сопротивление схемы
        </ul>
      </ol>
      <p>Пример алгоритма правописания приставок на "з" и "с":<br>
      </p>
      <ol>
        <b>алг</b> написание приставок на "з" и "с"<br>
        <b>нач</b>
        <ol>
          <b>если</b> корень слова начинается со звонкой согласной
          <ol>
            <b>то</b> на конце приставки написать "з"<br>
            <b>иначе</b> на конце приставки написать "с"
          </ol>
          <b>все</b>
        </ol>
        <b>кон</b>
      </ol>
      <br>
      <a name="03"></a>
      <p class="wbi">Графические, методом блок-схем.</p>
      <p>Используется совокупность блочных символов (блоков),
соединяемых линиями передачи управления.
Наглядность и обозримость графических схем, целостность восприятия,
однозначность в отображении вычислительного процесса облегчает работу с
алгоритмом, проверку его правильности и внесение изменений.
      <br>
В схеме алгоритма каждому типу действий соответствует геометрическая
фигура, представленная в виде блоков, называемого символом действия.
Символы действия соединяются линиями переходов, определяющими
очередность выполнения действий.
      <br>
Форма символов установлена <b><a href="../../gost/19_003_80.htm">ГОСТ
19.003-80</a></b>, правила составления схем алгоритмов <b><a href="../../gost/19_002_80.htm">ГОСТ 19.002-80</a></b>.
      <br>
Размеры: a выбирается из ряда 10 мм, 15 мм, 20 мм. b = 1.5 a или b = 2
a.<br>
      </p>
      <p class="dbi">Наиболее часто употребляемые символы действий:</p>
      <br>
      <table align="center" cellpadding="5" width="90%">
        <tbody>
          <tr>
            <td><img src="roct.gif" alt="" ismap="ismap"></td>
            <td>Вычислительное действие или последовательность
вычислительных действий.</td>
          </tr>
          <tr>
            <td><img src="romb.gif" alt="" ismap="ismap"></td>
            <td>Проверка условий. Используется для обозначения
переходов управления по условию.</td>
          </tr>
          <tr>
            <td><img src="6side.gif" alt="" ismap="ismap"></td>
            <td>Начало цикла. Используется для организации циклических
конструкций. Внутри блока записывается параметр цикла, для которого
указывается его начальное значение, граничное условие и правило
изменения значения параметра для каждого повторения.</td>
          </tr>
          <tr>
            <td><img src="roct3.gif" alt="" ismap="ismap"></td>
            <td>Вычисления по подпрограмме, стандартной подпрограмме.</td>
          </tr>
          <tr>
            <td><img src="roctn.gif" alt="" ismap="ismap"></td>
            <td>Ввод - вывод используются для обозначения операций
ввода и вывода информации.</td>
          </tr>
          <tr>
            <td><img src="rroct.gif" alt="" ismap="ismap"></td>
            <td>Начало, конец, останов, вход и выход в подпрограммах.</td>
          </tr>
          <tr>
            <td><img src="punkt.gif" alt="" ismap="ismap"></td>
            <td>Пояснения, содержание подпрограмм, формулы. Позволяет
включать в схемы алгоритмов пояснения к функциональным блокам.</td>
          </tr>
          <tr>
            <td><img src="line.gif" alt="" ismap="ismap"></td>
            <td>Линия потока (сверху вниз и слева направо). При
передаче управления снизу вверх и справа налево направление следует
отметить стрелкой. Используются для обозначения порядка выполнения
действий. </td>
          </tr>
          <tr>
            <td><img src="ring.gif" alt="" ismap="ismap"></td>
            <td>Соединитель, разрыв линий потока. Используется, когда
схема алгоритма разбивается на автономные части, особенно если она не
умещается на одном листе.</td>
          </tr>
        </tbody>
      </table>
      <br>
      <p class="wbi">Программные (тексты на языках программирования).</p>
      <p>При записи алгоритма в словесной форме, в виде блок-схемы или
на псевдокоде допускается определенный произвол при изображении команд.
Вместе с тем такая запись точна настолько, что позволяет человеку
понять суть дела и исполнить алгоритм. <br>
Однако на практике в качестве исполнителей алгоритмов используются
специальные автоматы — компьютеры. Поэтому алгоритм, предназначенный
для исполнения на компьютере, должен быть записан на понятном ему
языке. И здесь на первый план выдвигается необходимость точной записи
команд, не оставляющей места для произвольного толкования их
исполнителем. <br>
Следовательно, язык для записи алгоритмов должен быть формализован.
Такой язык принято называть языком программирования, а запись алгоритма
на этом языке — программой для компьютера.
      </p>
      <p><i>Язык программирования</i> - средство описания алгоритмов,
ориентированное на исполнителя - ЭВМ.
      </p>
      <p>Для решения какой-либо задачи на ЭВМ необходимо алгоритм
решения представить в таком виде, чтобы данная ЭВМ могла его выполнить,
то есть записать последовательность команд, образующих программу.
      </p>
      <p><i>Программа</i> - последовательность указаний (команд) для
ввода исходных данных, их обработки и выдачи результатов для реализации
алгоритма задачи, записанная по правилам языка программирования.
      </p>
      <p>Алгоритмический язык программирования (как и любой другой
язык) образуют три его составляющие: </p>
      <ul type="disc">
        <li>алфавит - фиксированный для данного языка набор основных
символов, т.е. "букв алфавита", из которых должен состоять любой текст
на этом языке - никакие другие символы в тексте не допускаются,
        </li>
        <li>синтаксис - правила построения фраз, позволяющие
определить, правильно или неправильно написана та или иная фраза (набор
правил, устанавливающих, какие комбинации символов являются
осмысленными предложениями на этом языке),
        </li>
        <li>семантика - определяет смысловое значение предложений
языка. Являясь системой правил истолкования отдельных языковых
конструкций, семантика устанавливает, какие последовательности действий
описываются теми или иными фразами языка и, в конечном итоге, какой
алгоритм определен данным текстом на алгоритмическом языке.
        </li>
      </ul>
      <p>Понятие языка определяется во взаимодействии синтаксических и
семантических правил. Синтаксические правила показывают, как образуется
данное понятие из других понятий и букв алфавита, а семантические
правила определяют свойства данного понятия.
      </p>
      <p>&nbsp;</p>
      </td>
    </tr>
  </tbody>
</table>

<!-- -------End of Inside table------- -->
<table class="pages" align="center" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td>&nbsp;&nbsp;<a href="../../../plan_1.htm" class="p">Календарно-тематический
план</a>&nbsp;&nbsp;</td>
      <td><a href="index.htm" class="p">&nbsp; План лекции &nbsp;</a></td>
      <td><a href="01.htm" class="p">&nbsp; 1 &nbsp;</a></td>
      <td><a href="02.htm" class="p">&nbsp; 2 &nbsp;</a></td>
      <td><a href="03.htm" class="a">&nbsp; 3 &nbsp;</a></td>
      <td><a href="04.htm" class="p">&nbsp; 4 &nbsp;</a></td>
    </tr>
  </tbody>
</table>

<a name="#end"></a>
</body></html>