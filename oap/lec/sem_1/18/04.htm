<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
  
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
  <title>ОП | Лекция № 1</title>

  
  
  <link rel="stylesheet" type="text/css" href="../../../css/lec.css">

</head><body>
<a name="#start"></a>
<table class="pages" align="center" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td>&nbsp;&nbsp;<a href="../../../plan_1.htm" class="p">Календарно-тематический
план</a>&nbsp;&nbsp;</td>
      <td><a href="index.htm" class="p">&nbsp; План лекции &nbsp;</a></td>
      <td><a href="01.htm" class="p">&nbsp; 1 &nbsp;</a></td>
      <td><a href="02.htm" class="p">&nbsp; 2 &nbsp;</a></td>
      <td><a href="03.htm" class="p">&nbsp; 3 &nbsp;</a></td>
      <td><a href="04.htm" class="a">&nbsp; 4 &nbsp;</a></td>
    </tr>
  </tbody>
</table>

<!-- -------Inside table------- -->
<table border="0" cellpadding="5" cellspacing="0" width="98%">

  <tbody>
    <tr>
      <td class="usual">
      <p class="dbi" align="center"><br>
Типы алгоритмических структур</p>
      <p>В основе решения любой задачи лежит понятие алгоритма -
понятное и точное предписание (указание) исполнителю совершить
определенную последовательность действий для достижения поставленной
цели.
      </p>
      <p>Для строгого задания различных структур данных и алгоритмов их
обработки требуется иметь такую систему формальных обозначений и
правил, чтобы смысл всякого используемого предписания трактовался точно
и однозначно. Соответствующие системы правил называют языками описаний.
      </p>
      <p><i>Алгоритмический язык</i> - средство описания алгоритмов,
ориентированное на исполнителя - человека.
      <br>
При разработке программ мы будем пользоваться:
      </p>
      <ul type="disc">
        <li>либо словесным способом записи алгоритмов (описание
последовательных этапов обработки данных в произвольном изложении на
естественном языке);
        </li>
        <li>либо графическим способом , методом блок-схем.
        </li>
      </ul>
      <p>Основная тенденция в использовании схем алгоритмов состоит не
столько в указании последовательности операций, сколько в группировании
блочных символов в виде базовых управляющих конструкций. К ним
относятся следование, ветвление и повторение. Каждая конструкция имеет
единственный вход и единственный выход. Причем составляющие их
компоненты изображаются по вертикали.<br>
      </p>
      <p class="wbi">Алгоритм линейной структуры (следование)</p>
      
      <center>
      <table width="95%">
        <tbody>
          <tr>
            <td align="center" valign="top" width="35%"><img src="pic_01.gif" alt="Команда следования" ismap="ismap">
            </td>
            <td valign="top">Алгоритм, в котором блоки выполняются
последовательно друг за другом, в порядке, заданном схемой
(естественный порядок)
            <br>
Каждый блок может содержать в себе как простую команду, так и сложную
структуру, но обязательно должен иметь один вход и один выход.
            <br>
Например:
            <ul>
              <li>вычисление сопротивления внешней цепи при
последовательном соединении N резисторов сопротивлением R каждый,
              </li>
              <li>вычисление площади прямоугольника со сторонами a и b,
              </li>
              <li>вычисление площади поверхности и объема цилиндра с
известными радиусом основания R и высотой H.
              </li>
            </ul>
            </td>
          </tr>
          <tr valign="top">
            <td>
            <p><img src="pic_04.gif" alt="Формула Герона" ismap="ismap" align="middle"></p>
            </td>
            <td>
            <p><b>Пример 1.</b> <i>Дан треугольник со сторонами a, b,
c.
            <br>
Составить алгоритм нахождения площади треугольника по формуле Герона и
высот существующего треугольника.</i>
            </p>
            <p><i>Аргументы: a, b, c.
            <br>
Результаты: S, h<sub>a</sub>, h<sub>b</sub>, h<sub>c</sub>.
            <br>
Полупериметр: <img src="f01.gif" alt="" ismap="ismap" align="middle">
            <br>
Формула Герона: <img src="f02.gif" alt="" ismap="ismap" align="middle">
            <br>
Высоты: <img src="f03.gif" alt="" ismap="ismap" align="middle">.</i>
            </p>
            
            <br>
            <i>Контрольный пример: для a = 3, b = 4, c = 5
            <br>
значения S = 6, h<sub>a</sub> = 4, h<sub>b</sub> = 3, h<sub>с</sub> =
2.4</i>
            <br>
            <p>Алгоритм нахождения площади и высот треугольника
является примером линейного алгоритма.
            <br>
Место каждого блока жестко закреплено: нельзя блок вычисления
полупериметра расположить до ввода сторон треугольника, нельзя
вычислить площадь до вычисления полупериметра, высоты можно вычислить,
зная площадь треугольника.
            <br>
Последовательность же вычисления высот может быть любой.
            </p>
            </td>
          </tr>
          <tr valign="top">
            <td>
            <pre>#include&lt;conio.h&gt;<br>#include&lt;math.h&gt;<br>#include&lt;iostream.h&gt;<br>void main( void )<br>{<br>	clrscr();<br>	float a, b, c, p, s, ha, hb, hc;<br>	cout &lt;&lt; "a  = "; cin &gt;&gt; a;<br>	cout &lt;&lt; "b  = "; cin &gt;&gt; b;<br>	cout &lt;&lt; "c  = "; cin &gt;&gt; c;<br>	p = (a + b + c) / 2;<br>	s = sqrt(p * (p - a) * (p - b) * (p - c));<br>	ha = 2 * s / a; hb = 2 * s / b; hc = 2 * s / c;<br>	cout &lt;&lt; "s = " &lt;&lt; s &lt;&lt; endl;<br>	cout &lt;&lt; "ha = " &lt;&lt; ha &lt;&lt; "\thb = " &lt;&lt; hb<br>		&lt;&lt; "\thc = " &lt;&lt; hc;<br>	getch();<br>}<br>            </pre>
            <br>
            </td>
            <td><i>При программировании линейных алгоритмов решения
вычислительных задач последовательность действий однотипна:</i>
            <ol>
              <li>определить переменные:
                <ul type="disc">
                  <li>входные данные - аргументы (a, b, c),
                  </li>
                  <li>промежуточные данные (p), если они есть,
                  </li>
                  <li>выходные данные - результаты (s, ha, hb, hc);
                  </li>
                </ul>
                
              </li>
              <li>ввести значения аргументов любым способом (прямым
присваиванием, с клавиатуры, из файла);
                
              </li>
              <li>вычислить значения искомых переменных по формулам;
                
              </li>
              <li>вывести результат (на экран, в файл, ...).
              </li>
            </ol>
            </td>
          </tr>
        </tbody>
      </table>
      </center>
      <p class="wbi">Алгоритм разветвленной структуры (ветвление)</p>
      
      <center>
      <table width="95%">
        <tbody>
          <tr valign="top">
            <td align="center" width="55%"><img src="pic_02.gif" alt="Полная развилка" ismap="ismap">
            </td>
            <td>Такая схема, в которой предусмотрено разветвление
указанной последовательности действий на два направления в зависимости
от итога проверки заданного условия.
            <br>
Например:
            <ul>
              <li>нахождение большего из двух чисел,
              </li>
              <li>определение, является ли заданное число четным,
              </li>
              <li>определение, попадает ли точка с координатами (x, y)
в круг радиусом r.
              </li>
            </ul>
            <p>В общем случае число ветвей в алгоритме не обязательно
равно двум.
            </p>
            </td>
          </tr>
          <tr valign="top">
            <td><img src="pic_05.gif" alt="" ismap="ismap"></td>
            <td>
            <p><br>
            <b>Пример 2.</b> <i>Составить алгоритм определения
кислотности раствора при помощи лакмусовой бумажки.</i>
            </p>
            <p><i>Примечание:</i>
            </p>
            <ul>
              <li>раствор кислотный - лакмусовая бумажка красная,
              </li>
              <li>раствор щелочной - лакмусовая бумажка синяя,
              </li>
              <li>раствор нейтральный - исходный цвет остается.
              </li>
            </ul>
            <p>При разработке алгоритма необходимо оговорить начальное
действие: возьмем неизвестный раствор и опустим в него лакмусовую
бумажку.
            <br>
Данный алгоритм является примером разветвляющегося алгоритма (команда
ветвления). На условие может быть дано два варианта ответа: да (True),
нет (False).<br>
В зависимости от ответа будет выполняться либо действие 1, либо
действие 2.<br>
            <br>
            </p>
            </td>
          </tr>
        </tbody>
      </table>
      </center>
      <p class="wbi">Алгоритм циклической структуры (повторение)</p>
Алгоритм, в котором предусмотрено неоднократное выполнение одной и той
же последовательности действий при различных значениях параметров,
изменяемых при каждом новом выходе на повторение.
      <p><b><i>Тело цикла</i></b> - многократно повторяемые действия.
      </p>
      <p><b><i>Параметр цикла</i></b> - переменная, изменяющаяся в
цикле - управляющая переменная цикла.
      </p>
      <p><b><i>Для организации цикла любого типа необходимо:</i></b>
      </p>
      <ol>
        <li>Задать перед циклом начальное значение переменной,
изменяющейся в цикле. </li>
        <li>Изменять переменную перед каждым новым повторением цикла. </li>
        <li>Проверять условие окончания или повторения цикла. </li>
        <li>Управлять циклом, то есть переходить к его началу, если он
не закончен, или выходить из него по окончании. </li>
      </ol>
      
      <center>
      <table width="95%">
        <tbody>
          <tr valign="top">
            <td align="center" width="30%"><img src="for.gif" alt="Цикл с параметром" ismap="ismap"></td>
            <td>Если заранее известно, сколько раз будет выполнено тело
цикла, то удобно применять цикл с параметром (регулярный цикл).
            <br>
Например:
            <ul>
              <li>вычислить все значения функции y = sin(x) для
значений угла, изменяющегося от 0<sup>o</sup> до 180<sup>o</sup> с
шагом 5<sup>o</sup>;
              </li>
              <li>вычислить сумму и произведение k членов ряда,
заданных формулой общего члена ряда a = ln(n&#8729;x), где n = 1, 2, ..., k -
номер члена ряда.
              </li>
            </ul>
            </td>
          </tr>
          <tr valign="top">
            <td align="center">
            <p><br>
            <img src="i13_03.gif" alt="Цикл с параметром для накопления сумм и произведений" ismap="ismap"></p>
            </td>
            <td>
            <p><br>
            <b>Пример 3.</b> <i>Вычислить значения суммы S и
произведения P k членов последовательности, заданных формулой общего
члена последовательности <img src="i13_04.gif" align="middle"></i>
            </p>
            <p>k - количество членов последовательности,
            <br>
n = 1, 2, 3, ..., k - номер члена последовательности.
            </p>
            <p>При накоплении сумм и произведений надо помнить:
            </p>
            <ol>
              <li>Начальные значения накапливаемых величин необходимо
задать до начала цикла, в котором происходит накопление
                <ul type="disc">
                  <li>при накоплении суммы начальное значение S = 0,
                  </li>
                  <li>при накоплении произведения начальное значение P
= 1.
                  </li>
                </ul>
                
              </li>
              <li>Накопление суммы S = S + a, произведения P = P * a
производить в цикле после вычисления значения a.
                
              </li>
              <li>Вывод значений частичных сумм и произведений
производить в цикле после их вычисления.
                
              </li>
              <li>Вывод значений накопленных сумм и произведений
производить за циклом, после их накопления.
              </li>
            </ol>
            </td>
          </tr>
        </tbody>
      </table>
      </center>
      <p><i>Если число повторений цикла не известно, то есть цикл
заканчивается по условию, используется или цикл с постусловием (ДО) или
цикл с предусловием (ПОКА).</i>
      </p>
      <p>Теоретически необходимым и достаточным является лишь цикл с
предусловием. Любой циклический алгоритм можно построить с его помощью.
Это более общий вариант цикла.
      </p>
      <p>
      <table align="center" border="0" bordercolor="#000033" width="95%">
        <tbody>
          <tr valign="top">
            <td align="center" width="50%"><b><i>Цикл - ДО</i></b><br>
Тело цикла обязательно будет выполнено хотя бы один раз</td>
            <td align="center"><b><i>Цикл - ПОКА</i></b><br>
Тело цикла может оказаться не выполненным ни разу
            </td>
          </tr>
          <tr valign="top">
            <td align="center"><img src="pic_03_1.gif" alt="Цикл с постусловием" ismap="ismap"></td>
            <td align="center"><img src="pic_03_2.gif" alt="Цикл с предусловием" ismap="ismap">
            </td>
          </tr>
          <tr valign="top">
            <td>Цикл с постусловием (цикл-до).
            <br>
Тело цикла предшествует условию цикла и поэтому хотя бы один раз
обязательно выполнится.
            </td>
            <td>Цикл с предусловием (цикл - пока).
            <br>
Пока условие истинно, выполняется серия команд, образующая тело цикла.
            </td>
          </tr>
          <tr valign="top">
            <td>
            <p><b>Пример 4.</b> <i>Составить алгоритм планирования
закупки товара в магазине на сумму, не превышающую заданную величину.</i>
            </p>
            <p><img src="image001.gif" alt="Цикл-пока." align="left" hspace="30" vspace="5">Известна цена x одной единицы товара и
имеющаяся у покупателя сумма p.
            <br>
Необходимо определить:
            <br>
k - сколько единиц товара можно приобрести,
            <br>
s - сколько он будет стоить,
            <br>
o - сколько денег останется после покупки.
            </p>
            </td>
            <td>
            <p><b>Пример 5.</b> <i>Вычислить значения функции y = x<sup>2</sup>
на отрезке [a, b] с шагом h.</i>
            </p>
            <p><img src="i13_01.gif" alt="Цикл-пока." ismap="ismap" align="left" hspace="30" vspace="5"><br>
x - управляющая переменная цикла,
            <br>
a, b - границы отрезка,
            <br>
h - значение шага.
            </p>
            <p>Если начальное значение (x&nbsp;=&nbsp;a) окажется
больше конечного b, то тело цикла не выполнится ни разу.
            </p>
            <p>Если a&nbsp;&lt;&nbsp;b, то тело цикла будет повторяться
пока значение x&nbsp;&#8804;&nbsp;b.
            </p>
            </td>
          </tr>
        </tbody>
      </table>
      </p>
      <p class="wbi">Базовые алгоритмические структуры</p>
      <p>Алгоритм для решения любой логической задачи можно составить
только из структур
      </p>
      <ul>
        <li>следование,</li>
        <li>ветвление,</li>
        <li>цикл.</li>
      </ul>
      <p>Их называют базовыми алгоритмическими структурами.
      </p>
      <p>Сложный алгоритм состоит из соединенных между собой базовых
структур. </p>
      <p><b><i>Соединяться эти структуры могут двумя способами:</i></b>
      </p>
      <ul>
        <li>последовательным </li>
        <li>вложенным.</li>
      </ul>
      <p>Если блок, составляющий тело цикла, сам является циклической
структурой, то, значит, имеют место вложенные циклы. В свою очередь,
внутренний цикл может иметь внутри себя еще один цикл и так далее. В
связи с этим вводится представление о глубине вложенности циклов. </p>
      <p>Так же и ветвления могут быть вложенными друг в друга.
      </p>
      
      <center>
      <table width="95%">
        <tbody>
          <tr valign="top">
            <td align="left" width="45%"><img src="snar.gif" alt="Попал ли снаряд в цель" ismap="ismap">
            </td>
            <td>
            <p><b>Пример 6.</b> <i>Составить алгоритм, позволяющий
определить, попал ли снаряд, выпущенный со скоростью V<sub>o</sub> под
углом &#945; к горизонту, в цель высотой P, установленную на расстоянии R от
орудия.
            <br>
Расстояние от поверхности Земли до нижнего края цели равно H.
            <br>
Из орудия произведено N выстрелов.</i>
            </p>
            <p>Контрольный пример:
            </p>
            <ol>
              <li>V<sub>o</sub>&nbsp;=&nbsp;10&nbsp;м/c,&nbsp;&#945;&nbsp;=&nbsp;30<sup>o</sup>&nbsp;-&nbsp;попал;
              </li>
              <li>V<sub>o</sub>&nbsp;=&nbsp;50&nbsp;м/c,&nbsp;&#945;&nbsp;=&nbsp;15<sup>o</sup>&nbsp;-&nbsp;не&nbsp;попал;
              </li>
            </ol>
            <p>Данный алгоритм является примером составного алгоритма:
команды повторения (было сделано N выстрелов - цикл) и команды
ветвления (снаряд достиг высот:<br>
            <img src="f04.gif" alt="" ismap="ismap" align="middle"><br>
а в горизонтальном направлении переместился на расстояние
            <br>
            <img src="f05.gif" alt="" ismap="ismap" align="middle"> не
меньшее R).<br>
            </p>
            <p>В алгоритме необходимо использовать составное условие И.
            <br>
Время движения снаряда - это время, за которое снаряд переместится в
горизонтальном направлении на расстояние R.
            <br>
Значение ускорения свободного падения взять со знаком минус, так как
его направление противоположно положительному направлению оси Y.
            <br>
При вычислении необходимо будет использовать константы:
            <br>
            <img src="f06.gif" alt="" ismap="ismap" align="middle"> =
3,14159 для перевода угла в радианы,<br>
g = 9,81 - ускорение свободного падения.<br>
            </p>
            <p>В алгоритме использовано составное условие И, то есть
ветвь "да" будет выполняться только в том случае, когда на каждое из
условий будет получен ответ да (в первом случае при i = 1).
            <br>
Если хотя бы на одно из условий получен ответ "нет", будет выполняться
ветвь "нет" (во втором случае при i = 2).
            </p>
            <p>Когда используется составное условие ИЛИ, ветвь "да"
будет выполняться, если хотя бы на одно из условий получен ответ "да".
            <br>
Например, при вычислении по формуле:<img src="f07.gif" alt="" ismap="ismap" align="middle">, если x = 0 ИЛИ x = 2 получим деление на 0, чего
необходимо избежать.<br>
            <br>
            </p>
            </td>
          </tr>
        </tbody>
      </table>
      <p>&nbsp;
      </p>
      </center>
      </td>
    </tr>
  </tbody>
</table>

<!-- -------End of Inside table------- -->
<table class="pages" align="center" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <td>&nbsp;&nbsp;<a href="../../../plan_1.htm" class="p">Календарно-тематический
план</a>&nbsp;&nbsp;</td>
      <td><a href="lec_m.htm" class="p">&nbsp; План лекции &nbsp;</a></td>
      <td><a href="01.htm" class="p">&nbsp; 1 &nbsp;</a></td>
      <td><a href="02.htm" class="p">&nbsp; 2 &nbsp;</a></td>
      <td><a href="03.htm" class="p">&nbsp; 3 &nbsp;</a></td>
      <td><a href="04.htm" class="a">&nbsp; 4 &nbsp;</a></td>
    </tr>
  </tbody>
</table>

<a name="#end"></a>
</body></html>