<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 02</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=0 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Структура простой программы<p>
</p>
<p><i>Программа</i> - последовательность указаний (команд) для ввода исходных данных, их обработки и выдачи результатов для реализации алгоритма задачи, записанная по правилам языка программирования.
<p>Язык программирования (как и любой другой язык) образуют три его составляющие: 
<ul type="disc">
<li><i>алфавит</i> - фиксированный для данного языка набор основных символов, т.е. "букв алфавита", из которых должен состоять любой текст на этом языке - никакие другие символы в тексте не допускаются,
<li><i>синтаксис</i> - правила построения фраз, позволяющие определить, правильно или неправильно написана та или иная фраза (набор правил, устанавливающих, какие комбинации символов являются осмысленными предложениями на этом языке),
<li><i>семантика</i> - определяет смысловое значение предложений языка. Являясь системой правил истолкования отдельных языковых конструкций, семантика устанавливает, какие последовательности действий описываются теми или иными фразами языка и, в конечном итоге, какой алгоритм определен данным текстом на алгоритмическом языке.
</ul>
<p>Понятие языка определяется во взаимодействии синтаксических и семантических правил. Синтаксические правила показывают, как образуется данное понятие из других понятий и букв алфавита, а семантические правила определяют свойства данного понятия.
<p>Любая программа, написанная на языке C, состоит из одной или более "функций", 
являющихся основными модулями, из которых она собирается.
<p><table align="center" width=98% border=0 cellpadding=0 cellspacing=0>
<tr valign="top"><td width=45%><img src="l06_00.gif" alt="Структура программы">
</td><td>
<p><i><b>Функцией называется</b></i> ряд последовательных инструкций, говорящих 
компьютеру, как выполнить определенную задачу.<br>
<p>Все программы на C должны начинаться с функции, называемой <b>main()</b>. 
Фактически каждая функция включает в свое имя круглые скобки, в которых может
 содержаться определенная информация. Следом за main() вводятся инструкции. 
Инструкции могут быть представлены в виде стандартных команд и имен функций, 
содержащихся в библиотеках или написанных вами самостоятельно.<br>
<p><i><b>Библиотека</b></i> - это отдельный файл, прилагающийся к компилятору 
и содержащий функции для решения распространенных задач. Подключение библиотек осуществляется в самом начале программы.
<p>Существуют функции, которые используются так часто, что вместе со многими 
компиляторами поставляются их исходные тексты. Они содержатся в файлах, 
которые называются <b>файлами заголовков</b> (header file) и обычно имеют расширение 
<b>*.h</b>. Файлы заголовков также содержат директивы компилятору и инструкции, 
указывающие как использовать конкретные определения.
<p>Строки исходного кода, начинающиеся со знака <b>#</b>, являются, как правило, <i>директивами препроцессора</i>,
 т.е. управляют обработкой текста программы еще до его передачи собственно компилятору. 
<p>Например, при написании программы, требующей использования дисковых файлов 
или устройства ввода/вывода, необходимо включить файл заголовков stdio.h:
<pre>		#include &lt;stdio.h&gt; - искать в каталоге INCLUDE
		#include "stdio.h"   - искать в текущем каталоге
</pre>
</td></tr>
</table></p>
<p>Открывающаяся фигурная скобка { помещается перед первой инструкцией, закрывающаяся 
фигурная скобка } следует за последней инструкцией.
<p>Скобки <b>{</b> и <b>}</b> называются <b>ограничителями</b> и служат для выделения 
части кода в единый блок.
<p>Написанная вами функция всегда должна начинаться и заканчиваться фигурными 
скобками. Кроме того, отдельные блоки внутри функции могут отмечаться при 
помощи своих собственных пар фигурных скобок.
<P><i><b>Тело функции</b></i> - последовательность инструкций, составляющих функцию.
<p>Тело функции представляет собой набор операторов:
<ul>
<li>описания,
<li>присваивания,
<li>вызова функций,
<li>управления,
<li>пустой оператор,
</ul>
<p>включающих в свой состав:
<ul>
<li>ключевые слова,
<li>данные,
<li>операторы.
</ul>
<b><i>Точка с запятой ;</i></b> в языке C является разделителем, отмечает конец 
каждой инструкции и показывает компилятору, что данная инструкция завершена 
и дальше начинается следующая инструкция или заканчивается программа.
<p>При запуске программы компьютер начинает ее выполнение с первой инструкции функции main().
<p><b><i>Для того, чтобы написать текст программы, используется редактор,</i></b> отличающийся 
от текстового процессора отсутствием возможностей для форматирования символов и параграфов. 
<p><center><table>
<tr><td align=left valign=top>
<img align=center src="l06_01.gif" alt="l06_01.gif" ismap>
</td><td>&nbsp;&nbsp;&nbsp;
</td><td valign=top>
<p>&nbsp;</p>
<ul><li>До выполнения программы подготовить ее текст в файле с расширением <b>*.cpp</b>,
<p><li>препроцессор, выполнив директивы препроцессора, сформирует полный текст программы,
<p><li>передать этот файл на компиляцию и устранить синтаксические ошибки, выявленные компилятором,
<p><li>безошибочно откомпилировать - получить объектный файл с расширением <b>*.obj</b>,
<p><li>дополнить объектный файл нужными библиотечными функциями - компоновка - и получить исполняемый модуль программы в файле с расширением <b>*.exe</b>.
<br>Этот этап называется редактированием связей (Linker -  редактор связей).
</ul>
</td></tr>
</table></center>
<p align=center class=dbi>Компиляция и интерпретация</p>
<p>Чтобы компьютер мог понять написанную программу, она должна быть переведена в
так называемые машинные коды - язык, понятный процессору.
<p><b>Трансляция</b> - процесс перевода программы, написанной на языке программирования, в машинные коды.
<p><i>Транслятор (англ. translator - переводчик)</i> - это программа-переводчик. Она преобразует программу, написанную на одном из языков высокого уровня, в программу, состоящую из машинных команд.
<p>Существует два различных подхода к трансляции:
<ul><li>интерпретация
<br><i>Интерпретатор (англ. interpreter - истолкователь, устный переводчик)</i>,
<li>компиляция
<br><i>Компилятор (англ. compiler - составитель, собиратель)</i>.
</ul>
<p><b><i>Языки программирования интерпретирующего типа</i></b> при исполнении программы
за один проход переводят в машинные коды одну строку программы.
<br>При большом размере программы процесс исполнения готовой программы занимает
довольно много времени.
<br>Программа, обрабатываемая интерпретатором, должна заново переводиться на машинный язык при каждом очередном запуске программы.
<br>В тоже время при разработке программ режим интерпретации очень удобен: любое
внесенное изменение сразу же переводится в машинные коды и исполняется.
<p><b><i>Языки программирования компилирующего типа</i></b>, напротив, сначала переводят весь текст
программы в машинные коды, а затем полученный файл может быть запущен на выполнение.
<br>Откомпилированная программа выполняется гораздо быстрее, но при наличии ошибок
редактирование, компилирование, исправление ошибок на этапе компиляции, опять
редактирование, и так до тех пор, пока все ошибки не будут устранены, занимает
очень много времени при разработке программ.
<p>Существует также возможность перевода программы на <i>промежуточный язык</i>, не
 зависящий от архитектуры конкретного компьютера, но тем не менее максимально
 приближенный к языку машинных команд. Затем программа на промежуточном языке
 выполняется специальной программой, которая называется<b> интерпретатором</b>.
 Возможен также вариант<b> компиляции "на лету"</b> (Just In Time Compilation),
 когда выполняемый фрагмент программы переводится с промежуточного языка
 на язык машинных команд непосредственно перед выполнением.

<p>Наиболее распространенные<i> компилируемые языки</i> - это Си, C++, Фортран, Паскаль.
 <i>Интерпретируемые и компилируемые на лету языки</i> - это в основном 
объектно-ориентированные языки, такие как Java, Visual Basic и C#. Все они
 вначале переводятся на промежуточный язык: для Java это так называемый
 байткод языка Java, для Visual Basic и C# - так называемый промежуточный язык
 (Intermediate Language или просто IL), являющийся одним из основных
 компонентов платформы ".Net" фирмы Microsoft. Промежуточный язык может
 интерпретироваться специальным исполнителем (например, виртуальной
 Java-машиной), но, как правило, в современных системах применяется
 компиляция на лету, что позволяет достичь большего быстродействия.

<p><b><i>Компиляция</i></b> - многоступенчатый процесс, включающий следующие фазы:
<ul><li>синтаксический анализ - проверка правильности конструкций, использованных при подготовке текста,
<li>семантический анализ - выявление несоответствий типов и структур переменных, функций, процедур,
<li>генерация объектного кода - файл *.obj.
</ul>
<p><b><i>Объектный модуль</i></b> - *.obj - текст программы на машинном языке, включающий
машинные инструкции, словари, служебную информацию.
<br>Он не работоспособен, поскольку содержит неразрешенные ссылки на вызываемые подпрограммы библиотеки системы
программирования, реализующие функции ввода\вывода, обработки числовых и строковых переменных и так далее.
<p><b><i>Для написания новой программы</i></b> из главного меню выбирается опция 
<b>File (Alt+F)</b>, затем опция <b>New</b> - попадаем в окно редактора. Язык C является 
языком свободного формата, для него не имеет значения, где будут помещены 
ограничители и начало строки.
<pre><b><i>Можно написать программу</i>

		#include&lt;stdio.h&gt;
		main()
		{
			int num;
			num = 1;
			printf("num = %d \n", num);
		}
<i>или</i>
		#include&lt;stdio.h&gt;
		main() { int num; num = 1; printf("num = %d \n", num); }
</b></pre>
<p>Компилятор обработает эти программы одинаково, но для того, чтобы сделать 
программу более читабельной, принято придерживаться правил хорошего стиля программирования.
<p>&nbsp;</p>
</td>
</tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>