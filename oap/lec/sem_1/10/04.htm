<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 10</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Ширина поля вывода</p>
<b><i>Функция-элемент width класса ios</i></b> устанавливает ширину поля вывода (число символьных 
позиций, в которые значение будет выведено, или число символов, которые будут 
введены) и возвращает предыдущую ширину поля. <p>Если обрабатываемые значения имеют 
меньше символов, чем заданная ширина поля, то для заполнения лишних позиций 
используются заполняющие символы. <p>Если число символов в обрабатываемом значении 
больше, чем заданная ширина поля, то лишние символы не отсекаются и число будет 
напечатано полностью. <p>Установка ширины поля влияет только на следующую операцию 
поместить или взять; затем ширина поля устанавливается неявным образом на 0, то есть 
поле для представления выходных значений будут просто такой ширины, которая 
необходима. <p>Функция width, не имеющая аргументов, возвращает текущую установку.
<p>Программа демонстрирует использование функции-элемента width при вводе и при 
выводе. <br>Читается, по крайней мере, на один символ меньше, чем установленная ширина 
поля, чтобы обеспечить размещение во входной строке нулевого символа. <br>Операция взять 
из потока завершается, когда встречаются не лидирующий символ - разделитель (то есть 
не предшествующий значащим символам).
<pre>
		int w = 4; char string[10] ;
		cout << "Предложение:\n";
		cin.width (5);
		while (cin >> string)
		{
			cout.width (w++); cout << string << endl;
			cin.width (5);
		}
	<b><i>Результаты:</i></b>	Предложение:
			Проверка работы функции
			Пров
			 ерка
			  рабо
			     ты
			    функ
			      ции
</pre>
<p><b><i>Для установки ширины поля может быть также использован манипулятор потока setw.</i></b>
<p>setw(int w); - задает значение внутренней переменной ширины поля:
<ul type="disc">
<li>для входного потока задает максимальное число символов, которые должны быть прочитаны,
<li>для выходного потока указывает минимальную ширину поля,
<li>если ширина поля меньше указанной, выходной поток дополняется символами fill,
<li>если ширина поля больше указанной, спецификация ширины игнорируется,
<li>ширина поля устанавливается на 0 после каждой операции помещения.
</ul>
<p>Следующий пример служит иллюстрацией параметризованных манипуляторов.
<br>В рассматриваемом программном коде:
<ul type="disc">
<li>setffll('.'); - задает в качестве заполняющего символа точку,
<p><li>setprecision(4) - задает значение точности 4 - количество цифр в дробной части,
<p><li>setiosflags(long b); - устанавливает флаги, биты которых установлены в переданном параметре:
<ul type="square">
<li>ios::showpoint - устанавливается для вывода числа с обязательной печатью десятичной точки и нулевых младших разрядов (нулей в конце числа),
<li>ios::fixed - устанавливается для вывода вещественного числа в формате с фиксированной точкой,
<li>ios::right - позволяет выравнивать печать по правой границе поля с помощью заполняющих символов, печатаемых левых пустых позициях,
</ul>
<p><li>setw(20) - задает значение ширины поля вывода.
</ul>
<pre>
	#include&lt;conio.h&gt;
	#include&lt;iostream.h&gt;
	#include&lt;iomanip.h&gt;
	void main(void)
	{
		clrscr();
		double dbls[5] = {1.245, -12.99133, 134.007804, -2.345, 0.000003};
		cout << setfill('.') << setprecision(4)
			<<  setiosflags(ios::showpoint | ios::fixed | ios::right);
		for(int i = 0; i < 5; i++ )
			cout << "Результат" << setw(20) << dbls[i] << endl;
		getch();
	}
</pre>
<p>При исполнении программы будет выведено слово Результат, затем по правому краю поля из 20 символов вещественное число в форме с фиксированной точкой с четырьмя десятичными знаками, а перед ним, оставшиеся позиции будут заполнены точками.
<pre>
			Результат..............1.2450
			Результат............-12.9913
			Результат............134.0078
			Результат.............-2.3450
			Результат..............0.0000
</pre>
<p>В программе использованы значения с разным количеством цифр в дробной части: 1.245, -12.99133, 134.007804, -2.345, 0.000003, но при выводе результата все выводимые данные имеют 4 знака после десятичной точки.
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>