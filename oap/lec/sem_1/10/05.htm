<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 10</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Состояния формата потоков</p>
Различные флаги формата задают виды форматирования, которые выполняются во время 
операций ввода-вывода. Управляют установками флагов функции-элементы <b>setf</b>, <b>unsetf</b> и 
<b>flags</b>.
<p>Каждый из флагов состояний формата определяется как перечислимый тип в классе ios. 
<p>Можно использовать операцию <b>побитовое &nbspИЛИ&nbsp |&nbsp</b> для объединения разных опций в одно 
значение типа long. <p><b><i>Вызов функции-элемента flags</i></b> для потока с заданием этих 
соединенных операцией опций устанавливает опции этого потока и возвращает значение 
типа long, содержащее предыдущие значения опций.
<br>Если у функции-элемента flags нет аргумента, то она просто возвращает текущие 
установки флагов формата в виде значения типа long, функция-элемент flags с аргументом 
типа long устанавливает флаги формата, заданные с помощью аргумента, и возвращает 
прежние установки флагов. <br>Любые флаги форматов, которые не определены в аргументе 
для функции-элемента flags, остаются в исходном состоянии. <br>Исходные установки флагов 
каждой системы могут различаться. 
<p><b><i>Функция-элемент setf</i></b> устанавливает флаги формата, заданные в качестве аргумента, и 
возвращает прежние установки этих флагов в виде значения типа long, которое можно 
запомнить, как показано ниже:
<pre>	long previousFlagSettings = cout.setf(ios::showpoint | ios::showpos);</pre>
Функция-элемент setf имеет два аргумента типа long: 
<pre>	cout.setf (ios::left, ios::adjustfield);</pre>
Этот оператор сначала очищает бит ios::adjustfield, а затем устанавливает флаг ios::left. 
<p>Этот вариант флага setf влияет на битовые поля, связанные 
<ul>
<li>с ios::basefield (содержит ios::dec, ios::oct и ios::hex), 
<li>с ios::floatfield (содержит ios::scientific и ios::fixed),
<li>с ios::adjustfield (coдepжит ios::left, ios::right и ios::internal).
</ul>
<p><b><i>Функция-элемент unsetf</i></b> сбрасывает указанные флаги и возвращает значения этих флагов, 
которые существовали ранее.
<p><b><i>Параметризованный манипулятор потока setiosflags</i></b> выполняет те же функции, что и 
функция-элемент setf. 
<p><b><i>Манипулятор потока resetiosflags</i></b> выполняет те же функции, что и 
функция-элемент unsetf. 
<p>Чтобы использовать любой из этих манипуляторов потока, необходимо включить директиву #include&ltiomanip.h>.<p>
<b><i><center>Флаги состояний формата</center></i></b><p>
<table border=1 align=center cellpadding=10>
<tr><td>   <b><center>Флаг    </center></b>
</td><td>  <b><center>Действие</center></b>
</td></tr>
<tr><td>   <b>ios::skipws</b>
</td><td>  показывает, что операция взять из потока >> должна пропускать символы 
разделители во входном потоке. Чтобы сбросить флаг skipws, 
используется вызов функции unsetf(ios::skipws). Манипулятор потока ws 
также может быть использован для указания, надо ли пропускать 
символы разделители.
</td></tr>
<tr><td>   <b>ios::left ios::right</b>
</td><td>  позволяют выравнивать печать соответственно по левой или правой 
границе поля с помощью заполняющих символов, печатаемых 
соответственно в правых или левых пустых позициях. Используемый для 
заполнения символ задается с помощью функции-элемента fill или 
параметризованного манипулятора потока setfill.
</td></tr>
<tr><td>   <b>ios::internal</b>
</td><td>  показывает, что знак числа (или основание, если установлен флаг 
ios::showbase) следует выравнивать по левой границе поля, значение 
числа следует выравнивать по правой границе, в пустых промежуточных 
позициях следует разместить заполняющие символы.
</td></tr>
<tr><td>   <b>ios::dec ios::oct ios::hex</b>
</td><td>  трактуют целые числа соответственно как десятичные, восьмеричные, 
или шестнадцатеричные значения. Если ни один из этих битов не 
установлен, то по умолчанию целые числа при операции поместить в 
поток трактуются как десятичные. При операции взять из потока данные 
по умолчанию обрабатываются в той форме, в которой они поступают: 
целые, начинающиеся с 0, обрабатываются как восьмеричные значения, 
целые, начинающиеся с 0х или 0Х, обрабатываются как 
шестнадцатеричные значения, а все другие целые числа обрабатываются 
как десятичные значения. Если для потока указывается определенное 
основание, то все целые значения данных в этом потоке обрабатываются 
с помощью этого основания до тех пор, пока не задано новое основание 
или пока не завершится программа.
</td></tr>
<tr><td>   <b>ios::showbase</b>
</td><td>  задает основание целочисленных значений для вывода. Десятичные числа 
выводятся обычным способом, восьмеричные числа выводятся с нулем в 
старшем разряде (ведущим нулем), шестнадцатеричные числа выводятся 
с индикатором 0х или 0Х в старших разрядах.
</td></tr>
<tr><td>   <b>ios::showpoint</b>
</td><td>  устанавливается для вывода числа с обязательной печатью десятичной 
точки и нулевых младших разрядов (нулей в конце числа). Для установки 
флага используется функция-элемент setf.
</td></tr>
<tr><td>   <b>ios::uppercase</b>
</td><td>  устанавливает вывод в верхнем регистре символов X и E в 
шестнадцатеричном и экспоненциальном форматах соответственно. 
Когда флаг установлен, все буквы шестнадцатеричного формата 
печатаются в верхнем регистре.
</td></tr>
<tr><td>   <b>ios::showpos</b>
</td><td>  приводит к обязательной печати знака плюс.
</td></tr>
<tr><td>   <b>ios::scientific ios::fixed</b>
</td><td>  управляют форматом вывода для чисел с плавающей запятой. Флаг 
scientific устанавливается для вывода чисел с плавающей запятой в 
экспоненциальном формате. Флаг fixed устанавливается для вывода чисел 
с плавающей запятой в формате с фиксированной точкой, с заданным 
количеством разрядов, указанным с помощью функции-элемента 
precision, справа от десятичной точки. Без установки этих флагов 
значения чисел с десятичной запятой сами определяют форматы 
выводимых данных. Вызов cout.setf (0, ios::floatfield) восстанавливает в 
системе формат вывода чисел с плавающей запятой по умолчанию.
</td></tr>
</table>
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>