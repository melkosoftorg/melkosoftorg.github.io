<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 03</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=p>&nbsp 11 &nbsp</a></td>
<td><a href="12.htm" class=p>&nbsp 12 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Run - меню выполнения<br>Вызов: Alt + R</p>
<p>Меню Run (Выполнение) содержит команды, которые осуществляют выполнение вашей программы, а также инициализируют и завершают сеанс отладки.
<p><center><table  width="100%">
<tr><td width="35%" valign="top"><left><img src="run_m.gif"></left>
</td><td width="65%">Меню Run (Выполнение) позволяет осуществлять
<ul>
<li><a href="#01">выполнение программы</a>,
<li><a href="#02">прекращение текущего сеанса отладки</a>,
<li><a href="#03">выполнение программы до заданной строки</a>,
<li><a href="#04">пооператорное выполнение программы</a>,
<li><a href="#05">трассирующее вхождения в вызовы функций</a>,
<li><a href="#06">ввод аргументов командной строки</a>.</ul> 
</td></tr>
</table></center>
<p>&nbsp;</p><a name="01"></a>
<p><b><center>Команда Run (Выполнение)<br>Вызов: Ctrl + F9</center></b></p>
<p>Команда Run\Run (Выполнение\Выполнение) осуществляет выполнение вашей программы, используя те аргументы, которые переданы программе с помощью команды Run\Arguments (Выполнение\Аргументы).
<p>Если с момента последней компиляции исходный код был модифицирован, эта команда вызовет также Менеджер Проектов (Project Manager), чтобы рекомпилировать и перекомпоновать вашу программу. 
<br>(Менеджер Проектов представляет собой инструментальное средство создания программ, которое встроено в интегрированную среду).
<p><table align=center width=90% border=1 cellpadding=5 cellspacing=10>
<tr><td class=rule>
<b>Важное замечание:</b> если вы хотите, чтобы все возможности (отладочные) системы Borland C++ были вам доступны, необходимо, чтобы параметр Source Debugging (Отладка на уровне исходного кода) в блоке диалога 
<a href="10_07.htm">Options\Debugger</a> (Параметры\Отладчик) находился в состоянии On (Используется, Задан).
<br>Если вы не собираетесь заниматься отладкой своей программы, можете скомпилировать и скомпоновать, установив селективную кнопку Source Debugging 
<li>в состояние None (Отсутствует), что приведет к более высокой скорости компиляции и компоновки программы.
<li>или в состояние Standalone (Автономная), что высвобождает дополнительную память для выполнения программы.
</td></tr>
</table>
<p>Если во время компиляции программы триггерная кнопка Source Debugging установлена с состояние On (Задано), результирующий выполняемый код будет содержать отладочную информацию, которая будет оказывать влияние на поведение команды Run\Run (Выполнение\Выполнение) следующими способами:
<ol><li>Если вы не модифицировали свой исходный код с момента последней компиляции, то при выборе команды Run\Run (Выполнение\Выполнение) ваша программа будет выполняться до следующей точки приостанова или до конца, если ни одной точки приостанова не было задано.
<li>Если вы модифицировали свой исходный код с момента последней компиляции,
<ul><li>Если вы уже осуществляете пошаговое выполнение вашей программы при помощи команд Run\Step Over (Выполнение\ Переход через вызов функции) или Run\Trace Into (Выполнение \Трассирующее вхождение в функцию), то при выборе команды Run\Run (Выполнение\Выполнение) на экран будет выдан запрос, хотите ли вы осуществить полную рекомпиляцию вашей программы:
<ul><li>Если вы отвечаете Yes (Да), то Менеджер проектов осуществляет рекомпиляцию и компоновку вашей программы и запускает ее от начала;
<li>Если вы отвечаете No (Нет), то ваша программа будет выполняться до очередной точки приостанова или до конца программы, если ни одной точки приостанова не было задано.</ul>
<li>Если вы не проводите отладочный сеанс работы, то Менеджер проектов осуществляет рекомпиляцию и компоновку вашей программы и запускает ее от начала
<br>Нажатие комбинации клавиш Ctrl + Break приводит к тому, что система Borland C++ прекращает выполнение на следующей исходной строке вашей программы.
<br>Если система Borland C++ не может обнаружить строку исходного кода, то повторное нажатие комбинации клавиш Ctrl + Break приводит к завершению программы и возврату в интегрированную среду.
</ul></ol>
<p>&nbsp;</p><a name="02"></a>
<p><b><center>Команда Program Reset (Реинициализация программы)<br>Вызов: Ctrl + F2</center></b></p>
<p>Команда Run\Program Reset (Выполнение\Реинициализация программы) прекращает текущий сеанс отладки, освобождает память, которая была выделена вашей программе и закрывает все открытые файлы, которые использовались в вашей программе.
<br>Этой командой следует пользоваться также в том случае, если вы проводите отладку и обнаруживаете нехватку памяти для выполнения программы переноса или вызова оболочки DOS.
<p>&nbsp;</p><a name="03"></a>
<p><b><center>Команда Go to Cursor (Выполнить до курсора)<br>Вызов: F4</center></b></p>
<p>Команда Run\Go to Cursor (Выполнение\Выполнить до курсора) осуществляет выполнение вашей программы от маркера выполнения (run bar - строки, которая выделена с помощью светового маркера в исходном коде) до той строки, в которой позиционирован курсор в текущем окне редактирования.
<br>Если курсор находится в той строке, которая не содержит выполняемого оператора, выполнение этой команды приводит к выдаче предупреждающего сообщения.
<p>Команда Run\Go to Cursor (Выполнение\Выполнить до курсора) может также использоваться для инициализации сеанса отладки.
<br>Команда Go to Cursor (Выполнить до курсора) не устанавливает постоянно присутствующей точки приостанова, но она позволяет программе остановиться на какой-либо постоянной точке приостанова, если таковая обнаруживается перед той строкой, на которой позиционирован курсор.
<br>Если это происходит, то вам необходимо повторно выбрать команду Go to Cursor (Выполнить до курсора).
<p>Командой Go to Cursor (Выполнить до курсора) следует пользоваться для продвижения маркера выполнения до той части вашей программы, которую вы хотите отладить.
<br>Если вам необходимо, чтобы ваша программа останавливалась бы на определенном операторе каждый раз, когда она достигает этого оператора, вам следует установить на этом операторе точку приостанова.
<br>Следует отметить, что если вы устанавливаете курсор на какой-либо строке исходного кода, которая не выполняется, то ваша программа будет выполняться до очередной точки приостанова или до конца, если ни одной точки приостанова не было обнаружено.
<br>Для прекращения выполнения программы всегда можно воспользоваться комбинацией клавиш Ctrl + Break.
<p>&nbsp;</p><a name="04"></a>
<p><b><center>Команда Trace Into (Осуществить трассирующее вхождение)<br>Вызов: F7</center></b></p>
<p>Команда Run\Trace Into (Выполнение\Осуществить трассирующее вхождение) осуществляет пооператорное выполнение вашей программы.
<br>Когда при пооператорном выполнении достигается вызов какой-либо функции, то будет выполняться каждый оператор этой функции вместо того, чтобы выполнить эту функцию за один шаг (смотрите <a href="#05">Run\Step Over</a> - Выполнение\Одношаговое выполнение функции).
<p>Если в операторе не содержится никаких вызовов функции, которые были бы доступны отладчику, команда Trace Into (Осуществить трассирующее вхождение) прекращает выполнение на следующем выполняемом операторе.
<br>Командой Trace Into (Осуществить трассирующее вхождение) следует пользоваться для перемещения позиции выполнения в функцию, которая вызывается отлаживаемой вами функцией.
<p>Если оператор содержит вызов функции, доступной отладчику, то команда Trace Into 
(Осуществить трассирующее вхождение) останавливается в начале описания функции. 
Последующие вызовы команды Trace Into (Осуществить трассирующее вхождение) или 
Step Over (Одношаговое выполнение функции) приводят к выполнению операторов, 
расположенных в описании функции.
<br>Когда отладчик покидает функцию, он возобновляет выполнение операторов, которые содержатся в вызывающей функции; например,
<pre>		if (func1() && func2())
			do_something();
</pre>
<p>Когда маркер выполнения позиционирован на операторе if, нажатие клавиши F7 приводит к трассирующему вхождению в функцию func1(); при выходе из функции func1() нажатие клавиши F7 приводит к трассирующему вхождению в функцию func2(). Нажатие клавиши F8 приводит к "переходу через" функцию func2() и остановке на функции do_something().
<p><table align=center width=90% border=1 cellpadding=5 cellspacing=10>
<tr><td class=rule>
<b>Примечание:</b> команда Trace Into (Осуществить трассирующее вхождение) распознает только те функции, которые описаны в исходном файле, скомпилированном при условии, что два параметра установлены в состояние On (задано):
<li>в блоке диалога Advanced code generation (Генерация кода) (команда Options\Compiler\Advanced code generation...) должна быть "промаркирована" триггерная кнопка Debug Info in OBJs (Отладочная информация в объектных файлах).
<li>должна быть установлена в состояние On (Задан) селективная кнопка Source Debugging в блоке диалога Options\Debugger (Параметры\Отладчик)).
</td></tr>
</table>
<p>&nbsp;</p><a name="05"></a>
<p><b><center>Команда Step Over (Одношаговое выполнение функции)<br>Вызов: F8</center></b></p>
<p>Команда Run\Step Over (Выполнение\Одношаговое выполнение функции) выполняет 
следующий оператор в текущей функции. Она не осуществляет 
трассирующего вхождения в вызовы функций более низкого уровня, даже в том случае, если они 
доступны отладчику.
<p>Командой Step Over (Одношаговое выполнение функции) следует пользоваться в тех 
случаях, когда необходимо отладить функцию в пооператорном режиме выполнения без 
вхождения в другие функции.
<p>Пример различий в выполнении команд Run\Trace Into (Выполнение\Осуществить 
трассирующее вхождение) и Run\Step Over (Выполнение\Одношаговое выполнение 
функции). Рассмотрим первые 12 строк программы, загруженной в окно редактирования:
<pre>
		int findit (void)		// строка 1
		{ 
			return(2);
		}
		
		void main (void)		// строка 6
		{
			int i,j;
		
			i = findit();	// строка 10
			printf("%d\n", i);	// строка 11
			j = 0; . . .		// строка 12
		}
</pre>
<p>Функция findit является заданной пользователем функцией в модуле, который был скомпилирован с отладочной информацией.
<p>Предположим, что маркер выполнения 
находится на строке 10 программы. Для того, чтобы позиционировать маркер выполнения 
на строку 10, переведите курсор на строку 10 и нажмите клавишу F4, или выберите 
команду Go to Cursor (Выполнить до курсора).
<p>Если теперь вы выберете команду Run\Trace Into (Выполнение\Осуществить 
трассирующее вхождение), маркер выполнения будет перемещен на первую строку 
функции findit (строка 1 вашей программы), что позволяет вам осуществить 
трассировку данной функции.
<br>Если вы выберете команду Run\Step Over (Выполнение\ Одношаговое выполнение 
функции), то будет выполнена функция findit, а возвращаемое ею значение будет 
присвоено переменной i. Затем маркер выполнения будет перемещен к строке 11.
<p>Если маркер выполнения находится на строке 11 программы, то не имеет значения, какую 
именно команду вы выберете; как команда Run\Trace Into (Выполнение\Осуществить 
трассирующее вхождение), так и команда Run\Step Over (Выполнение\ Одношаговое 
выполнение функции) выполнят функцию printf и переместят маркер выполнения на 
строку 12. Это связано с тем, что функция printf не содержит отладочной информации.
<p>&nbsp;</p><a name="06"></a>
<p><b><center>Команда Arguments (Аргументы)</center></b></p>
<p>Команда Run\Arguments (Выполнение\Аргументы) позволяет задавать выполняемой вами 
программе аргументы командной строки в точности так же, как если бы они вводились в 
командной строке DOS. Команды переназначения DOS будут игнорироваться.
<br>Когда вы выбираете данную команду, появляется блок диалога с одним единственным 
блоком ввода.

<p><table align=center width=90% border=1 cellpadding=5 cellspacing=10>
<tr><td class=rule>
<b>Важное замечание:</b> в строку аргументов необходимо ввести только сами аргументы, но не имя программы.
</td></tr>
</table>
<p>Аргументы имеют значение только в момент запуска программы. Если вы уже проводите 
отладку, и хотите изменить аргументы, вам следует выбрать команду Program Reset 
(Реинициализация программы), чтобы перезапустить программу с новыми аргументами 
командной строки.
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=p>&nbsp 11 &nbsp</a></td>
<td><a href="12.htm" class=p>&nbsp 12 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>