<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 04</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=0 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Имена переменных и констант</p>
<p>Каждой программе для работы необходима информация - данные. Данные вводятся в компьютер, он обрабатывает их, следуя нашим инструкциям, затем выдает результат.
<p><i>Исходные (входные)</i> - это данные, известные перед выполнением задачи, из условия.
<br><i>Выходные данные</i> - результат решения задачи.
<br><i>Промежуточные данные</i> - переменные, которые не являются ни аргументом, ни результатом алгоритма, а используются только для обозначения вычисляемого промежуточного значения.
<p>С понятием величины связаны следующие характеристики (атрибуты):
<ul type="disc">
<li><i>имя (идентификатор)</i> - это ее обозначение и место в памяти; 
<li><i>тип</i> - множество допустимых значений и множество применимых операций к ней; 
<li><i>значение</i> - динамическая характеристика, может меняться многократно в ходе исполнения алгоритма. Во время выполнения алгоритма в каждый конкретный момент величина имеет какое-то значение или не определена. 
</ul>
<p>Итак, каждой используемой в программе константе и переменной должно быть присвоено имя.<br>
<i>Для формирования имен</i> констант, переменных, ключевых слов используются:
<ul>
<li>большие и малые буквы латинского алфавита,
<li>арабские цифры,
<li>знак подчеркивания _ .
</ul>
<br>Компилятор C рассматривает одну и ту же большую и малую буквы как разные 
символы. Например, переменные dx_1, Dx_1, dX_1, DX_1 имеют различные имена.
<br>Первым символом в имени может стоять буква или знак подчеркивания _. 
<br>Например: Num, _min, max, sum_7, и так далее.
<p><b>Прежде чем вводить данные, необходимо описать их тип.</b>
<p><i>Тип переменной определяет:</i>
<ul type="disc">
<li>диапазон допустимых значений, принимаемых величинами этого типа;
<li>набор операций, допустимых над данной величиной;
<li>объем памяти, отводимой под эту переменную.
</ul>
<p>Компилятор C должен зарезервировать достаточное количество памяти для хранения введенной информации. Разные типы данных занимают не одинаковый объем памяти. Не все функции языка C могут работать с данными любого типа.
<br>В процессе написания программы необходимо определить все данные, которые будут использоваться, причем сделать это надо и для вводимой информации, и для результата. Данные классифицируются по типу значений, которые они содержат. Значение не обязательно означает числовую величину, но и буквы, слова, фразы.
<p><i>В стандарте языка C используется семь ключевых слов, указывающих на 
различные <b>типы данных</b>:</i>
<ul>
<li>целые числа со знаком int, long, short,
<li>целые беззнаковые константы unsigned,
<li>символы (значения ASCII-кода от 0 до 255) char,
<li>числа с плавающей точкой float, double.
</ul>
<p><i><b>Определить переменную</b> - это, значит, сообщить ее имя и тип компилятору C.</i>
<br><i>Переменной</i> называется величина, значение которой может быть изменено в процессе исполнения алгоритма.
<br>При описании данных достаточно ввести тип, за которым должен следовать список
имен переменных. 
<pre>Например:	int s, g1;     // объявление двух целых переменных
			long rad;		// объявление длинной целой переменной
			char sim = 'Q';    // инициализация символьной переменной
			float z2_c, f2 = 6;    // две вещественные переменные, одна из которых инициализируется
</pre>
<i><b>Определить константу</b> - это, значит, сообщить компилятору C ее имя и значение.</i>
<br>Значение константы не может изменяться в ходе выполнения программы.
<p><u>Первый способ</u>: можно дать константе некоторое имя, определив ее в качестве <i>макроса препроцессора</i>. 
Перед функцией main() помещают директиву <b>#define</b>, имеющую следующий синтаксис:
<blockquote>
#define PI  3.14159265 - Числовое значение не заключается в кавычки
<br>#define NUM 7 - Целочисленные величины не должны иметь десятичной точки
<br>#define NUM 5.0 - Величины с плавающей точкой должны иметь хотя бы по одному разряду слева и справа от точки
<br>#define NUM 0.8 	
<br>#define SIM 'U' - Значение символьной константы должно быть заключено в апострофы
<br>#define STRING "тема" - Значение строки должно быть заключено в кавычки
</blockquote>
<p><u>Второй способ</u> задания констант включает в себя применение ключевого слова <b>const</b>. 
<br>Разновидностью переменных являются <b>типизированные константы</b>. Это переменные, значение которых (заданное при инициализации) 
нельзя изменить. Создание типизированной константы ничем не отличается от инициализации переменной, за исключением того, 
что перед оператором объявления ставится ключевое слово <b>const</b>.
<pre>Например:
		const  double  Pi  =   3.14159265;
<br>		const  int Width = 80, Height = 25;</pre>

<p><i>Чем же будет отличаться данная запись от описанного выше макроса</i>: #define PI  3.14159265 ?

<p><center><table border=1 width="100%">
<tr bgcolor="#C0C0C0"><th width="100%">
ПРИМЕЧАНИЕ
</th></tr>
<tr bgcolor="#F2DBFF"><td>
Здесь следует иметь в виду два момента. 
<br><i>Во-первых</i>, типизированная константа по своему смыслу относится к конкретному типу данных, поэтому компилятор генерирует совершенно определенное представление для ее значения. Представление макроса не определено.
<br><i>Во-вторых</i>, имя символической константы (макроса) значимо только на этапе препроцессорной обработки исходного кода, поэтому компилятор не включает его в отладочную информацию объектного модуля. Вы не можете использовать это имя в выражениях при отладке. Напротив, типизированные константы являются по существу переменными, и их имена доступны отладчику.
<br>В силу этих причин предпочтительнее применять для представления постоянных величин типизированные константы, а не макросы #define.
</td></tr>
</table></center>
<p>Объявления служат для компилятора источником информации о свойствах величин, используемых в программе, и установления связи между этими величина и их идентификаторами, фиксируя тем самым конкретный смысл, предписанный различным идентификаторам в программе.
<p>Согласно объявленным переменным и их количеству компилятор резервирует необходимый объем памяти для хранения значений величин, над которыми выполняются требуемые операции.
<p>&nbsp;</p>
</td>
</tr>
</table>
<!-- -------End of Inside table------- -->

<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>