<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>Обзорная лекция | ООП</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Производные типы данных</p>
<p>В языке С используются типы данных (структуры и объединения), создаваемые программистом для удобства работы с данными разных типов, которые сгруппированы под одним именем.
<br>В языке С++ добавлены классы как расширенное понятие структур.
<p><table width="90%" align = "center">
<tr align="center" valign="top">
 <td colspan=2><font size=4 color="indigo">В языке С</font></td>
 <td><font size=4 color="indigo">В языке С++</font>
</td</tr>
<tr valign="top"><td width="30%"><b>Структуры</b>
<pre>
struct имя_структуры
{
	// поля структуры
	список элементов 
};
</pre>
</td><td width="30%"><b>Объединения</b>
<pre>
union имя_объединения
{
	// поля объединения
	список элементов 
};
</pre>
</td><td><b>Классы</b>
<pre>
ключ_класса имя_класса
{
	// поля (данные) и методы (функции) класса
	список компонентов
} объекты класса, если есть;
</pre>
</td><tr>
</table>
<p><i>ключ_класса</i> - одно из служебных слов class, struct, union;
<br><i>имя_класса</i> - произвольно выбираемый идентификатор;
<br><i>список_компонентов</i> - определения и описания типизированных данных и принадлежащих классу функций.
<p><b>Компонентами класса могут быть:</b> данные, функции, классы, перечисления,
 битовые поля, дружественные функции, дружественные классы, имена типов.
<p>Все компоненты класса в английском языке обозначаются термином <i>member</i> (член, элемент, часть).
<br>Функции, принадлежащие классу, обозначают термином <i>member functions</i>, называют функциями - членами (методами класса или компонентными функциями) и определяют, что может делать класс.
<br>Данные класса имеют название <i>data members</i> - компонентные данные (элементы данных (объектов) класса).
<br>В русском языке терминология, относящаяся к классам, недостаточно устоялась, поэтому имеются многочисленные расхождения. 
<p><b>Классы</b> - это структуры, которые содержат не только объявления данных, но и функций, манипулирующих с этими данными.
<p>Каждый представитель класса (переменная, массив, указатель, ссылка) называется объектом.
<br>Объекты в C++ - это программные конструкции, формируемые так называемыми классами.
<p><b>Объектно-ориентированное программирование</b> - это методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования. 
<p><b>Описание объекта класса:</b>
<p><center>имя_класса имя_объекта;</center>
<p>Если создан класс example, то
<p><center><table border=0 cellpadding=3>
<tr><td>example X1, ex1(55), D;</td><td> &nbsp;</td><td>// Три объекта класса example
</td></tr>
<tr><td>example *point = &D;</td><td> &nbsp;</td><td>// Указатель на объект класса example
</td></tr>
<tr><td>example dim[8];</td><td> &nbsp;</td><td>// Массив объектов класса example
</td></tr>
<tr><td>example &Name = X1;</td><td> &nbsp;</td><td>// Ссылка на объект класса example
</td></tr>
</table></center>
<p>Если тип двух объектов одинаков, то один объект можно присвоить другому, например,  X1 = ex1; При этом сами объекты остаются по-прежнему совершенно независимыми, а их данные одинаковыми. 
<p>Определение объекта класса предусматривает выделение участка памяти и деление этого участка на фрагменты, соответствующие отдельным элементам объекта, каждый из которых отображает отдельный компонент данных класса. 
<br>Место в памяти выделяется именно для элементов каждого объекта класса.
<p>Компонентные функции класса позволяют обрабатывать данные конкретных объектов класса. В отличие от компонентных данных компонентные функции не тиражируются при создании конкретных объектов класса.
<p>Объектно-ориентированное программирование базируется на трех ключевых понятиях:
<ol>
<li><b>Инкапсуляция, пакетирование (Encapsulation)</b> - слияние данных и функций, 
работающих с этими данными, порождающее абстрактные типы данных, 
определяемые пользователем.
<br>Это принцип, позволяющий создавать замкнутые, самодостаточные объекты, которыми можно пользоваться или переносить их в другую программу.
<p><li><b>Наследование (Inheritance)</b> - возможность передачи некоторых свойств одного объекта другому объекту.
<br>Это возможность создавать новые объекты на базе уже существующих, расширяя их возможности за счет новых свойств.
<br>Например, рассмотрим наследование кубом свойств квадрата.
Для вычисления площади квадрата необходимо знать его сторону <b>a</b> и вычислить площадь <b>S&nbsp;=&nbsp;a&nbsp;&#8729;&nbsp;a</b>.
Объем куба <b>V&nbsp;=&nbsp;S&nbsp;&#8729;&nbsp;a</b>,&nbsp; то есть, куб унаследовал площадь квадрата и его сторону.
<p><li><b>Полиморфизм (Polymorphism)</b> - "многоформенность" - способность объекта 
отреагировать на некоторый запрос сообразно своему типу, даже если на стадии 
компиляции тип объекта, к которому направлен запрос, еще не известен.
<br>Это свойство позволяет одно и то же имя использовать для решения двух или 
более схожих, но технически разных задач, для задания общих для класса действий.
<br>Элементарным примером полиморфизма может служить <a href="../s05/03.htm" target="window-1">перегрузка функций</a>.
</ol>
<p align=center class=dbi><br>Спецификаторы доступа</p>
В соответствии с правилами языка C++ все компоненты класса, введенного с помощью 
ключа класса struct или union, являются общедоступными (по умолчанию имеют атрибут 
public), а с помощью class - собственными - private - недоступными для внешних 
обращений. 
<br>Для изменения видимости компонент в определении класса можно 
использовать <b>спецификаторы доступа</b>, одно из трех служебных слов, за которым 
помещается двоеточие:<ul>
<li><b>private</b> (собственный, локальный) - закрытые члены класса (функции и данные). К 
ним имеют доступ только функции - члены данного класса и функции - друзья 
класса.
<p><li><b>public</b> (общедоступный, глобальный) - открытые члены класса. Предназначены для 
обеспечения интерфейса объектов класса с программой, в которой они 
существуют.
<p><li><b>protected</b> (защищенный). Доступны функциям - членам данного класса и 
дружественным функциям производных классов.</ul>
<p>Появление любого из спецификаторов доступа в тексте определения класса означает, что 
до конца определения либо до другого спецификатора доступа все компоненты класса 
имеют указанный статус.
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>