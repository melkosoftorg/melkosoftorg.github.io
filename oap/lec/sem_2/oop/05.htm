<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>Обзорная лекция | ООП</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Полиморфные классы</p>
<p><b>Полиморфизм - многоформенность</b>
<p>Часто при наследовании появляются методы, которые в различных производных 
классах работают по различным алгоритмам, но имеют одинаковые выходные параметры 
и возвращаемое значение. Такие методы называются виртуальными и описываются с 
помощью служебного слова virtual. 
<p><img src=virtual.gif  align="left" HSPACE=30 VSPACE=5 alt="Наследование">
<p>Пусть в игре есть несколько типов монстров.
<br>Все монстры могут:
<br>- атаковать - attack,
<br>- перемещаться - move.
<p>Каждый делает это по своему:
<br>- у кого-то есть только когти,
<br>- у кого-то припрятан гранатомёт.
<p>Методы move и attack можно поместить в базовый для всех монстров класс.
<p><i>Базовый класс - это более общий класс, от него наследуют все производные классы.</i>
<br>Удобно хранить объекты всех этих классов вместе и использовать одинаковый синтаксис для вызова методов всех классов.
<br>Объекты классов должны храниться в одном массиве указателей на базовый тип, так как базовый и производный классы являются совместимыми по типу.
<p>Для поддержки полиморфизма в C++ используются виртуальные функции, которые позволяют использовать одинаковый синтаксис для разных классов.
<p><b>Виртуальные функции</b>
<p><i>Виртуальная функция</i> - это функция, которая может быть переопределена классом-наследником, для того чтобы тот имел свою, отличающуюся, реализацию.
<p>Виртуальные функции объявляются с помощью ключевого слова virtual в базовом классе
<pre>
	virtual тип имя_функции (список_формальных параметров) 
     	{
		тело функции
	} 
</pre>
<p>В языке C++ используется такой механизм, как таблица виртуальных функций для того, чтобы поддерживать связывание на этапе выполнения программы.
<p><i>Виртуальная таблица</i> - статический массив, который хранит для каждой виртуальной функции указатель на ближайшую в иерархии наследования реализацию этой функции.
<p>Для базового класса и для всех производных создается своя виртуальная таблица указателей на функции.
<br>Количество элементов в таблице равно количеству виртуальных методов.
<br>В таблице хранятся фактические адреса методов, определённых в классах. 
<br>В базовом классе объявляется дополнительное поле __vfptr, которое наследуется всеми производными классами - указатель на таблицу виртуальных функций класса.
<br>Когда создаётся объект самого класса или любого производного, в нём __vfptr присваивается адрес таблицы виртуальных функций этого класса (или производных).      

<p><b>Полиморфные классы</b> - классы, включающие виртуальные функции.
<p>Виртуальные функции предоставляют программисту возможность объявить в базовом классе функции, которые можно заместить в каждом производном классе. 
<br>Компилятор и загрузчик гарантируют правильное соответствие между объектами и функциями, применяемыми к ним.
<p><b>Пример.</b> Функция func1 является виртуальной и переопределена в производном классе, а функция func2 просто наследуется производным классом.
<br>Программа иллюстрирует вызов виртуальной и наследуемой функций для объектов базового и производного классов.
<p><table width="100%" align=center>
<tr valign="top" width="80%"><td>
<pre>
	#include&lt;iostream.h&gt;
	#include&lt;conio.h&gt;
	class Base 
	{	public: 
			virtual float func1(float x)
        		{       cout << "Base func1: ";
				return x * x;
			}
			float func2(float x)
			{       cout << "Base func2: ";
        			return func1(x) / 2;
			}
	};
	class Child : public Base
	{	public:
			virtual float func1(float x)
        		{       cout << "Child func1: ";
				return x * x * x;
			}
	};
</pre>
</td><td>
<pre>
<i>Результаты выполнения программы:</i>	
	Объект Base b
	Base func1:	func1 25
	Base func2:	Base func1:	func2 12.5
	
	Объект Child c
	Child func1:	func1 125
        Base func2:	Child func1:	func2 62.5
	
	Указатель *ptb
	Child func1:	func1 8
	Child func1:	func1 8
	
	Вызов ptb -> Base :: func1(2)        
	Base func1:	func1 4
</td></tr>
</table>
<pre>
	main()
	{	clrscr();
		Base b;
        	cout << "Объект Base b" << endl;
		cout << "\tfunc1 " << b.func1(5) << endl;	// на экран выводится 25
		cout << "\tfunc2 " << b.func2(5) << endl << endl;	// на экран выводится 12.5
	
		Child c;
        	cout << "Объект Child c" << endl;
		cout << "\tfunc1 " << c.func1(5) << endl;	// на экран выводится 125
		cout << "\tfunc2 " << c.func2(5) << endl << endl;	// на экран выводится 62.5
	
		// базовый указатель реально ссылается на производный класс
		Base *ptb = new Child;
        	cout << "Указатель *ptb " << endl;
		cout << "\tfunc1 " << ptb -> func1(2) << endl;	// на экран выводится 8
		cout << "\tfunc1 " << c.func1(2) << endl << endl;	// на экран выводится 8

		cout << "Вызов ptb -> Base :: func1(2)" << endl;
		cout << "\tfunc1 " << ptb -> Base :: func1(2) << endl;	// на экран выводится 4
		getch();
	}
</pre>

<p><b>Правила:</b>
<ul type="disc">
<li>Виртуальную функцию нельзя объявить как static.
<li>Спецификатор virtual необязателен при переопределении функции в производном классе.
<li>Виртуальная функция должна быть определена для класса, в котором она впервые объявлена (исключение - чистые виртуальные функции).
<li>Виртуальную функцию можно использовать, даже если у ее класса нет производных классов.
<li>Производный класс, который не нуждается в собственной версии виртуальной функции, не обязан ее реализовывать, можно реализовать требуемую функцию, только если в этом есть необходимость.
<li>Для того чтобы обойти механизм виртуальных функций, при вызове используется имя класса с оператором разрешения области видимости.
</ul>
<p><b>Пример.</b> Рассмотрим абстрактный базовый класс figure (фигура), на базе
 которого можно построить производные классы для реальных фигур (эллипс, окружность,
 квадрат, ромб, прямоугольник, треугольник и т.д.). 
<br>В рассматриваемой программе приведен базовый класс figure и производные
 классы Circle (окружность) и RecTangle (прямоугольник).
<pre>
	#include&lt;iostream.h&gt;
	#include&lt;conio.h&gt;
	#include&lt;math.h&gt;
	/*
	   Обозначения:
	   n - количество сторон фигуры, для окружности n = 1
	   p - массив длин сторон фигуры, для окружности в p хранится радиус
	*/
	// Базовый класс figure.
	class figure
	{	public:
			int n;
			float *p;
			figure();		// конструктор
			float perimetr();	// периметра фигуры
			virtual float square();	// площади фигуры
			// Вывод информации о фигуре: название, периметр, площадь и т.д.
			virtual void show_parametri();
	};
	// Конструктор класса figure
	figure :: figure()
	{	cout << "Конструктор класса figure" << endl;
	}
	// Метод вычисления периметра будет перегружаться только в классе Circle
	float figure :: perimetr()
	{	int i;
		float psum;
		for(psum = 0, i = 0; i < n; psum += p[i], i++);
		return psum;
	}
	// Абстрактный метод вычисления площади, в каждом классе
	// будет перегружаться реальным методом
	float figure :: square()
	{	cout << "S - Абстрактный метод figure" << endl;
		return 0;
	}
	// Метод вывода информации о фигуре будет перегружаться
	// в каждом производном классе
	void figure :: show_parametri()
	{	cout << "Абстрактная figure";
	}
	// Производный класс Circle (окружность)
	class Circle : public figure
	{	public:
			Circle();	// конструтор
			// Перегружаемые методы
			float perimetr();
			virtual float square();
			virtual void show_parametri();
	};
	// Конструктор класса Circle
	Circle :: Circle()
	{	cout << "Параметры окружности" << endl;
		n = 1;
		p = new float[n];
		cout << "\tРадиус = "; cin >> p[0];
	}
	// Метод вычисления L периметра (длины) окружности
	float Circle :: perimetr()
	{	return 2 * M_PI * p[0];
	}
	// Метод вычисления S площади окружности
	float Circle :: square()
	{	return M_PI * p[0] * p[0];
	}
	// Метод вывода параметров окружности
	void Circle :: show_parametri()
	{	cout << "Окружность" << endl;
		cout << "\tR = " << p[0] << endl;
		cout << "\tL = " << perimetr() << endl;
		cout << "\tS = " << square() << endl;
	}
	// Производный класс RecTangle (прямоугольник)
	class RecTangle : public figure
	{	public:
			RecTangle();	// конструктор
			// Перегружаемые методы
			virtual float square();
			virtual void show_parametri();
	};
	// Конструктор класса RecTangle
	RecTangle :: RecTangle()
	{	cout << "Параметры прямоугольника" << endl;
		n = 4;
		p = new float[n];
		cout << "\tСтороны: a = "; cin >> p[0];
		cout << "\t\tb = "; cin >> p[1];
		p[2] = p[0];
		p[3] = p[1];
	}
	// Метод вычисления площади прямоугольника.
	float RecTangle :: square()
	{	return p[0] * p[1];
	}
	// Метод вывода параметров прямоугольника
	void RecTangle :: show_parametri()
	{
		cout << "Прямоугольник" << endl;
		cout << "\ta = " << p[0] << "\tb = " << p[1] << endl;
		// Классе RecTangle вызывает метод perimetr() класса figure
		cout << "\tP = " << perimetr() << endl;
		cout << "\tS = " << square() << endl;
	}
	void main()
	{
		clrscr();
		Circle RR;
		RR.show_parametri();
	
		RecTangle PP;
		PP.show_parametri();
		getch();
	}
	<i>Результаты выполнения программы:</i>	
			Конструктор класса figure
			Параметры окружности
			        Радиус = 4.98
			Окружность
			        R = 4.98
			        L = 31.29
			        S = 77.91
			Конструктор класса figure
			Параметры прямоугольника
			        Стороны: a = 34.98
			                b = 5.85
			Прямоугольник
			        a = 34.98       b = 5.85
			        P = 81.66
			        S = 204.63
</pre>      
<p><b>Необходимо знать</b>
<ul type="disc">
<li>Полиморфный объект может изменять форму во время выполнения программы. 
<li>Полиморфные объекты создают, используя классы, порожденные от существующего базового класса. 
<li>В базовом для полиморфного объекта классе должна быть определена одна или несколько виртуальных функций - virtual. 
<li>В общем случае полиморфные объекты отличаются использованием виртуальных функций базового класса. 
<li>Для создания полиморфного объекта необходимо создать указатель на объект базового класса. 
<li>Для изменения формы полиморфного объекта направить указатель на различные объекты, присваивая новый адрес объекта указателю на полиморфный объект.
</ul>
      
<p> &nbsp; </p>
</td> 
</tr> 
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>