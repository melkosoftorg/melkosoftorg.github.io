<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>Обзорная лекция | ООП</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=a>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Друзья классов</p>
<p><b>Дружественные функции</b>
<p><i>Дружественная функция класса</i> - функция, которая, не являясь его компонентом, имеет доступ к его защищенным и собственным компонентам.
<p><i>Для получения прав друга</i> функция должна быть описана в теле класса со спецификатором friend.
<p><i>Место размещения прототипа дружественной функции</i> внутри определения класса безразлично, права ее доступа не зависят от спецификаторов доступа.
<p>Дружественная функция не имеет указателя this класса, в котором она объявлена как дружественная.
<p>Дружественная функция может быть компонентной функцией другого ранее определенного класса.
<p>Функция может быть дружественной по отношению к нескольким классам. В этом случае надо добавить friend-описание во все классы, к внутренним данным которых будет производиться обращение.
<pre>
	class CL2;		// Предварительное неполное определение класса 
	class CL1 { friend void ff(CL1,CL2); ... };
	class CL2 { friend void ff(CL1,CL2); ... };
	void ff(...) { тело функции }
</pre>
<p><b>Пример.</b> Дружественная функция comD(MCl x) в качестве аргумента
 получает объект класса MCl, то есть два целых числа, и возвращает значение
 общего множителя или 0, если общего множителя нет.
<br>Дружественная функция comD(MCl x) описана в классе MCl как дружественная и
 определена как обычная глобальная функция вне класса без указания его имени,
 без операции :: и без спецификатора friend. Как дружественная, она получает
 доступ к собственным данным класса.
<pre>
	#include&lt;iostream.h&gt;
	#include&lt;conio.h&gt;
	class MCl
	{	private:
			int a, b;
		public:
			MCl(int i, int j)
			{	a = i;
				b = j;
			}
			friend int comD(MCl x);
	};
	// определение дружественной функции право прямого доступа к данным класса
	int comD(MCl x)
	{	int min = (x.a < x.b) ? x.a : x.b;
		for(int i = 2; i <= min; i++)
		{
			if((x.a % i) == 0 && (x.b % i) == 0)
				return i;
		}
		return 0;
	}
	void main()
	{	clrscr();
		MCl n(18, 111);		// создан объект
		// функция вызывается обычным образом, без привязки к объекту
		if(comD(n))
			cout << "Общий множитель " << comD(n);
		else
			cout << "Общего множителя нет";
		getch();
	}
	<i>Результаты выполнения программы:</i>
				Общий множитель 3
</pre>
<p><b>Дружественный класс</b>
<p>Класс может быть дружественным другому классу. Это означает, что все компонентные функции класса являются дружественными для другого класса.
<p>Дружественный класс должен быть определен вне тела класса, "предоставляющего дружбу". 
<p>Описание дружественного класса:
<p><center>friend class имя_класса;</center>
<p>Дружественный класс может быть определен позже (ниже), нежели описан как дружественный.
<pre>
	class X2
	{	friend class X1;
		... 
	};
	class X1
	{	... 
		void f1(...);
		void f2(...);
		...
	};
</pre>
<p><b>Пример.</b> В классе A функция void FriendToB() является дружественной
 для класса B.
<br>Для класса C класс A является другом, то есть все компонентные функции
 являются его другом и имеют доступ к собственным данным класса C.

<pre>
	#include&lt;iostream.h&gt;
	#include&lt;conio.h&gt;
	class A
	{	public:
			A()
			{	cout << "Конструктор A\n";
			}
			void FriendToB();	// дружественная для класса B
			void SomeFunction();
	};
	class B
	{	private:
			int i, j;
		public:
			B()
			{	i = 10; j = 17; cout << "Конструктор B\n";
			}
			// дружественная - функция-член класса A
			friend void A :: FriendToB();
	};
	class C
	{	private:
			int k, n; 
		public:
			C() { k = 4; n = 7; cout<<"\n\nКонструктор C\n"; }
			// ВСЕ функции-члены класса A, являются
			// дружественными для класса C
			friend class A;
	};
	// Проверка: действительно ли функции-члену одного
	// класса доступны закрытые данные другого класса
	void A :: FriendToB()
	{	B example; // экземпляр класса B
		cout << "Доступ к данным в FriendToB():\n";
		cout << "example.i = " << example.i;
		cout << "\nexample.j = " << example.j << endl;
	}
	void A :: SomeFunction()
	{	C temp;    // экземпляр класса С
		cout << "Друг класса C friend class A...\n";
		cout << "temp.k = " << temp.k;
		cout << "\ntemp.n = " << temp.n << endl;
	}
	void main()
	{
		clrscr();
		A test;		// экземпляр класса А
		// тестирование функции, дружественной классу B
		test.FriendToB();
		// все ли функции-члены класса A являются дружественными классу С
		test.SomeFunction();
		getch();
	}
	<i>Результаты выполнения программы:</i>
</pre>
<p><table width="90%" align="center">
<tr valign="top"><td width="45%">Конструктор A
</td><td><i>Команда A test;</i>
<br>Создан объект test класса A и вызван его конструктор.
</td></tr>

<tr valign="top"><td>Конструктор B
<br>Доступ к закрытым данным в FriendToB():
<br>example.i = 10
<br>example.j = 17
</td><td><i>Команда test.FriendToB();</i>
<br>В теле функции FriendToB() класса A создается объект example класса B и
 вызывается его конструктор.
<br>Затем выводятся значения собственных компонентных данных класса B.
</td></tr>

<tr valign="top"><td>Конструктор C
<br>Друг класса C friend class A...
<br>temp.k = 4
<br>temp.n = 7
</td><td><i>Команда test.SomeFunction();</i>
<br>В теле функции SomeFunction() класса A создается объект temp класса C и
 вызывается его конструктор.
<br>Затем выводятся значения собственных компонентных данных класса C.
</td></tr>
</table>
<p><b>Необходимо знать</b>
<ul type="disc">
<li>Использование в программах на C++ друзей позволяет одному классу обращаться к собственным элементам другого класса напрямую, используя оператор точку. 
<li>Для объявления одного класса другом другого класса необходимо внутри определения этого другого класса указать ключевое слово friend, за которым следует имя первого класса. 
<li>После объявления класса другом по отношению к другому классу, все функции-элементы класса-друга могут обращаться к частным элементам этого другого класса. 
<li>Чтобы ограничить количество дружественных методов, которые могут обращаться к собственным данным класса, C++ позволяет указать дружественные функции.
<li>Для объявления функции-друга достаточно указать ключевое слово friend, за которым следует прототип функции. 
<li>Если необходимо сообщить компилятору, что идентификатор представляет имя класса, который программа определит позже, можно использовать оператор:
class&nbsp;&nbsp;имя_класса;
</ul>
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=a>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>