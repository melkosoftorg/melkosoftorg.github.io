<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 30</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Определение многомерного массива</p>
<p>В многомерном массиве используется сразу несколько индексов: двумерный массив имеет два индекса, трехмерный - три, и так далее.
Количество измерений массива в языке C не ограничено, но имеется ограничение на общий размер массива.
<p><b><i>Многомерный массив</i></b> в соответствии с синтаксисом языка <b><i>есть массив массивов</i></b>, то 
есть массив, элементами которого служат массивы.
<p><b><i>Определение многомерного массива</i></b> в общем случае должно содержать сведения о типе, 
размерности и количествах элементов каждой размерности:
<pre>		<b>тип имя_массива[K<sub>1</sub>][K<sub>2</sub>]...[K<sub>n</sub>]</b></pre>
<p>Например:
<ul>
<li type="disc">при написании программы, играющей в шашки, потребуется шашечная доска размером 8 на 8, которую можно представить в программе как двумерный массив: int checker[8][8];
<li type="disc">int arr[4][3][6]; - трехмерный массив состоит из четырех элементов, каждый из 
которых - двумерный массив с размерами 3 на 6. Представить его себе можно в виде куба.
<li type="disc">четырехмерные и большей размерности массивы уже с трудом поддаются воображению.
</ul>
<p>Имя массива должно быть уникальным. Его нельзя использовать для другого массива, переменной, константы, функции и так далее.
<p>При объявлении массива количество элементов можно указывать литеральной константой, созданной с помощью директивы #define
<pre>
		#define S 5
		#define K 7
		#define L 8
	или
		const int S = 5, K = 7, L = 8;
	
		float con[S][K][L];
</pre>
<p>Все массивы независимо от их размерности располагаются в памяти последовательно.
<p>При инициализации массива списком значения присваиваются по порядку элементам массива, причем первым пробегается последний индекс массива.
<br>Инициализация списком трехмерного массива
<pre>
	int mas[2][2][2] = {2, 4, 1, 5, 8, 0, 9, 3};
</pre>
<p>эквивалентна следующим операторам присваивания:
<pre>
	mas[0][0][0] = 2;	mas[0][0][1] = 4;	mas[0][1][0] = 1;	mas[0][1][1] = 5;
	mas[1][0][0] = 8;	mas[1][0][1] = 0;	mas[1][1][0] = 9;	mas[1][1][1] = 3;
</pre>
<p>При инициализации многомерных массивов списком можно код сделать понятнее, введя дополнительные скобки для группировки начальных значений, а также располагая группы в отдельных строках.
<pre>
	int mas[2][2][2] = { { 2, 4 }, { 1, 5 }, { 8, 0 }, { 9, 3 } };
</pre>
<p>При выделении динамической памяти для массива его размеры должны быть полностью определены:
<pre>
	long (*lp) [2][4];		// определить указатель
	lp = new long [3][2][4];	// выделить память для массива
	delete [] lp;		// освободить память
</pre>
<p>Только первый (самый левый) размер массива может быть задан с помощью переменной, остальные размеры многомерного массива могут быть определены только с помощью констант.
<p>Обойти указанное ограничение позволяет применение массивов указателей, как показано в программе. 
<p>В приведенной ниже программе количество строк. столбцов, элементов массива являются переменными, а не константами, и вводятся с клавиатуры.
<br>Тем не менее:
<ul type="disc">
<li><i>массивы формируются:</i><br>двумерный a[l][k],<br>одномерный s[l];
<li><i>массивы заполняются целочисленными данными:</i><br>a[l][k] - случайными числами в диапазоне от 0 до 9,<br>s[l] - суммой значений каждой стороки;
<li><i>массивы выводятся на экран;</i>
<li><i>память, выделенная под массивы, освобождается</i>, массивы уничтожаются.
</ul>
<pre>
	// динамическое выделение памяти
	#include&lt;stdlib.h>
	#include&lt;conio.h>
	#include&lt;iostream.h>
	void main(void)
	{
		clrscr(); randomize();
		int  i, j, k, l;
		long **a, *s;		// Указатели
		cout << "Столбцов "; cin >> k;
		a = new long *[k];		// Массив указателей long *
		cout << "Строк "; cin >> l;
		s = new long [l];
		for(i = 0; i < l; i++)
		{
			s[i] = 0; cout << i << '\t';
			a[i] = new long [l];
			for(j = 0; j < k; j++)
			{
				a[i][j] = random(10);
				cout << a[i][j] << ' ';
				s[i] += a[i][j];
			}
			cout << '\t' << s[i] << endl;
		}
		delete [] a; delete [] s;
		getch();
	}
</pre>

<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>