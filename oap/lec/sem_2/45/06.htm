<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 45</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Множественное наследование и виртуальные базовые классы</p>
Класс называют непосредственным (прямым) базовым классом (прямой базой),
если он входит в список базовых при определении класса.
<p>Для производного класса могут существовать косвенные или непрямые предшественники, 
которые служат базовыми для классов, входящих в список базовых. <p><i>Если некоторый класс 
&nbsp; <b>A</b> &nbsp; является базовым для &nbsp; <b>B</b> &nbsp; и &nbsp; <b>B</b> &nbsp; есть база для &nbsp; <b>C</b>, &nbsp; то класс <b>B</b> является непосредственным 
базовым классом для &nbsp; <b>C</b>, &nbsp; а класс &nbsp; <b>A</b> &nbsp; - непрямой базовый класс для &nbsp; <b>C</b>.</i>
<br>Обращение к компоненту &nbsp; <b><i>ха</i></b> &nbsp; класса &nbsp; <b><i>A</i></b>, &nbsp; унаследованному последовательно классами &nbsp; <b><i>B</i></b> &nbsp; и &nbsp; <b><i>C</i></b> &nbsp; в классе &nbsp; <b><i>C</i></b>:
<br><center><b>A :: ха</b> &nbsp; &nbsp; или &nbsp; &nbsp; <b>B :: ха</b></center>
<br>Иерархию производных классов удобно представлять с помощью направленного 
ациклического графа (НАГ), где стрелкой изображают отношение "производный от". 
<p><center><img src="l47_01.gif"></center>
<br>Производные классы принято изображать ниже базовых. Именно в таком порядке их 
объявления рассматривает компилятор и их тексты размещаются в листинге программы. 
<p>Класс может иметь несколько непосредственных базовых классов, то есть может быть 
порожден из любого числа базовых классов:
<pre>
	class X1 { ... };
	class X2 { ... };
	class X3 { ... };
	class Y1 <b>:</b> public X1, public X2, public X3 { ... };
</pre>
<b><i>Наличие нескольких прямых базовых классов называют множественным наследованием.</i></b> 
<p>В следующей программе класс Derive является производным классов Base_1 и Base_2. Каждый из базовых классов, а также производный класс содержит свой конструктор.
<p>В теле функции main() объявлен объект <i>Derive my_d(3, 5, 7);</i> и в результате будут вызваны конструкторы базовых и производного классов.
<p>В строке <i>Derive :: Derive(int X, int Y, int Z) : Base_1(X, Y), Base_2(Z)</i> - заголовке конструктора производного класса - указаны имена базовых классов.
Согласно принятому в C++ соглашению сначала последовательно вызываются конструкторы базовых классов в соответствии с их появлением в списке.
То есть, сначала будет вызван кнструктор Base_1 и затем конструктор Base_2. После исчерпания списка вызывается конструктор производного класса.
<br>Выполнение деструкторов осуществляется в обратном порядке.
<pre>
	#include&lt;iostream.h>
	#include&lt;conio.h>
	// Базовые классы Base_1 и Base_2
	class Base_1
	{	int a;
		protected:
			int b;
		public:
			Base_1(int x, int y);
			~Base_1();
			void show1(void)
			{ cout << "a = " << a << ";  b = " << b; }
	};
	class Base_2
	{	protected:
			int c;
		public:
			Base_2(int x);
			~Base_2();
			void show2(void)
			{ cout << "; c = " << c << "\n"; }
	};
	// Производный от Base_1 и Base_2 класс Derive
	class Derive : public Base_1, public Base_2
	{	int p;
		public:
			Derive(int X, int Y, int Z);
			~Derive();
			void show3(void)
			{ cout << "a + b + с = " << p + b + c; }
	};
	// Конструктор и деструктор базового класса Base_1
	Base_1 :: Base_1(int  x, int y)
	{	a = x;  b = y;
		cout << "\nконструктор Base_1";
	}
	Base_1 :: ~Base_1()
	{	cout << "\nдеструктор Base_1";
		getch();
	}
	// Конструктор и деструктор базового класса Base_2
	Base_2 :: Base_2(int x)
	{	c = x;
		cout << "\nконструктор Base_2";
	}
	Base_2 :: ~Base_2()
	{
		cout << "\nдеструктор Base_2";
	}
	// Конструктор и деструктор производного класса Derive
	Derive :: Derive(int X, int Y, int Z) : Base_1(X, Y), Base_2(Z)
	{	p = X;
		cout << "\nконструктор Derive\n";
	}
	Derive :: ~Derive()
	{
		cout << "\nдеструктор Derive";
	}
	void main(void)
	{	clrscr();
		Derive my_d(3, 5, 7);
		my_d.show1(); my_d.show2(); my_d.show3();
	}
	<i>Результаты выполнения программы:</i>
			конструктор Base_1
			конструктор Base_2
			конструктор Derive
			a = 3;  b = 5; c = 7
			a + b + с = 15
			деструктор Derive
			деструктор Base_2
			деструктор Base_1
</pre>


<p>Рассмотрим производный класс "окружность, вписанная в квадрат". <br>Базовыми классами 
будут: окружность (circ) и квадрат (square). Их определения:
<pre>
	// CIRC.CPP - определение класса "окружность"
	class circ
	{	int xc, yc, rc;			// Координаты центра и радиус окружности
		public:	circ(int xi, int yi, int ri)	// Конструктор:
			{ xc = xi; yc = yi; rc = ri; }
			void show()		// Изобразить окружность на экране:
			{ circle(xc, yc, rc); }
			void hide()		// Убрать изображение окружности:
			{	int bk, cc;
				bk = getbkcolor();	// Цвет фона
				cc = getcolor();	// Цвет изображения
				setcolor(bk);	// Сменить цвет рисования
				circle(xc, yc, rc);	// Рисуем окружность цветом фона:
				setcolor(cc);	// Восстановить цвет изображения:
			}
	};

	// SQUARE.CPP - определение класса "квадрат"
	class square
	{	int xq, yq,			// Координаты центра квадрата
			lq;			// Длина стороны квадрата
		void rissquare(void)		// Вспомогательная функция рисования:
		{	int d = lq / 2;
			line (xq - d, yq - d, xq + d, yq - d); line (xq - d, yq + d, xq + d, yq + d);
			line (xq - d, yq - d, xq - d, yq + d); line (xq + d, yq - d, xq + d, yq + d);
		}
		public:	square (int xi, int yi, int li)	// Конструктор:
			{ xq = xi; yq = yi; lq = li; }
			void show()		// Изобразить квадрат на экране:
			{ rissquare(); }
			void hide()		// Убрать с экрана изображение квадрата:
			{	int bk, cc;
				bk = getbkcolor();	// Цвет фона
				cc = getcolor();	// Цвет изображения
				setcolor(bk);	// Сменить цвет рисования
				rissquare();	// Рисуем квадрат цветом фона
				setcolor(cc);	// Восстановить цвет изображения
			}
	};
</pre>
В программе на основе классов circ и square создан производный класс "окружность в 
квадрате" с именем circsqrt (окружность в квадрате - множественное наследование).
<pre>
	#include&lt;graphics.h>
	#include&lt;conio.h>
	#include&lt;stdio.h>
	#include&lt;stdlib.h>
	#include "..\\h\\init.h"
	#include "square.cpp"		// Определение класса "квадрат"
	#include "circ.cpp"		// Определение класса "окружность"
	// Класс circsqrt наследует только методы базовых классов, но не данные.
	class circsqrt : public circ, public square
	{	public:
			circsqrt(int xi, int yi, int ri):	// Конструктор:
			// Явно вызываются конструкторы базовых классов
			circ(xi, yi, ri),		
			square(xi, yi, 2 * ri) {}
			void show(void)		// Изобразить на экране окружность в квадрате:
			{ circ <b>::</b> show(); square <b>::</b> show(); }
			void hide()		// Убрать с экрана изображение:
			{ square <b>::</b> hide(); circ <b>::</b> hide(); }
	};
	void main()
	{	init();
		circsqrt A1(100, 100, 60), F4(400, 300, 50);
		A1<b>.</b>show(); getch(); F4<b>.</b>show(); getch();
		F4<b>.</b>hide(); getch(); A1<b>.</b>hide(); getch(); closegraph();
	}
</pre>
Определения базовых классов должны предшествовать их использованию в качестве 
базовых. <br>В производном классе circsqrt телом конструктора служит пустой оператор. 
Выполнение конструктора circsqrt () сводится к последовательному вызову конструкторов 
базовых классов.
<p>В основной программе формируются два объекта A1, F4 класса circsqrt. Они 
последовательно выводятся на экран дисплея и в обратном порядке убираются с экрана.
<p>При множественном наследовании никакой класс не может больше одного раза 
использоваться в качестве непосредственного базового. Однако класс может больше 
одного раза быть непрямым базовым классом:
<pre>
	class X { ...; f(); ... };
	class Y <b>:</b> public Х { .. .};
	class Z <b>:</b> public X { ... };
	class D <b>:</b> public Y, public Z { ... };
</pre>
То есть класс X дважды опосредованно наследуется классом D.
<p><b><i>Программу "окружность в квадрате" тоже можно использовать для получения 
изображения движущегося объекта новой формы "квадрат в круге"</i></b>, внеся изменения в 
базовые классы, а также присоединить к нему уже полученный с помощью класса spot 
объект. <p>Для этого можно предпринять следующие действия:<ul>
<li>Добавить определение класса spot &nbsp; &nbsp; #include "spot.cpp"
<li>В теле функции main() можно, например, создать, показать, переместить объект класса 
<pre>
	spotspot A(400, 100, 40); A<b>.</b>show(); delay(200); A<b>.</b>move(100, 320);
</pre>
А также заставить перемещаться "квадрат в круге", например, следующим образом:
<pre>
	for(i = 0; i < 15; i += 2)
	{	circsqrt A1(550 - 30 * i, 400 - 20 * i, 60);
		A1<b>.</b>show(); A1<b>.</b>hide(); delay(200);
	}
</pre>
<li>В классе class circ можно внести изменения в функции класса, чтобы получить цветное изображение
<pre>
	void show()
	{	setfillstyle(1, 2); circle(xc, yc, rc);
		floodfill(xc, yc, getcolor());
	}
	void hide()
	{	int bk, cc;
		bk = 4; cc = 0; setcolor(bk); circle(xc, yc, rc); setcolor(cc);
	}
</pre>
<li>В классе class square можно позаботиться о цвете и изменении изображения, для чего 
добавить программный код в тело функции void rissquare(void)
<pre>
	setfillstyle(9, 9); floodfill(xq, yq, getcolor());
	d = lq / 4; line (xq - d, yq - d, xq + d, yq - d); line (xq - d, yq + d, xq + d, yq + d);
	line (xq - d, yq - d, xq - d, yq + d); line (xq + d, yq - d, xq + d, yq + d);
	setfillstyle(9, 7); floodfill(xq, yq, getcolor());
</pre>
и изменить функцию
<pre>
	void hide()
	{	int bk, cc;
		bk = 14; cc = 11; setcolor(bk); rissquare(); setcolor(cc);
	}
</pre>
<li>Внести изменения в класс class circsqrt. <br>Можно, например, в вызове конструктора 
базового класса уменьшить размер прямоугольника, убрав умножение на 2:
<pre>
	circsqrt(int xi, int yi, int ri) <b>:</b> circ(xi, yi, ri), square(xi, yi, ri)
</pre>
Порядок вызова из функций void show(void) и void hide() класса class circsqrt функций 
для построения и уничтожения изображения  на экране влияет на вид объекта. 
Попробуйте поменять их местами, например в функции 
<pre>
	void hide()
	{ circ <b>::</b> hide(); square <b>::</b> hide(); }
</pre>
</ul>
Рассмотрим программу, в которой определен класс spotelli - круглое пятно, вписанное в 
эллипс. Класс spotelli непосредственно базируется, на классах spot и ellips, каждый из 
которых базируется, в свою очередь, на классе point. <br>Таким образом, point дважды входит 
в spotelli в качестве непрямого базового класса, то есть дублируется. На базе класса point 
можно определить класс "эллипс":
<pre>
	// ELLIPS.CPP - класс "эллипс"
	#ifndef ELLIPS
	#define ELLIPS 1
	#include "point.cpp"		// Определение класса point
	class ellips <b>:</b> public point
	{	protected:
			int rx, ry;		// Радиусы эллипса
		public:
			ellips (int xc, int yc, int rx, int ry) <b>:</b> point (xc, yc)	// Конструктор:
			{ this -> rx = rx; this -> ry = ry; }
			void show()	// Изобразить на экране эллипс
			{ ellipse(x, y, 0, 360, rx, ry); return; }
			void hide()	// Убрать с экрана изображение эллипса:
			{	int cc, bk;
				cc = getcolor() ; bk = getbkcolor(); setcolor (bk) ;
				ellipse(x, y, 0, 360, rx, ry); setcolor(cc) ;
			}
	};
	#endif
</pre>
В классе ellips конструктор предусматривает задание четырех параметров:<ul><li>координаты 
центра (xc, yc),<li>радиусы вдоль осей (rх, ry).</ul> Координаты xc, yc используются в качестве 
параметров при вызове конструктора базового класса point. <br>Чтобы различить компоненты 
rх, ry класса ellips и обозначенные теми же идентификаторами формальные параметры 
конструктора, используется указатель this.<br>В классе ellips две общедоступные функции 
<ul><li>show() - изобразить эллипс на экране дисплея;<li>hide() - убрать с экрана изображение 
эллипса.</ul><p>Рассмотрим построение изображения "круглое пятно в эллипсе" - множественное 
наследование с дублированием базовых классов (дублируется класс point).
<pre>
	#include&lt;graphics.h>
	#include&lt;conio.h>
	#include&lt;stdio.h>
	#include&lt;stdlib.h>
	#include "..\\h\\init.h"
	#include "spot.cpp"
	#include "ellips.cpp"
	// Производный класс - дважды косвенно наследующий класс point:
	class spotelli <b>:</b> public spot, public ellips
	{	int min(int value1, int value2)	// Вспомогательная функция:
		{ return ( (value1 < value2) ? value1 <b>:</b> value2); }
		public:				// Конструктор:
			spotelli(int xi, int yi, int rx, int ry) <b>:</b> ellips(xi, yi, rx, ry), spot(xi, yi, min(rx, ry)) {}
			void show()		// Вывести изображение на экран дисплея:
			{ spot <b>::</b> show(); ellips <b>::</b> show(); }
			void hide()		// Убрать изображение с экрана дисплея
			{ spot <b>::</b> hide(); ellips <b>::</b> hide(); }
	};
	void main()
	{	init();
		{	spotelli A1(100, 100, 20, 80), F4(400, 300, 230, 100);
			A1<b>.</b>show(); getch(); F4<b>.</b>show(); getch();
			F4<b>.</b>hide(); getch(); A1<b>.</b>hide();
		} closegraph();
	}
</pre>
В классах ellips, spot и spotelli наследуются координаты точки (х, y) класса point. В классе 
point они определены как защищенные (protected) и сохраняют тот же статус доступа в 
производных классах, где определяют координаты центров: пятна (класс spot), эллипса 
(класс ellips) и эллипса с пятном (класс spotelli).
<p>Конструктор класса spotelli не выполняет никаких дополнительных действий - 
последовательно вызываются конструкторы класса ellips и класса spot, центры 
создаваемых фигур совпадают, в качестве радиуса пятна выбирается меньший из радиусов 
эллипса. <p>Используемая в программе функция min() определена по умолчанию как 
встроенная (inline) собственная (private) функция класса spotelli.
<p>Изменения, внесенные в класс spot для построения движущегося изображения, повлечет 
за собой изменение формы и цвета изображения в данной программе.
<p>Чтобы отличать одинаково обозначенные функции, унаследованные классом spotelli из 
классов spot и ellips, при вызове show() и hide () используются полные 
квалифицированные имена, в которых применена операция <b>::</b> .
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>