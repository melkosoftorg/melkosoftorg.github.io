<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>Лекция | Структуры</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Доступ к членам структуры</p>

<p>Отдельные элементы структуры могут использоваться точно так же, как простые переменные тех же типов.
Чтобы извлечь их значения из структуры, применяется знак операции обращения к элементу структуры <b>.</b> (точка), представляющий собой точку между именем структуры и именем элемента-поля.
<p>Доступ к отдельному члену структуры осуществляется через уточненное имя посредством конструкции вида:
<pre>		имя_структуры.имя_элемента_структуры</pre>
<p><b>.</b> - оператор доступа к члену структуры (точка) соединяет имя структуры и имя элемента структуры.
<p>Элемент структуры обладает правами объекта того типа, который указан в определении 
структурного типа.
<p><b><i>Программы иллюстрируют определение простых структур и доступ к элементам структуры.</i></b>
<p><u><i>Элементы структуры - простые переменные</i></u> для хранения координат точки.
<pre>
	#include&lt;conio.h&gt;
	#include&lt;iostream.h&gt;
	void main()
	{
		// Объявление шаблона структуры point
		struct point 
		{
			int x, y;
		};
		// Использование шаблона для объявления экземпляра типа point
		struct point pt;
		// Объявление и инициализация экземпляра структуры типа point
		struct point maxpt = {320, 200}; 
		// Доступ к элементам (полям) структуры
		cout << maxpt.x << "   "  <<  maxpt.y << endl;
		// Инициализация объекта pt значением объекта maxpt
		pt = maxpt;
		cout << pt.x << "   "  <<  pt.y << endl;
		getch();
	}
	Результаты
			320	200
			320	200
</pre>
<p><u><i>Элементами структур могут быть массивы.</i></u>
<br>При обращении к отдельному элементу массива, являющемуся полем структуры, необходимо указывать индекс элемента.
<pre>
	#include&lt;conio.h&gt;
	#include&lt;iostream.h&gt;
	void main()
	{
		// Объявление и инициализация структуры
		struct
		{
			float z[2];
			unsigned char f[15];
			unsigned char i[15];
		} fio = { {1543.87, 234.6}, "Иванов", "Петр"};

		cout << fio.f << ' ' << fio.i << " - " << fio.z[0] << endl;
		cout << fio.f[5] << ' ' << fio.i[2] << ' ' << fio.z[1] << endl;
		getch();
	}
	Результаты
			Иванов Петр - 1543.869995
			в т 234.600006
</pre>
<p><u><i>Указатели - поля структур</i></u> объявляются так же, как любые указатели, не являющиеся членами структур.
<br>Определим и создадим структуру, в которой элементами являются указатели.
<pre>
		struct data
		{
			int *val;
			int *rat;
		} first;
</pre>
<p>Объявить указатели недостаточно, их необходимо инициализировать адресами переменных типа int.
<pre>
		int cost, interest;
		first.val = &cost;
		first.rat = &interest;
</pre>
<p><table align=center width=90% border=1 cellpadding=5 cellspacing=10>
<tr><td class=rule>
<b>Внимание:</b> Если не инициализировать указатель, то можно случайно затереть информацию в памяти, предназначенную для чего-то важного.
Поэтому, используя указатели вместо массивов, выполняйте их корректную инициализацию.
Это можно проделать или с помощью динамического выделения памяти, или ассоциируя указатели с адресами реальных переменных.
</td></tr>
</table>
<p>Когда указатели получили конкретные значения, для обращения к ним можно использовать операцию ссылки <b>*</b>.
Выражение *first.val равно значению переменной cost, а выражение *first.rat - значению переменной interest.
<p><u><i>Структуры - элементы структур.</i></u>
<br>Структуры могут быть вложены друг в друга. 
<br>В языке C нет ограничений на глубину вложенности структур, хотя стандарт ANSI гарантирует поддержку не более 63 уровней.
<br>Пока позволяет память, можно определять структуры, содержащие структуры со структурами структур.
На практике в программах на C почти никогда не используется больше трех уровней вложенности структур.

<p>Рассмотрим применение структур для вычисления длины, ширины, площади прямоугольника,
заданного координатами верхней левой (1, 1) и нижней правой (10, 10) вершин - канонические координаты.
<br>Одно из возможных представлений 
прямоугольника - это пара точек на углах одной из его диагоналей. Структура rect содержит две структуры point.
<table border=0>
<tr><td><left><img src="l37_02.gif"></left>
</td><td><pre>
	
		struct rect 
		{
			struct point pt1;
			struct point pt2;
		};

</pre></td></tr>
</table>
<pre>
	#include&lt;conio.h>
	#include&lt;iostream.h>
	void main()
	{
		// Объявление шаблона структуры point
		struct point 
		{
			int x, y;
		};
		// Совместное объявление структуры и ее экземпляра MyBox, инициализация
		// Для pt1 значения (1, 1)	для pt2 значения (10, 10)
		struct rect
		{
			struct point pt1;
			struct point pt2;
		} MyBox = {1, 1, 10, 10};

		int lenght, width, s;
		lenght = MyBox.pt2.y - MyBox.pt1.y;
		width = MyBox.pt2.x - MyBox.pt1.x;
		s = lenght * width;
		cout << "Диагональные вершины: (" 
			<< MyBox.pt1.x << ", " << MyBox.pt1.y << ") ("
			<< MyBox.pt2.x << ", " << MyBox.pt2.y << ')' << endl;
		cout << "Площадь: " << lenght << " * " << width << " = " << s << endl;
		getch();
	}
	Результаты:
			Диагональные вершины: (1, 1) (10, 10)
			Площадь: 9 * 9 = 81
</pre>
<p>Если структура содержит другие структуры в качестве полей, то начальные значения должны строго следовать порядку как структур, так и полей в их определениях.
<pre>
		struct customer
		{	char fio[20];
			char it[25];
		};
		struct sale
		{	struct customer ber;
			char tit[20];
			float at;
		} mysale = {
					{ "Александр Блок", "Годы жизни 1880 - 1921" },
					"Гамаюн, птица вещая",
					167.87
				};
</pre>
<p>В этом фрагменте выполняются следующие инициализации:
<ul>
<li>поле <i>mysale.ber.fio</i> инициализируется значением <i>Александр Блок</i>
<li>поле <i>mysale.ber.it</i> инициализируется значением <i>Годы жизни 1880 - 1921</i>
<li>поле <i>mysale.tit</i> инициализируется значением <i>Гамаюн, птица вещая</i>
<li>поле <i>mysale.at</i> инициализируется значением <i>167.87</i>
</ul>


<p>&nbsp</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>