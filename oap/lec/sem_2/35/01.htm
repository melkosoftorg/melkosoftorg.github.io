<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>Лекция | Структуры</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Основные сведения о структурах</p>
<b><i>Структура</i></b> - это одна или несколько переменных (возможно различных типов), которые 
для удобства работы с ними сгруппированы под одним именем.
<p>Переменные внутри структуры называются ее <i>элементами</i>  или <i>членами структуры</i>, или <i>полями структуры</i>.
<br>Элементами структуры могут быть: переменные, массивы, указатели, структуры, и так далее. 
<p><b><i>Например:</i></b>
<ul>
<li>строка сводной платежной ведомости содержит фамилию, имя, отчество, год, месяц, заработную  плату и так далее служащего,
<li>сведения о регистрации автомобиля включают марку машины, год выпуска, цвет, номер,
<li>информация о походе содержит название начального пункта маршрута, название конечного пункта маршрута, номер маршрута.
</ul>
<p>Структуры помогают в организации сложных данных, поскольку позволяют группу 
связанных между собой переменных трактовать не как множество отдельных элементов, а 
как единое целое.
<p><b><i>Структуры могут</i></b> 
<ul>
<li>копироваться, 
<li>над ними могут выполняться операции присваивания, 
<li>их можно передавать функциям в качестве аргументов, 
<li>функции могут возвращать их в качестве результатов.
</ul>
<p><b><i>Структуры нельзя сравнивать</i></b>.
<p>Рассмотрим создание шаблона структурированного типа на примере инвентаризации библиотеки.
<br>Каждая книга в библиотеке может быть охарактеризована следующими данными (полями): название книги, фамилия автора, цена.
<br>Каждую книгу можно описать структурной переменной типа book,
<p><table>
<tr valign = top><td> 
<pre>
	const int T = 60, A = 30;
	struct book
	{
		unsigned char tit[T];
		unsigned char aut[A];
		float val;
	};
</pre>
</td><td>
<pre>
			struct	- ключевое слово,
			book	- имя (тег) структуры, имя структурного типа,

			// список переменных (деклараций)
			tit[T]	- поле структуры название,
			aut[A]	- поле структуры автор,
			val		- поле структуры цена.
</pre>

</td></tr>
</table>

<p><b><i>Тег</i></b> дает название структуре данного вида и далее может служить кратким обозначением 
той части декларации, которая заключена в фигурные скобки. 
<p><b><i>Перечисленные в структуре переменные</i></b> называются членами структуры. Описания элементов, входящих в структуру, 
помещаются в фигурные скобки, вслед за которыми ставится точка с запятой. Элементы 
структуры могут быть как базовых, так и производных типов.
<p><b><i>Имена членов и тегов</i></b> могут совпадать с именами обычных переменных, так как они 
всегда различны по контексту. <br>Такое определение структуры вводит новый производный 
тип, называемый структурным типом. В примере у этого структурного типа есть 
конкретное имя book. 
<p>Объявление структуры и ее членов само по себе не создает фактического объекта-структуры book или ее переменных.
То есть, объявление структурного типа - это не объявление экземпляров этого типа, при этом не выделяется память для фактических структур.
<p><b><i>Определив структурный тип, можно</i></b> определять и описывать конкретные структуры, то есть структурированные объекты, массивы объектов, указатели на объекты. 
<p><i><u>Первый способ.</u></i> Поставить список имен переменных сразу после определения структурного типа.
При таком способе объявления структур определение структурного типа совмещается с объявлением его экземпляров.
<pre>
		struct book
		{
			unsigned char tit[T];
			unsigned char aut[A];
			float val;
		} pt1, pt2, pt3;
</pre>
<p>В этом операторе определен структурный тип book и объявлены три структуры этого типа - pt1, pt2, pt3.
<br>Эти три структуры являются <i>экземплярами типа book</i> - каждая из них содержит две строковые переменные tit[60], aut[30] и вещественную переменную val.
<br>Для каждого созданного объекта выделяется по 94 байта памяти.
<p><i><u>Второй способ.</u></i> Поместить объявление переменных отдельно от определения структурного типа.
<br>Например, строка 
<pre>		<i>struct book</i> pt1, pt2, pt3;</pre>
<p>определяет три структуры (три объекта) с именами <b>pt1</b>, <b>pt2</b>, <b>pt3</b>, каждая из них содержит в качестве элементов свои собственные данные,
состав которых определяет структурный тип с именем <b>book</b>.
<p><i><u>Третий способ.</u></i> Если структура определяется однократно, то есть, нет необходимости в разных частях 
программы определять или описывать одинаковые по внутреннему составу 
структурированные объекты, то можно не вводить именованный структурный тип, а 
непосредственно определять структуры одновременно с определением их компонентного 
состава. Например:
<pre>
		struct
		{
			unsigned char tit[T];
			unsigned char aut[A];
			float val;
		} xx, yy, ee[8], *ps;
</pre>
определяет
<ul>
<li>две структуры с именами <b>xx</b>, <b>yy</b>,
<li>массив структур с именем <b>ee</b>,
<li>указатель на структуру <b>ps</b>.
</ul>
В <b>xx</b>, <b>yy</b> и в каждый элемент массива <b>ee[0], ... , ee[7]</b> входят в качестве элементов
 массивы unsigned char tit[60], aut[30] и вещественная переменная float val.
Имени у соответствующего структурного типа нет.
<p><b><i>Декларация структуры, не содержащей списка переменных</i></b>, например, struct {...} x, y, z; не 
резервирует памяти: она просто описывает шаблон, или образец структуры. Однако если 
структура имеет тег, то этим тегом далее можно пользоваться при определении 
структурных объектов.
<p><b><i>Инициализировать структуру</i></b> можно списком константных значений ее членов. 
<pre>
		const int T = 60, A = 30;
		// создание шаблона типа структур
		struct book
		{
			unsigned char tit[T];
			unsigned char aut[A];
			float val;
		};
		// определить объект lib1 типа book и инициализировать списком значений
		struct book lib1 = {"Искусство программирования для ЭВМ", "Д. Кнут", 125.78};
</pre>
<p>&nbsp;</p>
</td>
</tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>