<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | СР 25</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Функции работы с блоками памяти</p>
<b><center>Функции члены семейства mem ... <br>манипулируют массивами памяти 
длиной n байт
<p>Прототип в string.h, mem.h</center></b>
<br>&nbsp </br>
<center><table border="5" width="60%" cellpadding=5>
<tr><td width="6%" align="center"><a href="#01">1</a></td><td>Копирование блока и изменение</td></tr>
<tr><td width="6%" align="center"><a href="#02">2</a></td><td>Сравнение и поиск в первых <b>n</b> байтах блока</td></tr>
<tr><td width="6%" align="center"><a href="#03">3</a></td><td>Копирование блока по адресу и изменение</td></tr>
</table></center>
<p>&nbsp </p>
<a name="01"></a>
<p><b><center>Копирование блока и изменение</center></b>
<p><b><i>memccpy</i></b> копирует блок из n байт из src в dest, возвращает указатель на 
байт в dest, следующий непосредственно за символом ch, если ch был 
скопирован; в противном случае memccpy возвращает значение NULL. 
<br>Копирование прекращается, если:
первым копируется символ ch,
в dest скопировано n байт.
<br><b><i>memcpy</i></b> копирует блок длиной n байт из src в dest, возвращает dest. 
Если исходный и результирующий блоки перекрываются, то поведение 
функции не определено.
<br><b><i>memmove</i></b> копирует блок длиной n байтов из src в dest, возвращает dest. 
Если исходный и результирующий блоки перекрываются, направление 
копирования выбирается таким образом, что перекрывающиеся байты 
копируются точно.
<br><b><i>memset</i></b> присваивает первым n байтам массива s значение ch, 
возвращает s. Размер массива s задается параметром n.
<pre>
<b>Синтаксис</b>	void *memccpy(void *dest, void *src, char ch, size_t n); 
		void *memcpy(void *dest, void *src, size_t n);
		void *memmove(void *dest, void *src, size_t n);
		void *memset(void *s, char ch, size_t n);
</pre>
<pre>
	#include&lt;string.h&gt;
	#include&lt;stdio.h&gt;
	#include&lt;conio.h&gt;
	main()
	{	char *src = "memccpy копирует n байт из src в dest";
		char dest[50], *ptr, ch = 'n'; clrscr();
		printf("Текст: %s\n", src);
		puts("memccpy");	// копирует из src в dest
		ptr = (char *) memccpy(dest, src, ch, strlen(src));
		if(ptr)
		{ 
			*ptr = '\0'; printf(" До символа %c:  %s\n",ch, dest); 
		}
		else
			printf("Символ не найден \n");
		puts("memcpy");	// копирует из str в src
		printf(" До: %s\n", src); 
		char str[] = "********************";
		ptr = (char *) memcpy(src, str, strlen(str));
		if(ptr)
			printf(" После: %s\n",src);
		else
			printf("Ошибка memcpy\n");
		puts("memmove"); 
		char dem[] = "memmove копирует n байт из sr в dem";
		char sr[] = "@@@@@@@@@@@@@@@"; 
		printf(" До: %s\n", dem);
		ptr = (char *) memmove(dem, sr, 10); 
		printf(" После: %s\n",dem);
		puts("memset");
		printf(" До: %s\n", dem);
		ptr = (char *) memset(dem, ch, 7); 
		printf(" После: %s\n",dem);
		getch();return 0;
	}

	<b><i>Результат</i></b>	Текст: memccpy копирует n байт из src в dest
			memccpy
			 До символа n:  memccpy копирует n
			memcpy
			 До:    memccpy копирует n байт из src в dest
			 После: ********************айт из src в dest
			memmove
			 До:    memmove копирует n байт из sr в dem
			 После: @@@@@@@@@@пирует n байт из sr в dem
			memset
			 До:    @@@@@@@@@@пирует n байт из sr в dem
			 После: nnnnnnn@@@пирует n байт из sr в dem

</pre>
<a name="02"></a>
<b><center>Сравнение и поиск в первых n байтах блока</center>
<p><i>memcmp</i></b> сравнивает первые n байт блоков s1 и s2 как значения типа 
unsigned char
<br><b><i>memicmp</i></b> сравнивает первые n байт блоков s1 и s2, игнорируя различия 
регистров (верхний или нижний).
<br>Возвращают значение:
<ul>
<li> &nbsp&nbsp < 0, &nbsp &nbsp&nbsp если s1 меньше s2,
<li>== 0, &nbsp &nbsp&nbsp если s1 равно s2,
<li> &nbsp > 0,&nbsp  &nbsp &nbsp если s1 больше s2.
</ul>
Так как memcmp сравнивает значения типа unsigned char, то при вызове:
memcmp("\xFF", "\x7F", 1); возвращаемое значение будет > 0.
<p><b><i>memchr</i></b> производит поиск символа ch в n первых байтах массива s. 
<br>Возвращает указатель на первый встретившийся символ ch в массиве s, в 
противном случае memchr возвращает значение NULL.
<pre>
<b>Синтаксис</b>	void *memcmp(void *s1, void *s2, size_t n);
		int memicmp(void *s1, void *s2, size_t n);
		void *memchr(void *s, char ch, size_t n);

	#include&lt;string.h&gt;
	#include&lt;stdio.h&gt;
	#include&lt;conio.h&gt;
	main()
	{
		char *src1 = "Арба", *src2 = "Арба", *src3 = "бара";
		int stat, k; clrscr();
		puts("memcmp");
		stat = memcmp(src2, src1, strlen(src2));
		if(stat > 0) 
			printf(" %s > %s\n",src2,src1);
		if(stat < 0) 
			printf(" %s < %s\n",src2,src1);
		if(stat == 0) 
			printf(" %s == %s\n",src2,src1);
		stat = memcmp(src2, src3, strlen(src2));
		if(stat < 0) 
			printf(" %s < %s\n",src2,src3);
		if(stat > 0) 
			printf(" %s > %s\n",src2,src3);
		if(stat == 0) 
			printf(" %s == %s\n",src2,src3);
		puts("memicmp");
		src1 = "арбузы"; src2 = "арбалет";
		printf(" Строки %s и %s\n",src1, src2);
		for(k = 1; k < 8; k++)
		{
			printf(" в позиции %d ",  k);
			stat = memicmp(src1, src2, k);
			if(stat != 0) 
				printf("не ");
			printf("равны\n");
		}
		char *src = "memchr просматривает n байт";
		char *ptr, si = 'м';
		puts(src);
		ptr = (char *) memchr(src, si, strlen(src));
		if(ptr)
			printf("Символ %c на позиции %d\n", si,ptr-src);
		else  
			printf(" Символ %c не найден \n",si);
		getch(); return 0;
	}

	<b><i>Результат</i></b>	memcmp
			 Арба == Арба
			 Арба < бара
			memicmp
			 Строки арбузы и арбалет
			 в позиции 1 равны
			 в позиции 2 равны
			 в позиции 3 равны	
			 в позиции 4 не равны
			 в позиции 5 не равны
			 в позиции 6 не равны
			 в позиции 7 не равны
			memchr просматривает n байт
			 Символ м на позиции 11
</pre>
<p>Посмотрим, как можно посчитать, сколько раз символ или сочетание символов встречается в тексте.
<pre>
	#include&lt;string.h>
	#include&lt;conio.h>
	#include&lt;iostream.h>
	#define N  4
	#define M  40
	void main()
	{	char str[N][M] = { "Русь былую, удалую", "Ты потомству передашь;",
				"Ты схватил ее живую", "Под народный карандаш." };
		char ww[4], kl[] = "ую";
		int i, j, f, kol = strlen(kl), num[N] = {0}, stat, nn = 0;
		clrscr(); cout << "В тексте" << endl << endl;
		for(i = 0; i < N; i++)
		{	num[i] = strlen(str[i]);
			cout << '\t' << str[i] << endl;
			for(j = 0; j < num[i]; j++)
			{	for(f = 0; f < kol; f++) 
					ww[f]=str[i][j+f];
				stat = memcmp(ww, kl, kol);
				if(stat == 0) 
					++nn;
			}
		}
		cout << "\nключей поиска " << kl << " длиной " << kol << " - " << nn << endl;
		getch();
	}

	<b><i>Результат</i></b>	В тексте

			        Русь былую, удалую
			        Ты потомству передашь;
			        Ты схватил ее живую
			        Под народный карандаш.

			ключей поиска ую длиной 2 - 3

</pre>
<a name="03"></a>
<b><center>Копирование блока по адресу и изменение</center>
<p><i>movmem</i></b> копирует блок длиной len байт с исходного адреса src по 
адресу dest. Направление копирования всегда выбирается таким образом, что 
данные всегда копируются точно, даже если блоки перекрываются.
<br><b><i>setmem</i></b> присваивает первым байтам блока с адресным указателем 
addr и длиной len значение value. Возвращаемого значения нет.
<pre>
<b>Синтаксис</b>	void movmem(void *src, void *dest, unsigned len);
		void setmem(void *addr, int len, char value);
<b>Прототип в</b> 	mem.h
</pre>
<pre>
	#include&lt;string.h&gt;
	#include&lt;stdio.h&gt;
	#include&lt;mem.h&gt;
	#include&lt;conio.h&gt;
	#include&lt;alloc.h&gt;
	main()
	{	char *sou = "movmem копирует n байт";
		char *si; int n; clrscr();
		puts("movmem");
		n = strlen(sou);
		si = (char *) malloc(n + 1);
		movmem(sou, si, n + 1);
		printf(" sou: %s,\n адрес: %u\n", sou, &sou);
		printf(" si : %s,\n адрес: %u\n", si, &si);
		puts("setmem");
		char ch = '/'; n = strlen(sou);
		printf(" n = %d  %s\n", n, sou);
		sou = (char *) calloc(n + 1, sizeof(char));
		setmem(sou, n - 10, ch);
		printf(" n = %d  %s\n", n - 10, sou);
		getch(); return 0;
	}

	<b><i>Результат</i></b>	movmem
			 sou: movmem копирует n байт,
			 адрес: 4092
			 si : movmem копирует n байт,
			 адрес: 4088
			setmem
			 n = 22  movmem копирует n байт
			 n = 12  ////////////

</pre><p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
</tr>
</table>
<a name=#end></a>
</body>
</html>