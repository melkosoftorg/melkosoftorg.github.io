<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 38</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Обращение к элементу структуры</p>
Обращение к элементу структуры можно организовать двумя способами:
<p><b><center>( *имя_указателя ).имя_элемента_структуры</center></b>
<br>или
<br><b><center>имя_указателя -> имя_элемента_структуры</center></b>
<br>Первый способ традиционный. Он основан на обратимости операций разыменования * и получения адреса &, то есть,
если pine&nbsp;==&nbsp;&dot[0], то *pine&nbsp;==&nbsp;dot[0].
<p>Второй способ доступа к элементам структуры с помощью настроенного на нее указателя предусматривает применение специальной операции стрелка <b>-></b>, которую иногда называют 
операцией косвенного выбора компонента (элемента) структурированного объекта, адресуемого указателя. 
<p>Если pp ссылается на структуру point, то *pp есть сама структура, а (*pp)<b>.</b>x и (*pp)<b>.</b>y - ее члены.
<p>Используя указатель pp, можно написать
<pre>
		struct point origin, *pp;
		pp = &origin;
		printf("origin: ( %d, %d )\n", (*pp)<b>.</b>x, (*pp)<b>.</b>y);
</pre>
<br>Скобки в (*pp)<b>.</b>x необходимы, поскольку приоритет оператора <b>.</b> выше приоритета <b>*</b>. 
<br>Выражение *pp<b>.</b>x будет проинтерпретировано как *(pp<b>.</b>x), что неверно, поскольку pp<b>.</b>x не является указателем.
<p>Указатели на структуры используются часто, поэтому для доступа к ее членам 
используется более короткая форма записи.
<br>Если pp - указатель на структуру, то pp -> член_структуры - ее отдельный член.
<pre>
		printf("origin: ( %d, %d )\n", pp -> x, pp -> y);
</pre>
<p>Оба оператора <b>.</b> и <b>-></b> выполняются слева направо.<br>Значит при наличии декларации &nbsp; &nbsp; struct 
rect r, *rp = r; &nbsp; &nbsp; следующие выражения будут эквивалентны: 
<pre>
		r<b>.</b>pt1.x 
		rp -> pt1<b>.</b>x 
		(r<b>.</b>pt1)<b>.</b>x 
		(rp -> pt1)<b>.</b>x
</pre>
<p>Операторы доступа к членам структуры <b>.</b> и <b>-></b> вместе с операторами вызова функции () и 
индексации массива [] занимают самое высокое положение в иерархии приоритетов и 
выполняются раньше любых других операторов. Например, если задана декларация 
<pre>
		struct 
		{
			int len;
			char *str;
		} *p;
</pre>
<br>то ++p -> len увеличит на 1 значение члена структуры len, а не указатель p, поскольку в 
этом выражении как бы неявно присутствуют скобки: ++(p -> len). <br>Чтобы изменить 
порядок выполнения операций, нужны явные скобки.<ul><li>Так в (++p) -> len, прежде чем взять 
значение len, программа продвинет указатель p.<li>В (p++) -> len указатель p увеличится 
после того, как будет взято значение len, то есть в этом случае скобки не обязательны.</ul>
<pre><b><i>Примеры:</i></b>
	*p -> str - содержимое объекта, на который ссылается str,
	*p -> str++ - продвинет указатель str после получения значения объекта, на который он указывал,
	(*p -> str)++ - увеличит значение объекта, на который ссылается str,
	*p++ -> str - продвинет p после того, как будет получено то, на что указывает str.
</pre>
<p>Рассмотрим программу перебора массива структур с помощью указателей
<pre>
	#include&lt;conio.h&gt;
	#include&lt;iostream.h&gt;
	# define MAX 4
	void main(void)
	{
		// Объявление шаблона структуры part
		struct part
		{
			short number;
			unsigned char name[10];
		};
		// Объявление и инициализация массива из MAX структур
		struct part data[MAX] =	{ 1, "Иван",
					  2, "Петр",
					  3, "Андрей",
					  4, "Ольга"
					};
		// Объявление указателя на тип part и переменной счетчика
		struct part *p_part;
		int count;
		// Установка указателя на первый элемент массива
		p_part = data;
		// Перебор массива с приращением указателя на каждом проходе цикла
		for(count = 0; count < MAX; count++)
		{
			cout << "По адресу " << p_part << " :  "  << p_part -> number << ' ' << p_part -> name << endl;
			p_part++;
		} getch();
	}
	Результаты:	
			По адресу 0x8feb0fcc :  1 Иван
			По адресу 0x8feb0fd8 :  2 Петр
			По адресу 0x8feb0fe4 :  3 Андрей
			По адресу 0x8feb0ff0 :  4 Ольга
</pre>
<p>Обратите внимание, что при инкременировании указателя он сдвигается на размер элемента данных.
В случае указателя на структуру - это размер структуры: MAX экземпляров по 12 байт каждый.
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>