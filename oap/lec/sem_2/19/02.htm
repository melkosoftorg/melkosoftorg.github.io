<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 19</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Оператор условного перехода&nbsp;&nbsp;&nbsp;if ... else</p>
<p>Операторы в программе обычно выполняются в том же порядке, в каком они написаны в исходном коде, а управляющий оператор изменяет порядок выполнения инструкций в программе.
<p><center><table>
<tr><td width="40%" valign="top">
<pre>
if (условие)
	оператор 1;
else
	оператор 2;
</pre>
</td><td><img src="pic_02.gif" alt="Команда ветвления" ismap>
</td></tr></table></center>
<p>где <i>Условие</i> является любым выражением, которое приводится или может быть приведено к целочисленному значению.
<p>Если <i>Условие</i> отлично от нуля (истина), то выполняется <i>оператор 1</i>, в противном случае выполняется <i>оператор 2</i>.
<br>Если любая из ветвей содержит более одного оператора, то их надо заключить в фигурные скобки <big>{ }</big>.

<p><i>else оператор 2</i> является необязательной частью оператора if, правомерно употребление следующей формы оператора if:
<pre><b>
			if (условие)
				оператор 1;
</b></pre>
<p><i>оператор 1</i> выполняется тогда, когда <i>Условие</i> отлично от нуля.
<br>Если <i>Условие</i> равно нулю, <i>оператор 1</i> пропускается и программа продолжает выполняться дальше.
<p><table width="80%" align="center">
<tr valign="top"><td>Например, в результате выполнении программного кода
<pre>
	float a = 3.5, b = 0;
	if(a < 0)			// получен ответ нет - False
		b = 2 * a;		// команда осталась не выполненной
	cout << "a = " << a << "\tb = " << b << endl;
<p>выведен результат:	a = 3.5		b = 0

	float a = -3.5, b = 0;
	if(a < 0)			// получен ответ да - True
		b = 2 * a;		// команда выполнена
	cout << "a = " << a << "\tb = " << b;
<p>выведен результат:	a = -3.5		b = -7
</pre>
</td><td>Такая команда ветвления называется неполная развилка.
<p><center><img src="if.gif" alt="Команда ветвления" ismap></center></p>
</td></tr></table>
<p>Если необходимо выполнить более одного оператора в зависимости от того ложно или истинно <i>Условие</i> надо использовать составной оператор if, заключив блок из нескольких команд, образующих ветвь, в фигурные скобки <b>{&nbsp;}</b>.
<p>При записи логического выражения следует избегать знака == (равно) для действительных переменных (double), так как они представляются неточно, а поэтому может не произойти совпадений значений выражений, стоящих слева и справа от знака равно.
<br>Для устранения указанного недостатка следует требовать выполнения условия с заданной точностью, то есть, вместо отношения <i>x&nbsp;==&nbsp;y</i> рекомендуется, например,
<pre>
			 fabs(x - y) < 1E-8.
</pre>
<p>Рассмотрим программу вычисления частного от деления двух вещественных чисел
<pre>
	#include&lt;conio.h&gt;
	#include&lt;stdio.h&gt;
	main ()
	{
		float a, b, rat; char ch; clrscr();
		printf("Введите два числа (float) a, b: ");
		scanf("%f %f", &a, &b);
		// если знаменатель равен 0
		if (b == 0.0) 
			printf("Отношение не определено\n");
		// иначе, если знаменатель не равен 0
		else 
		{
			rat = a / b;
			printf("Отношение = %f \n", rat);
		}
		printf("Введи символ\n");
		if (getch() == 'q')
			puts("До свидания, программа завершена.");
		else 
			puts("Какой символ!");
		getch(); return 0;
	}
</pre>
<p>Если в программе используется выражение (getch() == 'q'), то она, дойдя до него, останавливается и переходит в состояние ожидания ввода символа с клавиатуры. После ввода символа выполняется сравнение введенного символа с символом 'q'.
<br>Если введенный символ равен 'q', то на экран будет выведено сообщение: "До свидания, программа завершена.", в противном случае будет выведено сообщение: "Какой символ!".
<br>Функция puts выводит строку на экран и завершает вывод символом новой строки.
<p><b>Еще одна форма записи оператора if - вложенный оператор if</b>
<p><table width="60%" align="center">
<tr valign="top"><td>
<pre>
if (условие 1)
	оператор 1;
else	if (условие 2)
		оператор 2;
	else	if (условие 3)
			оператор 3;
		else
			оператор 4;
следующий оператор;
</pre>

</td><td>
<p><center><img src="if_s1.gif" alt="вложенный оператор if" ismap></center></p>
</td></tr></table>


<p>Если <i>условие 1</i> истинно, то выполняется <i>оператор 1</i>, а затем программа переходит на <i>следующий оператор</i>.
<br>Иначе, если <i>условие 1</i> ложно, проверяется <i>условие 2</i>.
<blockquote>
Если <i>условие 2</i> истинно, то выполняется <i>оператор 2</i>, а затем программа переходит на <i>следующий оператор</i>.
<br>Иначе, если <i>условие 2</i> ложно, проверяется <i>условие 3</i>.
<blockquote>
Если <i>условие 3</i> истинно, то выполняется <i>оператор 3</i>, а затем программа переходит на <i>следующий оператор</i>.
<br>Иначе, если <i>условие 3</i> ложно, выполняется <i>оператор 4</i>, а затем программа переходит на <i>следующий оператор</i>.
</blockquote>
</blockquote>
<p>В любом случае выполняется только один из операторов.
<p>Например,
<pre><b>
	#include&lt;conio.h&gt;
	#include&lt;stdio.h&gt;
	main()
	{
		int legs, i; clrscr();
		// повторить 6 раз
		for(i = 0; i < 6; i++)
		{
			printf("Количество ног "); scanf("%d", &legs);
			if (legs == 4)
				printf("Это, возможно, лошадь.\n");
			else if (legs > 4)
				printf("Это не лошадь.\n");
			else		// выполнить, если legs < 4
			{
				legs++;
				printf("Теперь у нее еще одна нога.\n");
			}
		} getch(); return 0;
	}
</b></pre>
<p><i><u>Пример</u>:</i> Дан номер некоторого года (положительное целое число). Вывести соответствующий ему номер столетия, учитывая, что, к примеру, началом 20 столетия был 1901 год.
<pre>
	#include&lt;stdio.h>
	void main()
	{
		 unsigned y, c;
		 printf(“Введите год:”); scanf(“%u”, &y);
		 c = y/100;
		 if(y % 100) c++;
		 printf(“Столетие: %u\n”, c)
	}
</pre>
<p><i><u>Пример</u>:</i> Дано целое число, лежащее в диапазоне от –999 до 999. Вывести строку — словесное описание данного числа вида "отрицательное двузначное число", "нулевое число", "положительное однозначное число" и т.д.
<pre>
	#include&lt;stdio.h>
	#include&lt;math.h>
	void main()
	{
		 int n;
		 printf(“Введите число: ”); scanf(“%d”, &n);
		 if(n==0) printf(“Нулевое число!\n”);
		 else
		{
		  if(n > 0) printf(“Положительное ”); else printf(“Отрицательное ”);
		  if(abs(n) < 10) printf(“однозначное ”);
		   else if (abs(n) < 100) printf(“двузначное ”);
		     else printf(“трехзначное ”);
		  printf(“число\n”);
		 }
	}
</	pre>
 <p>

</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>