<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 19</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</td></tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual><p align=center class=dbi><br>Логические операторы</p>
<p>Для объединения нескольких условных выражений используются логические операторы
<pre>
			&&	-&nbsp;&nbsp;&nbsp;&nbsp;И
			||	-&nbsp;&nbsp;&nbsp;&nbsp;ИЛИ
			! 	-&nbsp;&nbsp;&nbsp;&nbsp;НЕ
</pre>
<p><i>Составное условие</i> - условие полученное из простых условий, объединенных при помощи логических операторов &&&nbsp;-&nbsp;И, ||&nbsp;-&nbsp;ИЛИ, !&nbsp;-&nbsp;НЕ.
<p class=dbi>Оператор И</p> <b>указывает на то, что должны быть истинными все условия одновременно.</b>
<p>Например: <b>if (inc < 200 && dep > 2 && ja  ==  96)</b>
<p>Программа подсчитывает количество введенных с клавиатуры символов: общее количество, непустых символов, пустых символов (пробел, табуляция, переход на новую строку).
<br>Ввод прекращается при значениии символа <b>~</b>.
<pre>
	#include&lt;conio.h&gt;
	#include&lt;stdio.h&gt;
	main()
	{
		clrscr();
		unsigned char ch;		// очередной введенный символ
		int chsum = 0;		// общее количество символов
		int sum = 0;			// количество непустых символов
		int sum1 = 0;			// количество пустых символов
		// повторять до ввода символа ~ (тильда)
		while ((ch = getchar()) != '~')
		{
			chsum++;
			if(ch != ' ' && ch != '\n' && ch != '\t')
				sum++;
			else
				sum1++;
		}
		printf("Символов: всего %d,\t непустых %d, \t пустых %d\n\n",
			chsum, sum, sum1);
		getch(); return 0;
	}
</pre>
<p>Рассмотрим использование вложенных операторов if и логических операторов И на примере определения номера квадранта для значений x и y.
<p><center><table>
<tr><td width="65%" valign="top" align="center">
<img src="dz_w10.gif" alt="Вложенные ветвления." ismap>
</td><td>
<pre>
#include&lt;conio.h>
#include&lt;iostream.h>
void main()
{
	clrscr();
	int n;
	float x, y;
	// повторять до нажатия символа q
	do
	{	n = 1;
		cout << "x = "; cin >> x;
		cout << "y = "; cin >> y;
		if(x > 0 && y < 0)
			n = 4;
		else	if(x < 0 && y < 0)
				n = 3;
			else	if(x < 0 && y > 0)
					n = 2;
		cout << "A(" << x << ", " << y << ") - " 
			<< n << " четверть\n";
	} while(getch() != 'q');
	getch();
}
</pre>
</td></tr></table></center>
<p><b>n</b> - переменная, хранящая значение номера квадранта.
<br><b>&&</b> - логический оператор И.
<br>Начальное значение n = 1 - первый квадрант - при положительных значениях переменных x и y.
<br>При x > 0 И y < 0 n = 4 - четвертый квадрант.
<br>При x < 0 И y < 0 n = 3 - третий квадрант.
<br>При x < 0 И y > 0 n = 2 - второй квадрант.
<p class=dbi>Оператор ИЛИ</p> <b>означает, что для выполнения инструкции if достаточно истинности одного из условий.</b>
<p>Например: <b>if (inc <= 3000 || inc >= 5000)</b>
<p>В программе, содержащей вложенные команды if и составные условия ИЛИ, анализируется нажатие клавиши в любом алфавите и регистре и выбор ответа на нажатие клавиши.
<pre>
	#include&lt;conio.h&gt;
	#include&lt;stdio.h&gt;
	main()
	{
		char ch; clrscr();
		printf("Будете работать дальше ? Y / N "); scanf("%c", &ch);
		if(ch == 'Y' || ch == 'y' || ch == 'Н' || ch == 'н')
			printf("Работа продолжается ch = %c", ch);
		else	if(ch == 'N' || ch =='n' || ch == 'Т' || ch == 'т')
				printf("Всего доброго ch = %c", ch);
			else
				printf("Вы колеблетесь ch = %c", ch);
		getch(); return 0;
	}
</pre>
<p>Рассмотрим использовании составного условия ИЛИ при решении уравнений. 
Например, при вычислении по формуле:<img align=center src="f07.gif" alt="" ismap>, если x = 0 ИЛИ x = 2 получим деление на 0, чего необходимо избежать.
<p>Поэтому фрагмент программного кода должен иметь вид:
<pre>
	float x, y;
	cout << "x = "; cin >> x;
	if(x == 0 || x == 2)
		cout << "при x = " << x << " - деление на 0" << endl;
	else
	{
		y = 1 / x + 1 / (2 - x);
		cout << "x = " << x << "\ty = " << y << endl;
	}
</pre>
<p class=dbih>Оператор !</p> имеет очень высокий приоритет, он выше, чем у умножения, только скобки имеют более высокий приоритет.
<br>Приоритет оператора && выше, чем оператора ||, а оба они имеют более низкий приоритет, чем операторы отношения, но более высокий, чем оператор присваивания.






<p><i>Рассмотрим, при каких значениях аргумента <b>x</b> будет истинным значение логического выражения</i>
<pre>
	<big><code>((х < 5) && (x < 30)) ||  !(x <= 18)</code></big>
</pre>
<p>Значением условия будет истина, при истинности либо составного условия && - И ((х&nbsp;<&nbsp;5)&nbsp;&&&nbsp;(x&nbsp;<&nbsp;30)), либо составного условия ! - НЕ !(x&nbsp;<=&nbsp;18), так как мы имеем дело с составным условием || - ИЛИ.
<br>Чтобы истинным было первое условие ((х&nbsp;<&nbsp;5)&nbsp;&&&nbsp;(x&nbsp;<&nbsp;30)), должны быть истинными оба простых условия, образующих его.
<br>Чтобы истинным было второе составное условие !(x&nbsp;<=&nbsp;18), должно быть ложным простое условие x&nbsp;<=&nbsp;18.
<p>Рассмотрим на примерах.
<ol>
<li><i>При x = 10:</i> 10 < 5 (ложь), 10 < 30 (истина), то есть значением составного условия && будет ложь.
<br>10 <= 18 (истина), значит !(10 <= 18) - ложь. Таким образом все логическое выражение имеет значение ложь.
<li><i>При x = -3:</i> -3 < 5 (истина), -3 < 30 (истина), то есть значением составного условия && будет истина. Этого вполне достаточно, чтобы все логическое выражение получило значение истина, даже при ложности второго составного условия !(-3&nbsp;<=&nbsp;18).
</ol>
<p><b><i>Пример программы, использующей логические операторы.</b></i>
<p>Даны действительные числа x, y.
<ul type="disc">
<li>Если x и y отрицательны, то каждое значение заменить модулем.
<li>Если отрицательно только одно из них, то оба значения увеличить на 0,5.
<li>Если оба значения неотрицательны и ни одно из них не принадлежит отрезку [0,5; 2,0], то оба значения уменьшить в 10 раз.
<li>В остальных случаях x и y оставить без изменения.
</ul>
<p>Алгоритм решения задачи запишем словесно: 
<ol>
<li>ввести значения x, y; 
<li>если x < 0 и y < 0, найти их Классы и перейти к п. 5, иначе перейти к следующему пункту; 
<li>если x < 0 или y < 0, увеличить каждую величину на 0,5 и перейти к п. 5, иначе перейти к следующему пункту; 
<li>если ни x, ни y не принадлежат отрезку [0,5; 2,0], уменьшить их в 10 раз; 
<li>вывести значения x и y; 
<li>конец. 
</ol>
<pre>
	#include&lt;iostream.h>
	#include&lt;math.h> 
	#include&lt;conio.h>
	void main()
	{
		clrscr();
		double x, y;
		cout << "Введите два действительных числа "; cin >> x >> y;
		if((x < 0) && (y < 0))
		{
			x = fabs(x); y = fabs(y);
		}
		else
		{
			if((x < 0) || (y < 0))
			{
				x += 0.5; y += 0.5;
			}
			else
			{       			
				if(!(((x >= 0.5) && (x <= 2.0)) || ((y >= 0.5) && (y <= 2.0))))
				{
					x /= 10.0; y /= 10.0;
				}
			}
		}
		cout << "Результат: "; cout.width(6); cout << x << " " << y;
		getch();
	}
</pre>

<p>В таблице приведен полный список операций сравнения и логических операций. Таблица истинности логических операций имеет следующий вид:</P>
<TABLE align=center border=1 width=40%>
<TR><TH><I>p</I><TH><I>q</I><TH><I>p && q</I><TH><I>p || q</I><TH><I>!p</I>
<TR align=center><TD>0<TD>0<TD>0<TD>0<TD>1
<TR align=center><TD>0<TD>1<TD>0<TD>1<TD>1
<TR align=center><TD>1<TD>1<TD>1<TD>1<TD>0
<TR align=center><TD>1<TD>0<TD>0<TD>1<TD>0
</TABLE>

<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</td></tr>
</table>
</body>
</html>