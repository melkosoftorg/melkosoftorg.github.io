<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 28</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Алгоритмы поиска в одномерном массиве</p>
<p>Рассмотрим следующие алгоритмы поиска в одномерном массиве:
<ul type="disc">
<li>поиск значения минимального элемента массива - <b>min</b>;
<li>поиск значения максимального элемента массива - <b>max</b>;
<li>поиск отрицательных элементов массива, подсчет их количества <b>kolo</b> и суммы <b>s</b> отрицательных значений;
<li>поиск положительных элементов массива, подсчет их количества <b>kolp</b> и произведения <b>p</b> положительных значений;
<li>поиск четных элементов массива и подсчет их количества <b>kolc</b>.
</ul>
<p><table width="98%" align="center" border=0>
<tr valign="top"><td width="60%">
<pre>
	#include&lt;iostream.h>
	#include&lt;conio.h>
	#include&lt;stdlib.h&gt;
	int main()
	{
		const int N = 10;
		int i, x[N], min, max, kolo, kolp, kolc, s, p;
		clrscr(); randomize();
		gotoxy(1, 1); cout << "Случайные числа\n" ;
		for (i = 0; i < N; i++)
		{
			x[i] = random(10) - random(20);
			gotoxy(8 + i * 4, 2); cout << x[i];
		}
		// алгоритмы поиска - задать начальные значения до цикла
		min = max = x[0];
		kolo = kolp = kolc = 0;		// обнуление счетчиков
		s = 0;					// начальное значение суммы
		p = 1;					// начальное значение произведения
		// перебор элементов массива в цикле
		for (i = 0; i < N; i++)
		{
			// поиск минимального значения
			if(x[i] < min)
				min = x[i];
			// поиск максимального значения
			if(x[i] > max)
				max = x[i];
			// количество отрицательных значений и их сумма
			if(x[i] < 0)
			{
				gotoxy(8 + i * 4, 6); cout << x[i];
				s += x[i]; kolo++;
			}
			// количество положительных значений и их произведение
			if(x[i] > 0)
			{
				gotoxy(8 + i * 4, 8); cout << x[i];
				p *= x[i]; kolp++;
			}
			// количество четных значений
			if(x[i] % 2 == 0 && x[i] != 0)
			{
				gotoxy(8 + i * 4, 10); cout << x[i];
				kolc++;
			}
		}
		gotoxy(1, 3); cout << "max = " << max;
		gotoxy(1, 4); cout << "min = " << min;
		gotoxy(1, 5);
		cout << "Отрицательных значений " << kolo << ", их сумма s = " << s;
		gotoxy(1, 7);
		cout << "Положительных значений " << kolp << ", их произведение p = " << p;
		gotoxy(1, 9); cout << "Четных значений " << kolc;
		getch(); return 0;
	}
</pre>
</td><td>
<pre>
<i>Возможные результаты:</i>

Случайные числа
       2   -1  -8  -10 1   -1  -2  -17 -4  0
max = 2
min = -17
Отрицательных значений 7, их сумма s = -43
	-1  -8  -10     -1  -2  -17 -4
Положительных значений 2, их произведение p = 2
	2               1
Четных значений 5
	2       -8  -10         -2      -4

</pre>
<p>При организации поиска среди элементов массива, необходимо до цикла задать начальные значения:
<ul type="disc">
<p><li>поиск <b>min</b> и <b>max</b>: какой-то элемент массива принять за минимальный или максимальный (в программе min&nbsp;=&nbsp;max&nbsp;=&nbsp;x[0]), затем в цикле сравнивать с ним остальные элементы и как только найдется элемент меньше минимального или больше максимального, заменить предыдущее значение на новое, и так далее до конца массива;
<p><li>подсчет количества значений: начальные значения счетчиков количества искомых значений надо обнулить (в программе kolo&nbsp;=&nbsp;kolp&nbsp;=&nbsp;kolc&nbsp;=&nbsp;0) и как только в цикле среди элементов найдется подходящий - нарастить на единицу соответствующий счетчик - kol++;
<p><li>накопление суммы значений: начальное значение суммы задать равным нулю (в программе s&nbsp;=&nbsp;0), затем в цикле добавить значение очередного подходящего элемента массива s&nbsp;+=&nbsp;x[i];
<p><li>накопление произведения значений: начальное значение произведения задать равным единице (в программе p&nbsp;=&nbsp;1), затем в цикле доумножить на значение очередного подходящего элемента массива p&nbsp;*=&nbsp;x[i];
</ul>
</td></tr>
</table>
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>