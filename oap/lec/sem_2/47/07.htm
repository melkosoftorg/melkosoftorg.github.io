<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 47</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=a>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Вспомогательные директивы</p>
<p>Используются не очень часто в практике программирования.
<p><center><table width="50%" border=0 cellpadding=3>
<tr><td><a href="#01">Управление нумерацией строк</a></td></tr>
<tr><td><a href="#02">Реакция на ошибки</a></td></tr>
<tr><td><a href="#03">Пустая директива</a></td></tr>
<tr><td><a href="#04">Директива #pragma</a></td></tr>
</table></center>
<p> &nbsp; </p><a name="01"></a>
<p><b><center>Управление нумерацией строк<p>#line константа ["имя_файла"]</center></b>
<p>Значение константы в директиве #line - это любая целая константа.
<br>Если имя файла опущено, предполагается, что имя файла осталось текущим.
<p>Директива #line инструктирует компилятор об изменении внутренней нумерации строк и имени файла на заданный номер строки и имя файла, для того чтобы сослаться на них в случае ошибок, обнаруженных в процессе компиляции. 
<p>Например, #line 151 "copy.c" номер строки устанавливает равным 151 и имя файла изменяет на copy.c.
<p>Номер строки обычно соответствует номеру текущей входной строки.
<br>Имени файла соответствует имя текущего входного файла.
<p>Номер строки увеличивается после обработки каждой строки. В случае изменения номера строки и имени файла, компилятор игнорирует предыдущие их значения и продолжает обработку с новыми значениями.
<br>Директива #line обычно используется для программной генерации сообщений об ошибках со ссылками на номер строки и имя файла.
<p>Препроцессор формирует текст следующего вида
<p><center>имя_файла номер_строки текст_на_языке_С</center>
<br>и затем передает его на компиляцию.
<p>Например, препроцессор получил для обработки файл www.c:
<pre>
		#define N 3	// определение константы
		void main()
		{
			#line 23 "fil.c"
			double z[3 * N];
		} 
</pre>
<p>После препроцессора будет получено в файле www.i:
<pre>
		www.c	1:
		www.c	2:	void main()
		www.c	3:	{
		www.c	4:
		fil.c	23:		double z[3 * 3];
		fil.c	24:	}
</pre>
Текущие номер строки и имя файла доступны также через предопределенные идентификаторы __LINE__ и __FILE__, которые могут быть использованы при вставке в исходный файл программного текста выдачи сообщений об ошибке.
<p>Переменная __FILE__ содержит строку, представляющую имя файла, заключенного в двойные кавычки. Таким образом, нет необходимости заключать идентификатор __FILE__ в двойные кавычки, когда он используется.
<p>Например, в макроопределении ASSERT используются предопределенные идентификаторы __LINE__ и __FILE__ для печати сообщения об ошибке, содержащего координаты исходного файла, если заданное "утверждение" ложно.
<pre>
		#define ASSERT(cond) if (!cond) \
		{ printf("assertion error line %d, file(%s)\n", __LINE, __FILE); } else ;
</pre>
<p> &nbsp; </p><a name="02"></a>
<p><b><center>Реакция на ошибки<p>## error последовательность_лексем</center></b>
<p>Обработка данной директивы приводит к выдаче диагностического сообщения в виде,
определенном последовательностью лексем.
<p>Например, определим препроцессорную переменную NAME и инициализируем ее значением 5:
<pre>
		#define NAME 5
</pre>
<p>В дальнейшем проверим ее значение:
<pre>
		#if (NAME != 5)
		#error NAME должно быть равно 5!
</pre>
Если значение NAME не 5, получим сообщение:
<pre>
		Error имя_файла номер_строки
		Error directive: NAME должно быть равно 5!
</pre>
<p>Дальнейшая препроцессорная обработка исходного текста прекращается и в выходной файл препроцессора попадает только часть текста, предшествующая условию #if.
<p> &nbsp; </p><a name="03"></a>
<p><b><center>Пустая директива
<p>#</center></b>
<p>Не вызывает никаких действий.
<p> &nbsp; </p><a name="04"></a>
<p><b><center>Директива #pragma<p>#pragma последовательность_лексем</center></b>
<p>Директива #pragma определяет действия, зависящие от конкретной реализации компилятора. 
<br>Если конкретный препроцессор встречает прагму, которая ему неизвестна, он ее игнорирует как пустую директиву.
<p>Могут быть использованы следующие имена директив:<ul>
<li>Директива #pragma argsused может быть помещена между функциями и действует только на следующую функцию.
<br>Она отменяет вывод предупреждения о том, что некоторая переменная никогда не используется в функции (Parameter name is never used in function func_name).
<p><li>Директивы #pragma exit и #pragma startup задают функции, которые должны быть вызваны перед выполнением и после завершения программы.
<br>Эти директивы задаются в следующей форме:
<br><center>#pragma startup имя_функции приоритет
<br>#pragma exit имя_функции приоритет</center>
<br>Вызываемая функция должна иметь следующий прототип: void имя_функции(void);
<br>Приоритет является целым числом от 64 до 255 (по умолчанию он равен 100). 
<br>Меньший номер задает больший приоритет.<br>Функция с именем имя_функции должна быть описана до того, когда встретится соответствующая строка с директивой #pragma.
<p><li>Директива hdrfile позволяет задавать имя специального файла с расширением SYM (по умолчанию этот файл имеет имя TCDEF.SYM).<br>Директива hdrstop исключает использование этого файла, что приводит к уменьшению размера дискового пространства.
<p><li>Директива #pragma inline сообщает компилятору, что программа содержит встроенные ассемблерные коды.
<p><li>Директива #pragma option используется для включения опций из командной строки в код вашей программы. Она задается в следующей форме: #pragma option опции
<p><li>Директива #pragma saveregs имеет специальное предназначение и иногда бывает нужна для интерфейса с кодами на языке Ассемблера.
<p><li>Директива #pragma warn позволяет управлять выдачей предупреждений компилятора.
<p><li>Директива #pragma intrinsic используется для решения задач оптимизации программы.
<br>В этом случае код некоторых библиотечных функций будет встраиваться в программу. В результате размер программы увеличивается, но вызов библиотечных функций будет осуществляться быстрее.
</ul><p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=a>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>