<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 47</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Поименованные константы и макросы<br>Директива #define</p>
<p>Директива #define обычно используется для связи мнемоничных идентификаторов с константами, ключевыми словами, операторами и выражениями, которые часто используются.
Может размещаться в любом месте обрабатываемого текста, а ее действие в обычном случае распространяется от точки размещения до конца текста.
<p><b><center>#define идентификатор строка_замещения</center></b></p>
<p>Строка_замещения представляет собой набор лексем, таких как ключевые слова, константы или составные операторы.<br>Один или более пробельных символов могут разделять строку_замещения от идентификатора (или от заключенных в скобки параметров). 
<p>Директива #define заменяет все вхождения идентификатора в исходной программе 
на строку_замещения, определенную в директиве справа от идентификатора. 
<br>Идендтификаторы, которые представляют константы, называются поименованными константами.
<p>В примере определяется идентификатор WIDTH, как целая константа 80, и определяется идентификатор LENGTH, как (WIDTH + 10).
<pre>
		#define WIDTH 80
		#define LENGTH (WIDTH + 10)
</pre>
<p>Каждое вхождение LENGTH заменяется на (WIDTH + 10), которое в свою очередь заменяется 
на выражение (80 + 10).
<br>Скобки являются важными, поскольку они управляют интерпретацией в операторах, подобных следующему: var = LENGTH * 20;
<br>После препроцессирования оператор будет таким: var = (80 + 10) * 20;
<br>Значение, которое присваивается, равно 1800. Без скобок значение 80 + 10 * 20 равнялось бы 280.
<p>Строка_замещения может быть опущена. В этом случае все представители идентификатора будут удалены из исходного текста программы. 
<p>В примере определены три идентификатора: REG1, REG2, REG3.<br>REG1 и REG2 определены как ключевые слова register.<br>Определение REG3 опущено и, таким образом, любое вхождение REG3 будет удалено из исходного файла. 
<pre>
		#define REG1 register
		#define REG2 register
		#define REG3
</pre>
<p>Эти директивы могут быть использованы для того, чтобы обеспечить наиболее важным переменным программы (заданным с REG1 и REG2) задание класса памяти register. 
<p>В качестве строки_замещения может быть использован текст, заключенный в кавычки. 
Если текст больше чем одна строка, то он может быть продолжен на следующей строке 
посредством печати символа новой строки с последующей наклонной чертой влево.
В примере определяется идентификатор FILEMESSAGE.
Определение продолжается на вторую строку путем использования символа \.
<pre>
		#define FILEMESSAGE "Attempt too create file \
		failed because of insufficient space"
</pre>
<p>Идентификаторы, которые представляют операторы или выражения, называются макросами.
<p><b><center>Макроопределение с параметрами</center></b></p>
<p>Большие возможности предоставляет макроопределение с параметрами
<p><b><center>#define имя_макроса(список параметров) строка_замещения</center></b></p>
<ul><li>имя_макроса - идентификатор,
<li>список параметров - список разделенных запятыми идентификаторов (формальные параметры).
<br>Имена формальных параметров в тексте строка_замещения отмечают места, куда должны быть подставлены фактические значения. Каждое имя формального параметра может появиться в тексте более одного раза в любом порядке.</ul>
<p>Макросы могут быть определены по образу и подобию с вызовами функций. Поскольку макросы не вырабатывают действительных вызовов функций, то замена вызовов функций макросами может повысить скорость выполнения программы.
<br>Однако макросы создают проблемы, если они тщательно не определены.
<p>Макроопределения с аргументами могут потребовать использования круглых скобок для определения старшинства операций в выражениях.
<p><center>#define MAX(x, y) ( (x) > (y) ) ? (x) : (y)</center>
<p><b>Для обращения к макросу (для его вызова) используется конструкция:
<p><center>имя_макроса(список аргументов)</center></b>
<p>список аргументов - фактические значения параметров.
<p>Фактические аргументы, следующие непосредственно за идентификатором в исходном файле, соответствуют формальным параметрам списка параметров и модифицируют строку_замещения 
путем замены каждого формального параметра на соответствующий фактический.
<br>Списки фактических и формальных параметров должны содержать одно и то же количество аргументов.
<p>Каждое текущее вхождение макровызова MAX в исходном файле заменяется выражением 
<p><center>( (x) > (y) ) ? (x) : (y),</center>
<br>в котором формальные параметры x и y заменяются на фактические.
<br>Например, вхождение &nbsp; MAX(1, 2) &nbsp; заменяется на &nbsp; ( (1) > (2) ) ? (1) : (2),
<br>а вхождение &nbsp; MAX(i, s[i]) &nbsp; заменяется на &nbsp; ( (i) > (s[i]) ) ? (i) : (s[i])
<p>Макровызов проще читать, чем соответствующее выражение, которое подставляется. Исходная программа становится проще для понимания.
<p>Макросы могут некорректно повлиять на выражения с побочными эффектами. 
Аргументы с побочными эффектами могут стать причиной непредсказуемых результатов. 
<br>Макроопределение может содержать более одного вхождения данного формального 
параметра, и если этот формальный параметр представлен выражением с побочным 
эффектом, то это выражение будет вычисляться более чем один раз.
<p>Например, макро-вызов &nbsp;&nbsp;MAX(i, s[i++])&nbsp;&nbsp; заменится на &nbsp;&nbsp;( (i) > (s[i++]) ) ? (i) : (s[i++])
<p>Выражение s[i++] вычисляется дважды. Результат тернарного выражения неопределен, так как его операторы могут быть вычислены в любом порядке, а значение переменной i зависит от порядка вычисления.
<p>В следующем примере определяется макро с именем MULT.
<p><center>#define MULT (a, b) ( (a) * (b) )</center>
<br>Макровызов MULT (3, 5) в тексте программы заменяется на (3) * (5). Круглые скобки, в которые заключаются фактические параметры, важны, поскольку они управляют интерпретацией составных аргументов.
<br>Например, макровызов MULT (3 + 4, 5 + 6) заменится на (3 + 4) * (5 + 6), что эквивалентно 76.
<br>Без скобок результат подстановки 3 + 4 * 5 + 6 равен 29.
<p>Идентификатор не может быть переопределен без отмены первого определения. 
Однако, идентификатор может быть переопределен точно таким же определением. 
Таким образом в программе допускается повторение одного и того же определения.
<pre>
		#define M 15.9		// M определен как 15.9
		...
		#define M 'W'		// M определен как символьная константа 'W'
		...
		#define M "Слово"		// M определен как строка
</pre>
Однако при такой смене значений препроцессорного идентификатора компилятор выдает 
предупреждающее сообщение на каждую следующую директиву #define:
<p><center>Warning ...: Redefinition of макрос is not identical</center>
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>