<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title>ОП | СР 29_32</title>
<link rel="stylesheet" type="text/css" href="04_files/lec.css">
</head>
<body>
<a name="#start"></a>
<table class="pages" align="center" border="0" cellpadding="0" cellspacing="0">
<tbody><tr colspan="5">
<td>&nbsp;&nbsp;<a href="http://prep.scc/%7Eblp/uch/op/plan_2.htm" class="p">Календарно-тематический план</a>&nbsp;&nbsp;</td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/index.htm" class="p">&nbsp; План лекции &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/01.htm" class="p">&nbsp; 1 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/02.htm" class="p">&nbsp; 2 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/03.htm" class="p">&nbsp; 3 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/04.htm" class="a">&nbsp; 4 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/05.htm" class="p">&nbsp; 5 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/06.htm" class="p">&nbsp; 6 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/07.htm" class="p">&nbsp; 7 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/08.htm" class="p">&nbsp; 8 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/09.htm" class="p">&nbsp; 9 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/10.htm" class="p">&nbsp; 10 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/11.htm" class="p">&nbsp; 11 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/12.htm" class="p">&nbsp; 12 &nbsp;</a></td>
</tr>
</tbody></table>
<!-- -------Inside table------- -->
<table border="0" cellpadding="5" cellspacing="0" width="98%">
<tbody><tr><td class="usual">
<p class="dbi" align="center"><br>Чтение данных из файла последовательного доступа</p>
<p>Для проверки того, что файл создан успешно, воспользуемся программой чтения файла и печати его содержимого.
<br>Программа считывает записи из созданного файла clients.dat и печатает содержимое записей.
<br>Файлы открываются для ввода путем создания объекта класса ifstream.
<br>Объекту передаются два аргумента - имя файла и режим открытия файла.
</p><p>Объявление &nbsp;&nbsp;<b>ifstream inClientFile("clients.dat", ios&nbsp;::&nbsp;in);&nbsp;&nbsp;</b>
создает объект inClientFile класса ifstream и связывает с ним файл clients.dat, то есть открывает его для ввода.
</p><p>Аргументы в круглых скобках передаются конструктору класса ifstream, который открывает файл и устанавливает с ним "линию связи".
<br>Объекты класса ifstream открываются для ввода по умолчанию, так что 
для открытия файла clients.dat на ввод может быть использован оператор
<br></p><center><b>ifstream inClientFile("clients.dat");</b></center>
<p>Так же, как и в случае объекта класса ofstream, объект класса istream
 может быть создан без открытия какого-то файла, а файл может быть 
связан с ним позднее.
</p><p><table align="center" border="1" cellpadding="5" cellspacing="10" width="90%">
<tbody><tr><td class="rule"><b>Хороший стиль программирования</b>
<br>Открывайте файл только для ввода (используя ios&nbsp;::&nbsp;in), если содержимое файла не должно быть модифицировано.
<br>Это способствует предотвращению непреднамеренной модификации содержимого файла. Это пример принципа наименьших привилегий.
</td></tr>
</tbody></table>
</p><p>Программа использует условие <b>&nbsp;!&nbsp;inClientFile&nbsp;</b> для определения того, успешно ли открыт файл, до попытки осуществить выборку из этого файла.
</p><p>Строка &nbsp;&nbsp;<b>while (inClientFile &gt;&gt; account &gt;&gt; name &gt;&gt; balance)</b>&nbsp;&nbsp;
читает из файла набор данных (запись).
<br>После первого выполнения этого оператора переменная account имеет 
значение 100, переменная name имеет значение " Иванов ", а переменная 
balance - значение 45.98.
<br>Всякий раз, когда выполняется приведенный оператор, в переменные account, name и balance считывается следующая запись из файла.
<br>Записи выводятся на экран с помощью функции outputLine, которая 
использует параметризованные манипуляторы потока для форматирования 
данных, изображаемых на экране.
<br>Когда достигается конец файла, входная последовательность в 
операторе while возвращает 0 (а обычно возвращается поток inClientFile),
 файл закрывается с помощью деструктора класса ifstream и программа 
завершается.
</p><pre><b>
	// Чтение и печать последовательного файла
	#include &lt;iostream.h&gt;
	#include &lt;fstream.h&gt;
	#include &lt;iomanip.h&gt;
	#include &lt;stdlib.h&gt;
	void outputLine(int, char*, float);
	main()
	{
		ifstream inClientFile("clients.dat", ios :: in);
		if (! inClientFile)
		{
			cerr &lt;&lt; "Файл не может быть открыт" &lt;&lt; endl;
			exit (1);
		}
		int account; char name[10]; float balance;
		cout &lt;&lt; setiosflags(ios :: left) &lt;&lt; setw(10) &lt;&lt; "Счет" 
			&lt;&lt; setw(13) &lt;&lt; "Имя" &lt;&lt; "Баланс" &lt;&lt; endl;
		while (inClientFile &gt;&gt; account &gt;&gt; name &gt;&gt; balance)
			outputLine(account, name, balance);
		return 0;
	}
	void outputLine(int acct, char *name, float bal)
	{
		cout &lt;&lt; setiosflags(ios :: left) &lt;&lt; setw(10) &lt;&lt; acct &lt;&lt; setw(13) &lt;&lt; name 
			&lt;&lt; setw(7) &lt;&lt; setprecision(2) 
			&lt;&lt; setiosflags(ios :: showpoint | ios :: right)
			&lt;&lt; bal &lt;&lt; endl;
	}

	<i>Результаты</i></b>		Счет      Имя          Баланс
				100       Иванов         45.98
				200       Петров         23.11
				400       Сидоров        -9.76
				500       Перцев          0.00
</pre>
<p>Для последовательного поиска данных в файле программа обычно начинает
 чтение данные с начала файла и читает все данные последовательно до тех
 пор, пока не будут найдены требуемые данные. Это может привести к 
необходимости обрабатывать файл последовательно несколько раз в течение 
выполнения программы (каждый раз с начала файла).
</p><p>Как класс istream, так и класс ostream содержат функции-элементы 
для позиционирования указателя позиции файла (это порядковый номер 
следующего байта в файле, который должен быть считан или записан).
<br>Этими функциями-элементами являются
</p><ul><li>seekg - позиционировать для извлечения из потока - для класса istream
</li><li>seekp - позиционировать для помещения в поток - для класса ostream.
</li></ul>
<p>Любой объект класса istream имеет так называемый указатель get, 
который показывает номер в файле очередного вводимого байта; а любой 
объект класса ostream имеет указатель set, который показывает номер в 
файле очередного выводимого байта.
</p><p>Оператор &nbsp;&nbsp;<b>inClientFile.seekg(0);</b>&nbsp;&nbsp;
позиционирует указатель позиции файла на начало файла (позиция 0), присоединенного к inClientFile.
</p><p>Аргумент функции seekg обычно является целым типа long.
</p><p>Второй аргумент, который может быть задан, показывает так 
называемое направление позиционирования. Направление позиционирования 
может быть 
</p><ul><li>ios&nbsp;::&nbsp;beg (по умолчанию) для позиционирования относительно начала потока,
</li><li>ios&nbsp;::&nbsp;cur - для позиционирования относительно текущей позиции в потоке,
</li><li>ios&nbsp;::&nbsp;end - для позиционирования относительно конца потока.
</li></ul>
<p>Указатель позиции файла является целым числом, которое устанавливает 
позицию в файле как число байтов от начальной позиции в файле (иногда 
это называют смещением от начала файла).
</p><p>Примеры позиционирования указателя позиции в файле для извлечения из потока:
</p><pre><b>
	// Позиционирование fileObject на n-ый байт полагаем ios :: beg
	fileObject.seekg(n);

	// Позиционирование fileObject на n байтов вперед
	fileObject.seekg(n, ios :: cur);

	// Позиционирование fileObject на у-ый байт от конца файла
	fileObject.seekg(у, ios :: end);

	// Позиционирование fileObject на конец файла
	fileObject.seekg(0, ios :: end);
</b></pre>
<p>Те же самые операции могут быть выполнены с помощью функции-элемента seekg класса ostream.
</p><p>Функции-элементы tellg и tellp возвращают текущие позиции 
соответственно указателя взять из потока get и указателя поместить в 
поток set.
<br>Следующий оператор присваивает переменной location типа long значение указателя get.
</p><p></p><center><b>location = fileObject.tellg();</b></center>

<p>Рассмотрим программу, которая позволяет менеджеру по кредитам отображать на экране
</p><ul><li>
информацию для клиентов с нулевым балансом (то есть клиентов, у которых нет перед компанией задолженности),
</li><li>информацию по кредитному балансу (то есть клиентов, которым должна компания),
</li><li>информацию по дебетовому сальдо (то есть клиентов, у которых 
имеется задолженность перед компанией за товары и услуги, полученные в 
прошлом). 
</li></ul>
<br>Программа отображает меню и позволяет менеджеру по кредитам вводить 
одну из трех опций получения соответствующей информации по кредитам.
<ul><li>Опция 1 выводит список счетов с нулевым балансом.
</li><li>Опция 2 выводит список счетов с кредитным балансом.
</li><li>Опция 3 выводит список счетов с дебетовым сальдо.
</li><li>Опция 4 завершает выполнение программы.
</li></ul>
<pre><b>
	// Программа запроса кредитной информации
	#include &lt;iostream.h&gt;
	#include &lt;fstream.h&gt;
	#include &lt;iomanip.h&gt;
	#include &lt;stdlib.h&gt;
	void outputLine(int, char*, float);
	main()
	{
		ifstream inClientFile ("clients.dat ", ios :: in);
		if (! inClientFile)
		{
			cerr &lt;&lt; "Файл не может быть открыт" &lt;&lt; endl;
			exit(1);
		}
		cout &lt;&lt; "Запрос на ввод" &lt;&lt; endl 
			&lt;&lt; " 1 - Список счетов с нулевым балансом" &lt;&lt; endl 
			&lt;&lt; " 2 - Список счетов в кредитным балансом" &lt;&lt; endl 
			&lt;&lt; " 3 - Список счетов с дебетовым сальдо" &lt;&lt; endl 
			&lt;&lt; " 4 - Конец счета" &lt;&lt; endl &lt;&lt; "? ";
		int request; cin &gt;&gt; request;
		while (request != 4)
		{	int account; char name[10] ; float balance;
			inClientFile &gt;&gt; account &gt;&gt; name &gt;&gt; balance;
			switch (request)
			{
			  case 1:
				cout &lt;&lt; endl &lt;&lt; "Счета с нулевым балансом: " &lt;&lt; endl;
				while (! inClientFile.eof())
				{  if (balance == 0)
					outputLine(account, name, balance);
				   inClientFile &gt;&gt; account &gt;&gt; name &gt;&gt; balance;
				}
				break;
			  case 2:
				cout &lt;&lt; endl &lt;&lt; "Счета с кредитовым балансом: " &lt;&lt; endl;
				while (! inClientFile.eof()) 
				{  if (balance &lt; 0)
					outputLine(account, name, balance);
				   inClientFile &gt;&gt; account &gt;&gt; name &gt;&gt; balance;
				}
				break;
			  case 3:
				cout &lt;&lt; endl &lt;&lt; "Счета с дебетовым сальдо: " &lt;&lt; endl;
				while (! inClientFile.eof())
				{  if (balance &gt; 0)
					outputLine(account, name, balance);
				   inClientFile &gt;&gt; account &gt;&gt; name &gt;&gt; balance;
				}
				break;
			}
			inClientFile.clear();	// Установка на начало файла
			inClientFile.seekg(0);
			cout &lt;&lt; endl &lt;&lt; "? "; cin &gt;&gt; request;
		}
		cout &lt;&lt; "Конец счета." &lt;&lt; endl;
		return 0;
	}
	void outputLine (int acct, char *name, float bal)
	{
		cout &lt;&lt; setiosflags(ios :: left) &lt;&lt; setw(10) &lt;&lt; acct &lt;&lt; setw(13) &lt;&lt; name 
			&lt;&lt; setw(7) &lt;&lt; setprecision(2) 
			&lt;&lt; setiosflags(ios :: showpoint | ios :: right) &lt;&lt; bal &lt;&lt; endl;
	}
</b></pre>
<p>&nbsp;</p>
</td></tr>
</tbody></table>
<!-- -------End of Inside table------- -->
<table class="pages" align="center" border="0" cellpadding="0" cellspacing="0">
<tbody><tr colspan="5">
<td>&nbsp;&nbsp;<a href="http://prep.scc/%7Eblp/uch/op/plan_2.htm" class="p">Календарно-тематический план</a>&nbsp;&nbsp;</td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/index.htm" class="p">&nbsp; План лекции &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/01.htm" class="p">&nbsp; 1 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/02.htm" class="p">&nbsp; 2 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/03.htm" class="p">&nbsp; 3 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/04.htm" class="a">&nbsp; 4 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/05.htm" class="p">&nbsp; 5 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/06.htm" class="p">&nbsp; 6 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/07.htm" class="p">&nbsp; 7 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/08.htm" class="p">&nbsp; 8 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/09.htm" class="p">&nbsp; 9 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/10.htm" class="p">&nbsp; 10 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/11.htm" class="p">&nbsp; 11 &nbsp;</a></td>
<td><a href="http://prep.scc/%7Eblp/uch/op/lec/sem_2/s29_32/12.htm" class="p">&nbsp; 12 &nbsp;</a></td>
</tr>
</tbody></table>
<a name="#end"></a>

</body></html>