<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 51</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Параметры функции main()</p>
<p>Во многих операционных системах, в частности DOS и UNIX, имеется возможность передачи из командной строки 
аргументов в функцию main(), если указать список ее параметров:
<p><b><center>int main(int argc, char *argv[], char *envp[])</center></b></p>
<p>Аргументы:<ul>
<li><b>int argc</b> - число аргументов командной строки, посылаемое функции main.
<br>Определяет размер массива argv[]. Это значение всегда равно или больше 1.
<p><li><b>char *argv[]</b> - массив указателей на строки.
<ul type="square"><p><li>argv[0] - определяется как полный маршрут запускаемой программы,
<li>argv[1] - указывает на первую после имени программы строку командной строки,
<li>argv[2] - указывает на вторую после имени программы строку командной строки,
<li>argv[argc - 1] - указывает на последний аргумент, посылаемый функции main
<li>argv[argc] - содержит NULL.</ul>
<p><li><b>char *envp[]</b> - массив указателей на строки, каждая из которых содержит описание одной из переменных среды.
<br>Под средой понимается та программа (обычно это операционная система), которая запустила на выполнение функцию main().
<br>Каждый элемент envp[] содержит строку вида ENVVAR = <значение>
<ul type="square"><p><li>ENVVAR - имя переменной среды, типа PATH или 87.
<li><значение> - значение данной переменной окружения.
<br>Например, C:\DOS;  C:\BORLANDC; - для PATH или YES - для 87.
</ul></ul>
<p><b><i>Назначение параметров функции main()</i></b> - обеспечить связь выполняемой программы с операционной системой, 
точнее, с командной строкой, из которой запускается программа и в которую можно вносить 
данные, то есть передавать исполняемой программе любую информацию.
<p><b><i>Допустимы следующие объявления аргументов:</i></b>
<ul><li>main()
<br>Если внутри функции main() нет необходимости обращаться к информации из командной строки, то параметры опускаются.
<li>main(int argc)<br>Не очень удобно тем, что зная количество параметров, не имеем доступа к ним самим.
<li>main(int argc, char *argv[])
<li>main(int argc, char *argv[], char *envp[])</ul>
<p>Рассмотрим простейшую программу, которая позволяет получить значения аргументов, посылаемых функции main().
<pre>
	#include&lt;conio.h>
	#include&lt;stdio.h>
	#include&lt;stdlib.h>
	void main(int argc, char *argv[], char *envp[])
	{	clrscr(); int i;
		printf("argc = %d\n", argc);
		printf("В командной строке %d параметров\n", argc);
		for(i = 0; i < argc; i++)
			printf("\targv[%d] = %s\n", i, argv[i]);
		printf("Среда содержит строки:\n");
		for(i = 0; envp[i] != NULL; i++)
			printf("\tenvp[%d] = %s\n", i, envp[i]);
		getch();
	}
	<b><i>Возможные результаты работы программы</i></b>
		argc = 1
		В командной строке 1 параметров
			argv[0] = D:\BC_2\EXE_OBJ\F_MAIN1.EXE
		Среда содержит строки:
			envp[0] = PROMPT=$p$g
			envp[1] = winbootdir=C:\WINDOWS
			envp[2] = COMSPEC=C:\WINDOWS\COMMAND.COM
			envp[3] = PATH=C:\WINDOWS;C:\WINDOWS\COMMAND;C:\FAR
			envp[4] = TEMP=C:\Temp
			envp[5] = TMP=c:\Temp
			envp[6] = windir=C:\WINDOWS
			envp[7] = BLASTER=A220 I5 D1 T4
			envp[8] = CMDLINE=c:\borlandc\bin\bc.exe
</pre>
<p>Если для запуска программы использовано интегрированное окружение, то значения 
параметров командной строки можно задать командой Alt \ Run \ Arguments ...
<br>Этот пункт позволяет передавать работающей программе аргументы командной строки 
так, как если бы они были напечатаны в командной строке операционной системы. 
Имя программы давать здесь не нужно, одни только аргументы, разделенные пробелами.
<p>При запуске программы из операционной системы командная строка явно доступна.
<br>Запустим программу на выполнение из командной строки:
<p><center>D:\BC_2\EXE_OBJ\F_MAIN1.EXE ppp qqq</center>
<p>Сравнив полученные результаты с предыдущими результатами, увидим, что изменения претерпели только некоторые из них, а именно:
<pre>
	argc = 3
	В командной строке 3 параметров
		argv[0] = D:\BC_2\EXE_OBJ\F_MAIN1.EXE
		argv[1] = ррp
		argv[2] = qqq

		envp[8] = CMDLINE=F_MAIN1.EXE рр рр
</pre>
<p><b><i>В следующей программе proba01.cpp</i></b> заработная плата вычисляется в соответствии с разрядом <b>r</b> единой тарифной сетки (ЕТС)
по формуле: <b>smin&nbsp;*&nbsp;a[r&nbsp;-&nbsp;1]</b>.
<br>Установлена минимальная ставка первого разряда <b>smin = 480</b> рублей, задан массив тарифных коэффициентов <b>a[18]</b> для разрядов с первого по восемнадцатый.
<p>Функция main() возвращает целочисленное значение int, которое после завершения программы передается в операционную систему (0 - при правильном, 1 - при аварийном завершении программы) и может быть проанализировано.
<br>В списке аргументов функции main() первый аргумент int narg служит для передачи в программу
количества параметров, использованных в командной строке при запуске программы на выполнение (всегда narg&nbsp;&#8805;&nbsp;1).
<br>Если narg&nbsp;==&nbsp;1, то никакого параметра в командной строке явно не указано.
Единственный параметр, передаваемый как значение символьного массива, адресуемого
указателем arg[0] - полное имя файла (маршрут) с исполняемым модулем программы (proba01.exe).
Пусть значение arg[0] равно C:\EXE_OBJ\PROBA01.EXE
<br>При вычислении заработной платы будет использовано smin = 480.
<pre>	// Имя файла proba01.cpp
	#include&lt;conio.h>
	#include&lt;iostream.h>
	// для включения в текст программы средств для обмена со строковыми потоками
	#include&lt;strstrea.h>
	int main(int narg, char **arg)
	{	float smin = 480;		// минимальная ставка первого разряда
		// массив значений тарифных коэффициентов
		float a[] = { 1.00, 1.30, 1.69, 1.91, 2.16, 2.44, 2.76, 3.12, 3.53,
			    3.99, 4.51, 5.10, 5.76, 6.61, 7.63, 8.17, 9.07, 10.07};
		int r;			// разряд тарифной сетки оплаты труда
		clrscr();
		cout << "Оклады по ЕТС оплаты труда\n";
		if(narg == 1)
		{	cout << "по умолчанию минимальный оклад " << smin << " руб.";
			cout << "Для изменения - указать новое значение в командной строке\n";
		}
		else
		{	// чтение из безымянного строкового потока
			istrstream(arg[1]) >> smin;
			cout << "\nОпределен минимальный оклад " << smin << " руб.\n";
		}
		cout << "\nНомер разряда по ЕТС (1 - 18) : "; cin >> r;
		if(r < 1 || r > 18)
		{	cout << "Ошибка в выборе разряда !";
			return 1;
		}
		cout << "Разряду " << r << " соответствует ставка "
			<< (long) (a[r - 1] * smin) << " руб.";
		getch(); return 0;
	}
</pre>
<p>Изменить значение smin можно двумя способами:
<ul><li>Исполнить команды <b>Alt\Run\Arguments\230</b> &lt;Enter>.
<br>В этом случае значение narg станет равно 2, переменная smin будет инициализирована значением 230.
И при очередном исполнении программы <b>Ctrl + F9</b> именно это значение будет использовано в рассчетах.
<p><li>Используя команду <b>C:\EXE_OBJ\PROBA01.EXE 340</b> &lt;Enter>, передать в
программу параметр 340 как значение символьного массива, адресуемого arg[1].
При этом значение narg станет равно 2, а smin получит значение 340.
</ul>

<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>