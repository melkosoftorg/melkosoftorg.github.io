<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 22</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Цикл с параметром - for</p>
<p><b>Используется в том случае, когда известно точное количество повторов, которое 
нужно выполнить (регулярный цикл).</b>
<p>Операторы, находящиеся внутри цикла, выполняются фиксированное число раз, в то время как управляющая переменная цикла 
(индексная переменная) пробегает определенный ряд значений.
<p><center><table width="90%">
<tr><td width="40%" valign="top">
<pre>
	for(выражение 1; выражение 2; выражение 3)
	{
		// тело цикла
		операторы;
	}
</pre>
</td><td valign="top" width="30%" align="center">
<img src="for.gif" alt="Цикл for - цикл с параметром" ismap>
</td><td valign="top">
<pre>
	for(x = a; x <= b; x += h)
	{
		// серия команд тела цикла
		операторы;
	}
</pre>
</td></tr></table></center>
<p>Параметры цикла for, заключенные в скобки, должны разделяться точкой с запятой (позиционный параметр), которая делит пространство внутри скобок на три сектора.
<br>Каждый параметр, занимающий определенную позицию, означает следующее:
<ul>
<p><li type="disc">выражение 1 - начальное значение управляющей переменной цикла; 
<li type="disc">выражение 2 - условие продолжения цикла; 
<li type="disc">выражение 3 - модификация (приращение) управляющей переменной за каждое выполнение цикла.
</ul>
<p>Можно опускать одно, несколько или даже все выражения в операторе for, однако точки с запятой должны ставить всегда.
<br>Если будет опущено "выражение 2" &nbsp;&nbsp;&nbsp;for(x&nbsp;=&nbsp;a;&nbsp;;&nbsp;x&nbsp;+=&nbsp;h),&nbsp;&nbsp;&nbsp;то это будет равносильно тому, что значение выражения "выражение 2" всегда будет иметь значение 1 (истина) и цикл никогда не завершится (такие циклы известны как бесконечные).
<p><b>Цикл for работает следующим образом:</b>
<ol>
<li>Задается начальное значение управляющей переменной цикла x = a.
<li>Выполняются команды тела цикла.
<li>Изменяется значение управляющей переменной цикла x += h.
<li>Проверяется условие окончания или продолжения цикла x <= b.
<ul type="disc">
<li>если условие истинно, то выполняются команды тела цикла, 
<li>если условие ложно, выполнение тела цикла прекращается и выполняется команда, следующая за циклом.
</ul></ol>
<p>В теле цикла может быть один оператор программы, но если их несколько (составной оператор), то их обязательно надо заключить в фигурные скобки <b>{&nbsp;}</b>.
<p>Цикл for можно использовать и без инструкций (пустой цикл) с целью создания задержки в программе пока значения num не возрастет от 1 до 1001. Для этого достаточно в конце for поставить точку с запятой <b>;</b>
<pre>
		for (num = 1; num <= 1000; num++) ;
</pre>
<p>Рассмотрим пример программы построения разноцветных концентрических окружностей. Радиус окружности зависит от ее цвета, который изменяется в цикле от 1 (синий) до 15 (белый). Выполнение цикла закончится, когда значение цвета станет равно 16.
<p><center><table width="85%">
<tr><td width="30%" valign="top">
<img src="circle.gif" alt="Блок-схема" ismap>
</td><td valign="top">
<pre>
#include&lt;graphics.h>
#include&lt;conio.h>
#include&lt;stdio.h>
#include&lt;stdlib.h>
#include"..\\h\\init.h"
main()
{
	init();
	int i;
	setbkcolor(0); setlinestyle(1, 1, 3);
	for(i = 1; i <= 15; i++)
	{
		setcolor(i);
		circle(300, 240, i * 10);
	}
	getch(); closegraph();
}
</pre>
</td><td valign="top">
<img src="okr.gif" alt="Концентрические окружности" ismap>
</td></tr></table></center>
<p>Циклы for удобно использовать, когда известно, от какого начального значения, до какого конечного значения, с каким шагом изменяется управляющая переменная цикла.
<br>Рассмотрим пример табулирования значения функции y = sin(x) на отрезке [0&deg;, 180&deg;] с шагом 10&deg;.
<br>В этом примере значения параметров следующие: a = 0, b = 180, h = 10.
<p><center><table width="85%">
<tr><td width="30%" valign="top">
<p><img src="i13_02.gif" alt="sin(x)" ismap>
</td><td valign="top"><img src="osi.gif" alt="Ось x" ismap>
<pre>
#include&lt;conio.h>
#include&lt;iostream.h>
#include&lt;iomanip.h>
#include&lt;math.h>
void main()
{
	float a = 0, b = 180, h = 10, x, y; clrscr();
	for(x = a; x <= b; x += h)
	{
		y = sin(x * M_PI / 180);	// угол переведен в радианы
		cout << "  sin(" << setw(3) << x << ") = " << y << endl;
	} getch();
}
</pre>
</td></tr></table></center>
<p>Теперь, когда у нас имеется алгоритм вычисления функций, не играет роли, значение какой функции с допустимыми для нее значениями аргументов вычислять.
<br>Например, используя цикл for, вычислить значение функции 
<img src="pic_01.gif" alt="pic_01.gif" ismap align="middle"> при значениях аргумента x, 
изменяющегося от 1,2 до 3,8 с шагом 0,4.
<br>Поскольку машинное представление значения x несколько отличается от ожидаемого нами, мы не получим значения функции при x = 3.8.
<br>Чтобы обойти это препятствие, надо конечное значение управляющей переменной цикла взять на немножко больше, чем в задании, но меньше, чем на значение шага. Например, можно записать x <= 3.81.
<p><table align=center border=0 width="70%">
<tr walign ="top"><td><pre>
#include&lt;conio.h&gt;
#include&lt;math.h&gt;
#include&lt;iomanip.h&gt;
#include&lt;iostream.h&gt;
main()
{
	clrscr();
	float x, y;
	cout.precision(8);
	for(x = 1.2; x <= 3.8; x += .4)
	{
		y = sqrt(cos(x) + 2 * sqrt(sin(x) + sqrt(exp(x))));
		cout << setw(4) << "x = " << setw(10) << x 
		     << "y = " << y << endl;
	} getch(); return 0;
}
</pre>
</td><td>Машинное представление чисел <br>отличается <br>от их истинных значений 
<br>(смотрите значения x)
<br><pre>
Результаты:
x = 1.20000005 y = 1.9187206
x = 1.60000002 y = 1.88746428
x = 2	          y = 1.84203529
x = 2.4000001   y = 1.80565655
x = 2.80000019 y = 1.80231321
x = 3.20000029 y = 1.85107541
x = 3.60000038 y = 1.95936644
</pre>
</td></tr>
</table>
<p>Значение управляющей переменной цикла не обязательно увеличивать, его можно и уменьшать, задав отрицательное значение шага.
<br>В этом случае конечное значение управляющей переменной цикла должно быть меньше начального.
<br>Например, вычислить кубы всех целых чисел в диапазоне от 5 до -3.
<br>В этом примере значения параметров следующие: a = 5, b = -3, h = -1.
<br>Управляющую переменную цикла обозначим i. Блок схема алгоритма аналогична предыдущим для цикла for.
<p><center><table width="70%">
<tr><td width="50%" valign="top">
<pre>
#include&lt;conio.h>
#include&lt;iostream.h>
main()
{
	clrscr();
	int i, a = 5, b = -3, y;
	for(i = a; i >= b; i--)
	{
		y = i * i * i;
		cout << "y = " << i << " * " << i << " * " << i
			<< " = " << y << endl;
	}
	getch();
}
</pre>
</td><td valign="top">
<i>Результаты работы программы</i>
<pre>
y = 5 * 5 * 5 = 125
y = 4 * 4 * 4 = 64
y = 3 * 3 * 3 = 27
y = 2 * 2 * 2 = 8
y = 1 * 1 * 1 = 1
y = 0 * 0 * 0 = 0
y = -1 * -1 * -1 = -1
y = -2 * -2 * -2 = -8
y = -3 * -3 * -3 = -27
</pre>
</td></tr></table></center>


<p><b>Оператор запятая</b> позволяет вводить составные выражения в оператор цикла for.
<p><center><table width="90%">
<tr valign="top"><td width="65%">
<pre>
#include&lt;conio.h>
#include&lt;stdio.h>
void main()
{
	clrscr();
	int up, down;
	char msg[] = "Значение ";
	for(up = 1, down = 19; up <= 10; up++, down -= 2)
		printf("%-10s up = %2d растет,   down = %2d уменьшается \n", msg, up, down);
	getch();
}
</pre>
</td><td>
<i>Результаты работы программы</i>
<pre>
Значение   up =  1 растет,   down = 19 уменьшается
Значение   up =  2 растет,   down = 17 уменьшается
Значение   up =  3 растет,   down = 15 уменьшается
Значение   up =  4 растет,   down = 13 уменьшается
Значение   up =  5 растет,   down = 11 уменьшается
Значение   up =  6 растет,   down =  9 уменьшается
Значение   up =  7 растет,   down =  7 уменьшается
Значение   up =  8 растет,   down =  5 уменьшается
Значение   up =  9 растет,   down =  3 уменьшается
Значение   up = 10 растет,   down =  1 уменьшается
</pre>
</td></tr></table></center>
<p>И первое, и последнее выражение в этом цикле for состоит из двух выражений, инициализирующих и модифицирующих переменные up и down. Можно сделать эти выражения сколь угодно сложными.
<br>Управляет циклом переменная up (up = 1; up <= 10; up++), ее значение изменяется от 1 до 10 с шагом 1.
<br>Переменная же down изменяется с шагом -2 при каждой очередной итерации. 
<p>Классическим примером использования цикла с параметром является задача вычисления значения суммы S и произведения P k членов последовательности, заданных формулой общего члена последовательности.
<br>Пусть общий член последовательности вычисляется по формуле
<img src="i13_04.gif" alt="Формула общего члена ряда" align="middle">
<p><table width="95%" align="center">
<tr valign="top"><td width="35%" align="center">
<img src="i13_03.gif" alt="Цикл с параметром для накопления сумм и произведений" ismap>
</td><td>
<p>где
<ul>
<p>k - количество членов последовательности, 
<br>n = 1, 2, 3, ..., k - номер члена последовательности. 
</ul>
<p><b>При накоплении сумм и произведений надо помнить:</b>
<ol>
<li>Начальные значения накапливаемых величин необходимо задать до начала цикла, в котором происходит накопление 
<ul type="disc">
<li>при накоплении суммы начальное значение S = 0,
<li>при накоплении произведения начальное значение P = 1.
</ul>
<p><li>Накопление суммы S = S + a, произведения P = P * a производить в цикле после вычисления значения a.
<p><li>Вывод значений частичных сумм и произведений производить в цикле после их вычисления.
<p><center><table width="75%">
<tr><td width="50%">
S<sub>1</sub> = a<sub>1</sub>
<br>S<sub>2</sub> = a<sub>1</sub> + a<sub>2</sub>
<br>...
<br>S<sub>k</sub> = a<sub>1</sub> + a<sub>2</sub> + ... + a<sub>k</sub>
</td><td>
P<sub>1</sub> = a<sub>1</sub> 
<br>P<sub>2</sub> = a<sub>1</sub> &#8729; a<sub>2</sub>
<br>...
<br>P<sub>k</sub> = a<sub>1</sub> &#8729; a<sub>2</sub> &#8729; ... &#8729; a<sub>k</sub>
</td></tr></table></center>
<p><li>Вывод значений накопленных сумм и произведений производить за циклом, после их накопления.
</ol>
</td></tr>
</table>
<p>Тело цикла - это команды: вычислить очередной член ряда, добавить к сумме, добавить к произведению, вывести значения частичной суммы и произведения.
<br>Управляющей переменной цикла является n. Все необходимые действия с нею 
(задать начальное значение, изменить переменную, проверить условие окончания или повторения цикла, управлять циклом)
обозначены в блоке начала цикла, изображенном в блок-схеме в виде шестиугольника.
Из цикла выйдем при значении  n&nbsp;>&nbsp;k.
<p><center><table width="75%">
<tr><td width="70%" valign="top">
<pre>
#include&lt;conio.h>
#include&lt;iostream.h>
#include&lt;iomanip.h>
void main()
{
	int k, n; float a, s = 0, p = 1; clrscr();
	cout << "k = "; cin >> k;
	for(n = 1; n <= k; n++)
	{
		a = (float) n * n / (n * n * n + 1);
		cout << setw(4) << n << ".  a = " << a << endl;
		s += a;
		p *= a;
	}
	cout << "\ns" << k << " = " << s << "\tp" << k << " = " << p << endl;
	getch();
}
</pre>
</td><td valign="top">
<i>Результаты работы программы</i>
<pre>
k = 4
1.  a = 0.5
2.  a = 0.444444
3.  a = 0.321429
4.  a = 0.246154

s4 = 1.512027   p4 = 0.017582
</pre>
</td></tr></table></center>
<p>В команде &nbsp;&nbsp;&nbsp;a = <b>(float)</b> n * n / (n * n * n + 1);&nbsp;&nbsp;&nbsp; программы показано, каким образом осуществляется преобразование типов.
<br>В отсутствии преобразования (float) значения всех членов ряда окажутся равными нулю - значению целой части числа.
<p>Несколько примеров программного кода с циклом for для построения графического изображения. Чтобы посмотреть, какие изображения будут построены, надо вставить этот программный код в тело функции main() файла gr_proba.cpp и запустить его на исполнение.
<pre>
	int color, x, y, dx, dy, r;
	setcolor(15);
	// черная дыра
	for(dx = 50; dx > 4; dx--)
	{
		x = 4 * dx; y = 150 / dx;
		ellipse(getmaxx() / 2, 30 + 10 * y, 0, 360, x, x * .3);
	}
	// сатурн
	float st = .77, sp = .77, sr;
	setlinestyle(1, 1, 3); r = 70;
	circle(getmaxx() / 4, 3 * getmaxy() / 4, r);
	setlinestyle(1, 1, 1);
	for(dx = 0; dx < 30; dx += 5)
	{
		st -= .015; sr = st * M_PI; sp += .04;
		x = 100 + dx; y = .3 * x;
		ellipse(getmaxx() / 4, 3 * getmaxy() / 4 , sr * 180 / M_PI, sp * 180 / M_PI, x, y);
	}
</pre>
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr>
<td>&nbsp&nbsp<a href="../../../plan_1.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="lec_m.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>