<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Модели памяти</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Модели памяти для программ на C++</p>
<p>Большинство процессоров позволяют по-разному организовать работу с памятью. Каждый из таких методов организации памяти называется моделью памяти. 
<br>Модель памяти определяет такие характеристики, как размер указателя, то есть адреса, и предельную величину самостоятельного объекта.
<p><b><center>Сегментация памяти</center></b>
<p>Микропроцессор 8086 имеет сегментированную архитектуру памяти. Он обеспечивает общее адресное пространство величиной 1 Мб, однако может прямо адресовать только 64 К.
<br>Логическую единицу памяти размером 64 К называют сегментом, отсюда и название "сегментированная архитектура памяти". 
<ol><li>8086 работает с 4 различными сегментами:<ul>
<p><li>сегмент кода - содержит машинную программу,
<li>сегмент данных - содержит данные, 
<li>сегмент стека - содержит стек,
<li>сегмент дополнительных данных обычно используют для дополнительных данных.</ul>
<p><li>8086 имеет 4 16-битных сегментных регистра, называемых CS, DS, SS и ES; они указывают на сегменты кода, данных, стека и дополнительных данных соответственно; 
<p><li>сегмент может быть расположен в любом месте памяти.
</ol>
<p>Учитывая сегментированную природу памяти процессоров семейства 8086, можно организовать память в соответствии с одной из шести моделей памяти, перечисленных в порядке возрастания времени исполнения кода:
<ul><p><li><b>Tiny - минимальная</b>
<br>Все четыре сегментных регистра (DS, CS, SS, ES) указывают на один и тот же адрес, использующий 16 бит. Это означает, что код, данные и стек должны разместиться в пределах одного 64-килобайтного сегмента.<br>Используют эту модель в случае маленькой оперативной памяти.<br>Программы с крохотной моделью памяти могут быть переведены в *.COM формат. 
<p><li><b>Small - малая</b>
<br>Программный сегмент и сегмент данных различны и не перекрываются, поэтому 
весь программный код должен разместиться в пределах одного 64-килобайтного сегмента, 
все данные - в пределах другого 64-килобайтного сегмента. Все указатели имеют длину 16 бит.
<br>Сегменты стека и дополнительные сегменты данных начинаются с того же адреса, что и сегмент данных.
<br>Программа исполняется почти так же быстро, как и в предыдущей модели. Это наилучшая модель для большинства реализаций. 
<p><li><b>Medium - средняя</b>
<br>Все данные должны разместиться в пределах одного 64-килобайтного сегмента, в то время, как программный код может использовать несколько сегментов - до 1 Мб.
<br>Все указатели на данные имеют длину 16 бит, но все вызовы и переходы требуют 32-разрядных адресов.
<br>Эта модель предоставляет быстрый доступ к данным, но медленное исполнение кода, является наилучшей для больших программ, которые не хранят в памяти больших обьемов данных. 
<p><li><b>Compact - компактная</b>
<br>Прямо противоположна средней, то есть программы ограничиваются величиной в 64 К, а данные, но не статические, могут быть до 1 Мб.
<br>Однако, ни один элемент данных не может превышать 64 К.
<br>Все указатели на данные - 32-разрядные, но переходы и вызовы могут использовать 16-разрядные адреса.
<br>Эта модель наиболее удобна, если программа маленькая, но необходимо адресовать большие объемы данных - медленный доступ к данным, но более быстрое исполнение кода. 
<p><li><b>Large - большая</b>
<br>И программа, и данные занимают область до 1 Мб. Все указатели 32-разрядные. Однако, ни один элемент данных не может превышать 64 К.
<br>Эта модель необходима только для очень больших программных продуктов - медленное исполнение программы. 
<p><li><b>Huge - максимальная</b>
<br>Как программный код, так и данные используют несколько сегментов. Все указатели 32-разрядные. Отдельные элементы данных могут превышать 64 К.
<br>Самое медленное исполнение программы.</ul>
<p>Такие процессоры, как 80486 и Pentium, могут работать еще с одной моделью памяти - плоской.
<ul><p><li><b>Flat - плоская</b>
<br>Используется при работе в 32-разрядном режиме. Принципы ее работы соответствуют интуитивному представлению большинства людей о работе памяти. Все адреса, от начала и до конца, представляют собой единые уникальные значения. Однако, вследствие необходимости обеспечения обратной совместимости, 16-разрядные сегментированные модели все еще широко распространены.
</ul>
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
</tr>
</table>
<a name=#end></a>
</body>
</html>