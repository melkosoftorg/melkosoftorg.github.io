<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 26</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Динамическое распределение памяти</p>
<p>В рассматриваемой ниже программе вместо адреса переменной iptr присваивается значение (адрес некоторой 
ячейки памяти), возвращаемое функцией malloc, описанной в библиотеке alloc.h, 
содержащей функции управления памятью. <br>По этому адресу присваивается значение 421 
и переменная *iptr принимает значение 421. <br>Если выполним программу, получим 
значение iptr иное, чем в предыдущей программе, но значение *iptr останется равным 421.
<pre>
	#include&lt;stdio.h>
	#include&lt;conio.h>
	#include&lt;alloc.h>
	main()
	{
		int *iptr;
		iptr = (int *) malloc(sizeof(int));
		*iptr = 421; clrscr();
		printf("Содержимое iptr: %p\n", iptr);
		printf("Адресуемое значение: %d\n", *iptr);
		getch(); return 0;
	}
		Результаты	Содержимое iptr: 910D:0004
				Адресуемое значение: 421
</pre>

<b><center>Оператор &nbsp &nbsp iptr = (int *) malloc(sizeof(int));</center></b>
<ul>
<li>sizeof(int) - возвращает количество байтов, требуемое для хранения переменной типа 
int (2 байта)
<li>malloc(num) - резервирует num последовательных байтов доступной памяти в 
компьютере, а затем возвращает начальный адрес размещения в памяти этой последовательности байтов
<li>(int *) - указывает, что этот начальный адрес - указатель на данные типа int
<li>iptr - адрес, полученный с помощью функции malloc, запоминается в iptr, то есть, 
получена динамически созданная целая переменная, к которой можно 
обращаться при помощи идентификатора *iptr
<li>Команда: "Выделить в памяти компьютера некоторый участок для переменной типa int, 
присвоить начальный адрес этого участка переменной iptr, являющейся указателем на 
переменную типа int".
</ul>
Выражение вида (int*) известно как выражение приведения типа (type casting).
<p>При отсутствии данного выражения можно получить сообщение об ошибке:
<p><center>"Non-portable pointer assignment."
<br>(Непереносимое в другие системы присваивание указателя)</center></p>
<p>Из соображений переносимости программного обеспечения, лучше всегда 
предусматривать явное приведение типов в программах, поскольку нет гарантии, что iptr 
указывает на свободный участок памяти. iptr будет содержать некоторое значение, 
которое вы будете использовать в качестве адреса, но вам не будет известно, не 
используется ли уже этот раздел памяти для других целей. 
<p><b><i>Правило использования указателей:</i></b> указатель всегда должен иметь адрес до своего 
использования в программе, то есть не присваивайте целое значение *iptr без 
предварительного присвоения адреса в iptr. 
<p>Функция malloc запрашивает память у операционной системы по мере надобности. 
<br>Поскольку и другие действия программы могут вызывать запросы памяти, которые 
удовлетворяются независимо от этого распределения памяти, пространство, которым 
заведует malloc, не обязательно представляет собой связанный кусок памяти. Поэтому 
свободная память хранится в виде списка блоков, каждый из которых содержит размер, 
указатель на следующий блок и само пространство. Блоки в списке хранятся в порядке 
возрастания адресов памяти, при этом последний блок (с самым большим адресом) 
ссылается на первый. 
<br><b><i>Значение, которое возвращает malloc - это адрес начала выделенной области памяти.</i></b>
<br>При возникновении запроса на память просматривается список свободных блоков, пока не 
обнаружится достаточно большой блок - "поиск первого подходящего" - в отличие от 
"поиска наилучшего подходящего", когда отыскивается наименьший блок из числа 
удовлетворяющих запросу.
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=a>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>