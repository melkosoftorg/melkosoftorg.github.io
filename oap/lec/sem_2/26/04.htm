<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 26</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Указатели и функции</p>
<p>Стандартным методом передачи аргумента в функцию является передача по значению. Это означает,
что в функцию передается копия значения аргумента и функция никак не может изменить это значение.
То есть данные снаружи функции защищены от неосторожного вмешательства.
<p>Альтернативным способом является передача указателей на переменные вместо значений этих переменных.
Этот метод называется передачей аргументов по адресу. Поскольку функция получает адрес исходной переменной,
она может изменить ее значение через этот адрес.
<p>Если нам необходимо изменять значения аргументов, то передача по адресу является преимуществом; если же этого делать не следует,
то передача по адресу становится опасной из-за возможности нежелательной модификации переменной.
<p>Рассмотрим функцию:
<pre>
	void swap(int *a, int *b)
	{
		int temp;
		temp = *a; *a = *b; *b = temp;
	}
</pre>
<p>Функция swap (обмен) объявляет два формальных параметра a и b, как указатели на 
данные типа int. Это означает, что функция swap работает с адресами целых переменных, 
а не с их значениями. Поэтому будут обработаны данные, адреса которых переданы 
функции во время обращения к ней. Программа заменяет значение i на значение j 
(переставляет местами).
<pre>
	#include&lt;stdio.h&gt;
	#include&lt;conio.h&gt;
	void swap(int *a, int *b);
	main()
	{
		int i, j;
		i = 421; j = 53; clrscr();
		printf("До обращения	: i = %4d, j = %4d\n", i, j);
		swap(&i, &j); 
		printf("После обращения	: i = %4d, j = %4d\n", i, j);
		getch(); return 0;
	}
	Результаты:
		До обращения	   : i =  421, j =   53
		После обращения : i =    53, j =  421
</pre>
<p>При вызове функции, swap(&i, &j) значения двух фактических параметров (&i, &j) 
присваиваются двум формальным параметрам (a и b), обрабатываемым непосредственно 
операторами функции swap.
<p><table  align=center width=90% border=1 cellpadding=0 cellspacing=5>
<tr><td class=rule>
<ol>
<b>Неправильное употребление указателей.</b> 
<br>Использование неинициализированных 
указателей. Серьезная опасность таится в присвоении значения по адресу, 
содержащемуся в указателе, без первоначального присвоения адреса этому указателю.
<pre>
Например:	main()
		{
			int *iptr;
			*iptr = 421;
			printf("*iptr = %d\n",*iptr);
		}
</pre>
<p>Ловушка опасна тем, что программа, содержащая ее, может быть "верна" и компилятор 
может не выдать никаких сообщений во время компиляции такой программы. Указатель 
iptr имеет некоторый произвольный адрес, по которому запоминается значение 421. В 
больших программах возрастает вероятность разрушения других данных, поскольку 
вполне возможно, что по адресу iptr уже хранится другая информация. Если вы 
используете модель самой маленькой памяти tiny, в которой сегменты программы и 
данных занимают одну и ту же область памяти, то можно испортить свой же загрузочный 
модуль.
<ol>
</td></tr>
</table>
<p>Рассмотрим три функции, каждая из которых содержит один и тот же набор команд, позволяющих поменять местами два числа,
но формальные параметры разного вида: переменные, указатели, ссылки. Эта программа демонстрирует разницу между передачей аргументов по значению и по адресу.
<ul>
<li type="disc">void Ntr(double a, double b) - вызываем по значению Ntr(d, e); - значения фактических параметров d и e не изменяются.
<li type="disc">void Ptr(double *a, double *b) - вызываем по ссылке Ptr(&d, &e); - значения фактических параметров d и e изменяются, меняются местами.
<li type="disc">void Ref(double &a, double &b) - вызываем по значению  Ref(d, e); - значения фактических параметров d и e изменяются, меняются местами.
</ul>
<pre>
	#include&lt;conio.h>
	#include&lt;iostream.h>
	// В функцию параметры передать по значению
	void Ntr(double a, double b)
	{	double c = a;
		a = b; b = c;
	}
	// Формальные параметры - указатели 
	void Ptr(double *a, double *b)
	{	double c = *a;
		*a = *b; *b = c;
	}
	// Формальные параметры - ссылки
	void Ref(double &a, double &b)
	{	double c = a;
		a = b; b = c;
	}
	void main()
	{	clrscr();
		double d = 1.23, e = 4.56;
		Ntr(d, e);		// передать значения d и e
		cout << "\nNtr: d = " << d << "\te = " << e;
		Ptr(&d, &e);	// вызов функции по ссылке
		cout << "\nPtr: d = " << d << "\te = " << e;
		Ntr(d, e);		// передать значения d и e
		cout << "\nNtr: d = " << d << "\te = " << e;
		Ref(d, e);	// передать значения d и e
		cout << "\nRef: d = " << d << "\te = " << e;
		getch();
	}
	<i>Результаты:</i>	Ntr: d = 1.23   e = 4.56
			Ptr: d = 4.56   e = 1.23
			Ntr: d = 4.56   e = 1.23
			Ref: d = 1.23   e = 4.56
</pre>
<p>Вполне возможны функции, в которых одни аргументы передаются по значению, а другие по адресу.
Важно лишь правильно обращаться с такими аргументами внутри функций и использовать знак ссылки по указателю с аргументами, переданными по адресу.
<b><p align=center>Указатели типа void</p></b>
<p>Ключевое слово void можно использовать для создания нетипизированных указателей, то есть,
указателей на объекты данных любого базового типа.
<br>Например, &nbsp;&nbsp;&nbsp;<b>void *ptr;</b>&nbsp;&nbsp; указатель ptr указывает на объект памяти с временно неопределенным типом.
<p>Рассмотрим функцию halt(void *pval, char type), обрабатывающую аргументы разных типов, имеющую в качестве аргумента указатель типа void.
<br>При вызове этой функции в нее можно передать указатель любого типа, а также информацию о том, на значение какого типа она указывает.
<p>Операция &nbsp;&nbsp;&nbsp;<b>(тип *) pval</b>&nbsp;&nbsp;&nbsp; - операция приведения типов.
<br>Чтобы обратиться по указателю pval к значению типа int, надо использовать выражение:&nbsp;&nbsp;<b>*(int *) pval</b>
<pre>
	#include&lt;stdio.h>
	#include&lt;conio.h>
	void halt(void *pval, char type)
	{	switch(type)
		{	case 'i': *(int*) pval /= 4; break;
			case 'l': *(long*) pval /= 8; break;
			case 'f': *(float*) pval /= 2; break;
			case 'd': *(double*) pval /= 2.5; break;
		}
	}
	void main(void)
	{	clrscr();
		int i =40;
		long l = 100000;
		float f = 14.468;
		double d = 31.474461;
		printf("\n i = %d", i);
		printf("\n l = %ld", l);
		printf("\n f = %f", f);
		printf("\n d = %lf\n", d);

		halt(&i, 'i');
		halt(&l, 'l');
		halt(&f, 'f');
		halt(&d, 'd');
		printf("\n i = %d", i);
		printf("\n l = %ld", l);
		printf("\n f = %f", f);
		printf("\n d = %lf\n\n", d); getch();
	}
	<i>Результаты:</i>	i = 40
			l = 100000
			f = 14.468000
			d = 31.474461

			i = 10
			l = 12500
			f = 7.234000
			d = 12.589784
</pre>
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=a>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>