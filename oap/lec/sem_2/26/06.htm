<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 26</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Адресная арифметика</p>
<p>Рассмотрим программу:
<pre>
	#include&lt;stdio.h&gt;
	#include&lt;conio.h&gt;
	#include&lt;alloc.h&gt;
	main()
	{
		#define NUM 3
		int *list, i; clrscr();
		list = (int *) calloc(NUM, sizeof(int));
		*list = 421; *(list + 1) = 53; *(list + 2) = 1806; 
		printf("Список адресов: ");
		for (i = 0; i < NUM; i++)
			printf("%4p ", (list + i));

		printf("\nСписок значений:");
		for (i = 0; i < NUM; i++)
			printf("%4d ", *(list+i));
		getch(); return 0;
	}
    	Результаты	Список адресов:     9125:0004   9125:0006   9125:0008
			Список значений:   421             53               1806
</pre>
<p><b><i>Вместо функции malloc использована функция calloc c двумя параметрами:</i></b>
<ol>
<li>показывает, для скольких элементов NUM будет происходить резервирование памяти, 
<li>показывает величину каждого элемента в байтах sizeof(int). 
</ol>
<p>После обращения к функции calloc, list указывает на участок памяти размером 6 байт (3 &#8729; 2), достаточный для хранения трех переменных типа int.
<ul>
<li>*list = 421 - запомнить 421 в переменной типа int, расположенной по адресу, хранящемуся в переменной <i>list</i>. 
<li>*(list + 1) = 53 - адрес байта, определенного выражением <i>list&nbsp;+&nbsp;(1&nbsp;&#8729;&nbsp;sizeof(int))</i>, 
поэтому, значение 53 не испортит значения 421, так как для этого значения будет 
выделена другая ячейка памяти (адрес&nbsp;+&nbsp;1&nbsp;&#8729;&nbsp;2&nbsp;байт). 
<li>(list + 2) = 1806 - адрес байта list + (2 &#8729; sizeof(int)) и 1806 запоминается, не затрагивая два предыдущих значения. 
</ul>
<p>ptr + i - адрес памяти, определяемый выражением ptr + (i &#8729; sizeof(int)).
<pre><b><i>Выводы:</i></b>	адреса различаются не в один байт, а в два, 
		все три значения хранятся отдельно. 
</pre>
<p><b><i>Итог:</i></b>	если вы используете ptr, указатель на тип type, то выражение 
(ptr + 1) представляет адрес памяти (ptr + (1 &#8729; sizeof(type))), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
где sizeof(type) возвращает количество байт, занимаемых переменной типа type.
<p align=center class=dbi>Распределение дополнительной памяти с помощью функции realloc()</p>
<p>Функция realloc() изменяет размер блока памяти, ранее созданного с использованием функции malloc() или calloc().
<pre>
<b>Синтаксис</b>	void *realloc(void *block, size_t size);
		
<b>Прототип в</b>	alloc.h, stdlib.h
</pre>
<p>Аргумент <i>block</i> указывает на исходный блок памяти. Новый размер в байтах указывается параметром <i>size</i>.
<ul>
<li type="disc">Если для расширения блока, находящегося по адресу <i>block</i>, имеется достаточно памяти, то производится ее выделение в нужном количестве и функция возвращает <i>block</i>.
<li type="disc">Если памяти недостаточно, то создается новый блок размером <i>size</i>, и имеющиеся данные копируются из старого блока в начало нового. Старый блок освобождается, функция возвращает указатель на новый блок памяти.
<li type="disc">Если аргумент <i>block</i> равен <i>NULL</i>, то функция действует как <i>malloc()</i>: выделяет блок памяти размером <i>size</i> байт и возвращает указатель на него.
<li type="disc">Если аргумент <i>size</i> равен 0, блок памяти по адресу <i>block</i> освобождается и функция возвращает <i>NULL</i>.
<li type="disc">Если для перераспределения недостаточно памяти, функция возвращает <i>NULL</i>, исходный блок остается неизмененным.
</ul>
<pre>
	#include&lt;stdio.h>
	#include&lt;string.h>
	#include&lt;stdlib.h>
	#include&lt;conio.h>
	void main(void)
	{
		char buf[80], *mess;
		clrscr();
		// Ввод строки
		puts("Текст: "); gets(buf);
		// Размещение первоначального блока и копирование строки в него
		mess = (char *) realloc(NULL, strlen(buf) + 1);
		strcpy(mess, buf); puts(mess);
		// Ввод еще одной строки
		puts("\nЕще текст: "); gets(buf);
		// Расширение блока и присоединение к нему новой строки
		mess = (char *) realloc(mess, (strlen(mess) + strlen(buf) + 1));
		strcat(mess, buf); puts(mess);
		// освободить блок памяти на который указывает mess
		free(mess);
		getch();
	}
	<i>Результаты:</i>
			Текст:
			Вводим текст
			Вводим текст

			Еще текст:
			Дополняем его
			Вводим текст Дополняем его
</pre>
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=a>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>