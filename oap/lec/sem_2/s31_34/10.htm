<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | СР 31_34</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=a>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=p>&nbsp 11 &nbsp</a></td>
<td><a href="12.htm" class=p>&nbsp 12 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual><p align=center class=dbi><br>Пример: программа обработки запросов</p>
<p>Рассмотрим реальную программу обработки запросов, использующую файл произвольной выборки для действительно "мгновенного" доступа.
<br>Программа оперирует с информацией по банковским счетам
<ul><li>обновляет существующие счета,
<li>добавляет новые счета,
<li>уничтожает старые,
<li>создает текстовый файл для форматированной печати всех текущих счетов.
</ul>
<p>Нами создан файл credit.dat и выполнена вставка в файл начальных данных.
<br>Программа имеет пять опций.
<ul>
<li><b><i>Опция 1</i></b> вызывает функцию textFile, которая создает текстовый файл с именем print.txt для последующей форматированной печати.
<br>Функция textFile принимает объект fstream в качестве аргумента, который используется при вводе данных из файла credit.dat.
<br>Функция textFile использует функцию-элемент read класса istream и методы последовательного доступа к файлу для ввода данных из файла credit.dat.
<br>Функция outputLine используется для вывода данных в файл print.txt.
<br>Функция textFile использует функцию-элемент seekg класса istream для того, чтобы указатель позиции указывал на начало файла.
<br>После выбора опции 1 файл print.txt будет содержать:
<pre>
	Счет	Фамилия	Имя	Баланс
	2	Иванов		Петр	0.00
	8	Сидоров	Иван	654.30
	11	Сидоров	Петр	78.33
	23	Петров		Сидор	43.11
	67	Петров		Иван	-11.98
</pre>
<li><b><i>Опция 2</i></b> вызывает функцию updateRecord для обновления счета.
<br>Функция будет обновлять только существующую запись, поэтому функция сначала определяет, не является ли указанная запись незанятой. Запись считывается в структуру client с помощью функции-элемента read класса istream, затем client.acctNum сравнивается с нулем, чтобы определить, содержит ли запись какую-либо информацию.
<br>Если client.acctNum - нуль, то печатается сообщение, констатирующее, что запись является пустой, и на экран выводятся элементы меню.
<br>Если запись содержит какие-либо сведения, то функция updateRecord выводит запись на экране, используя функцию outputLine, затем вводит данные, вычисляет новый баланс и перезаписывает данных в файле.
<br>Типичный вывод для этой опции приведен ниже:
<pre>
	Введите счет, который следует обновить (1-100): 23
		23    Петров          Сидор           43.11

	Введите расход (+) или доплату (-): +27.89
		23    Петров          Сидор           71.00
</pre>
<li><b><i>Опция 3</i></b> вызывает функцию newRecord для добавления нового счета в файл.
<br>Если пользователь вводит номер существующего счета, то newRecord выводит сообщение о том, что счет уже имеется, и выводит на экран элементы меню.
<br>Типичный вывод для опции 3 следующий:
<pre>
	Введите новый номер счета (1 - 100): 41
	Введите фамилию, имя, баланс
	? Волкова Татьяна 7.02
</pre>
<li><b><i>Опция 4</i></b> вызывает функцию deleteRecord для удаления записи из файла.
<br>Пользователю печатается приглашение ввести номер счета. Только существующая запись может быть удалена. Поэтому, если указанный счет является пустым, выводится сообщение об ошибке. Если счет существует, то он заново инициализируется путем копирования в файл незаполненной записи (blank-Client). На экран выводится сообщение о том, что запись удалена.
<br>Типичный вывод для опции 4 следующий:
<pre>
	Введите номер счета для удаления (1 - 100) : 23
	Счет № 23 удален.
</pre>
<li><b><i>Опция 5</i></b> завершает выполнение программы.
<br>Файл "credit.dat" открывается путем создания объекта fstream для чтения и записи попеременным использованием режимов &nbsp;<b>ios&nbsp;::&nbsp;in</b>&nbsp; и &nbsp;<b>ios&nbsp;::&nbsp;out</b>.
</ul>
<pre>
	// Эта программа последовательно читает файл произвольного
	// доступа, обновляет данные, уже записанные в файл, создает
	// новые данные, которые размещаются в файле, и удаляет
	// уже имеющиеся в файле старые данные
	#include&lt;iostream.h>
	#include&lt;fstream.h>
	#include&lt;iomanip.h>
	#include&lt;stdlib.h>
	struct clientData
	{
		int acctNum; 
		char lastName[15]; 
		char firstName[10] ; 
		float balance;
	};
	int enterChoice(void);
	void textFile(fstream&);
	void updateRecord(fstream&);
	void newRecord(fstream&);
	void deleteRecord(fstream&);
	void outputLine (ostream&, clientData);
	main()
	{
		fstream inOutCredit("credit.dat", ios :: in | ios :: out);
		if ( ! inOutCredit)
		{
			cerr << "Файл не может быть открыт." << endl;
			exit (1);
		}
		int choice;
		while ( ( choice = enterChoice()) != 5 )
		{
			switch (choice)
			{	case 1:	textFile(inOutCredit); break;
				case 2:	updateRecord(inOutCredit); break;
				case 3:	newRecord(inOutCredit); break;
				case 4:	deleteRecord(inOutCredit); break;
				default:	cerr << endl << "Повторите ввод" << endl;
					break;
			}
			inOutCredit.clear();	//сброс индикатора конца файла
		}
		return 0;
	}
	// Приглашение выбрать раздел меню
	int enterChoice(void)
	{
		cout << endl << "Выберите:" << endl
			<< "1 - создание текстового форматированного файла счетов" << endl
			<< "2 - изменение счета" << endl
			<< "3 - добавление нового счета" << endl
			<< "4 - удаление счета" << endl
			<< "5 - конец работы" << endl << "? ";
		int menuChoice; cin >> menuChoice;
		return menuChoice;
	}
	// Создание форматированного текстового файла для печати
	void textFile(fstream &readFromFile)
	{
		ofstream outPrintFile("print.txt", ios :: out);
		if ( ! outPrintFile)
		{
			cerr << "Файл не может быть открыт." << endl;
			exit (1);
		}
		outPrintFile << setiosflags(ios :: left) << setw(6) << "Счет" 
				<< setw(16) << "Фамилия" << setw(11) << "Имя" 
				<< setiosflags(ios :: right) << setw(10) << "Баланс" << endl;
		readFromFile.seekg(0);
		clientData client;
		readFromFile.read((char *) &client, sizeof(client));
		while ( ! readFromFile.eof())
		{
			if (client.acctNum != 0)
				outputLine(outPrintFile, client);
			readFromFile.read( (char *) &client, sizeof (client) );
		}
	}
	// Изменение баланса счета
	void updateRecord(fstream &updateFile)
	{
		int account;
		do
		{
			cout << "Введите счет, который следует обновить (1-100): ";
			cin >>account;
		} while (account < 1 || account > 100);
		clientData client;
		updateFile.seekg((account - 1) * sizeof(client));
		updateFile.read((char *) &client, sizeof(client));
		if (client.acctNum != 0)
		{
			outputLine(cout, client);
			cout << endl << "Введите расход (+) или доплату (-): ";
			float transaction; cin >> transaction;
			client.balance += transaction;
			outputLine(cout, client);
			updateFile.seekp((account - 1) * sizeof(client));
			updateFile.write((char *) &client, sizeof(client));
		}
		else
			cerr << "Счет № " << account << " не заполнен." << endl;
	}
	// Создание и вставка новой записи
	void newRecord(fstream &insertInFile)
	{
		cout << "Введите новый номер счета (1 - 100): ";
		int account; cin >> account;
		clientData client;
		insertInFile.seekg((account - 1) + sizeof(client));
		insertInFile.read((char *) &client, sizeof(client));
		if (client.acctNum == 0)
		{
			cout << "Введите фамилию, имя, баланс" << endl << "? ";
			cin >> client.lastName >> client.firstName >> client.balance;
			client.acctNum = account;
			insertInFile.seekp((account - 1) * sizeof(clientData));
			insertInFile.write((char *) &client, sizeof(clientData));
		}
		else
			cerr << "Счет № " << account << " уже содержит информацию." << endl;
	}
	// Удаление существующей записи
	void deleteRecord(fstream &deleteFromFile)
	{
		cout << "Введите номер счета для удаления (1 - 100) : ";
		int account; cin >> account;
		clientData client;
		deleteFromFile.seekg((account - 1) * sizeof(client));
		deleteFromFile. read ( (char *) &client, sizeof (client) );
		if (client.acctNum != 0)
		{
			clientData blankClient = {0, "", "", 0};
			deleteFromFile.seekp((account - 1) * sizeof (client));
			deleteFromFile.write((char *) &blankClient, sizeof(client));
			cout << "Счет № " << account << " удален." << endl;
		}
		else
			cout << "Счет № " << account << " пустой. " << endl;
	}
	// Вывод строки с информацией о клиенте
	void outputLine (ostream &output, clientData c)
	{
		output << setiosflags (ios :: left) << setw(6) << c.acctNum
			<< setw(16) << c.lastName << setw(11) << c.firstName
			<< setiosflags (ios :: showpoint | ios :: right)
			<< setw(10) << setprecision(2) << c.balance << endl;
	}
</pre>
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=p>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=a>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=p>&nbsp 11 &nbsp</a></td>
<td><a href="12.htm" class=p>&nbsp 12 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>