<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | СР 31_34</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=a>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=p>&nbsp 11 &nbsp</a></td>
<td><a href="12.htm" class=p>&nbsp 12 &nbsp</a></td>
</tr></table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr><td class=usual>
<p align=center class=dbi><br>Последовательное чтение данных из файла произвольного доступа</p>
<p>Создадим программу, которая, последовательно читает файл от начала до конца, и печатает те записи, которые содержат данные.
<p>Функция read класса istream вводит в объект определенное число байтов с текущей позиции в указанном потоке.
<br>Например, оператор &nbsp;&nbsp;&nbsp;&nbsp;inCredit.read((char&nbsp;*)&nbsp;&client,&nbsp;sizeof(client));&nbsp;&nbsp;&nbsp; считывает число байтов, определяемое при помощи sizeof(client) из файла, связанного с объектом inCredit класса ifstream, и сохраняет данные в структуре client.
<br>Функция read требует первый аргумент типа char&nbsp;*. Поскольку &client имеет тип clientData&nbsp;*, то &client должен быть приведен к типу char&nbsp;*.
<p>Следующая программа последовательно читает каждую запись в файле "credit.dat", проверяет, содержатся ли в ней данные, и выводит на экран форматированные выходные данные для записей, содержащих данные.
<p>Условие ! inCredit.eof () использует функцию-элемент eof объекта ios для определения конца файла и вызывает завершение выполнения структуры while.
<br>Введенные данные из файла выводятся на экран функцией outputLine, которая принимает два аргумента - объект ostream и структуру clientData.
<pre>
	// Последовательное чтение из файла .произвольного доступа
	#include&lt;iostream.h>
	#include&lt;iomanip.h>
	#include&lt;fstream.h>
	#include&lt;stdlib.h>
	struct clientData
	{
		int acctNum; 
		char lastName[15]; 
		char firstName[10]; 
		float balance;
	};
	void outputLine(ostream&, clientData);
	main()
	{
		ifstream inCredit("credit.dat", ios :: in);
		if ( ! inCredit)
		{
			cerr << "Файл не может быть открыт." << endl;
			exit(1);
		}
		cout << setiosflags (ios :: left) << setw(6) << "Счет" 
			<< setw(16) << "Фамилия" << setw(11) << "Имя" 
			<< setiosflags(ios :: right) << setw(10) << "Баланс" << endl;
		clientData client;
		inCredit.read((char *) &client, sizeof(clientData));
		while ( ! inCredit.eof())
		{
			if (client.acctNum != 0)
				outputLine(cout, client);
			inCredit.read((char *) &client, sizeof(clientData));
		}
		return 0;
	}
	void outputLine(ostream &output, clientData c)
	{
		output << setiosflags(ios :: left) << setw(6) << c.acctNum 
			<< setw(16) << c.lastName << setw(11) << c.firstName 
			<< setw(10) << setprecision(2)
			<< setiosflags(ios :: showpoint | ios :: right) 
			<< c.balance << endl;
	}

	<i>Результаты</i>		Счет	Фамилия	Имя	Баланс
				2	Иванов		Петр	0.00
				8	Сидоров	Иван	654.30
				11	Сидоров	Петр	78.33
				23	Петров		Сидор	43.11
				67	Петров		Иван	-11.98

</pre>
<p>Дополнительные преимущества, получаемые за счет программ такого типа:
<ul>
<li>анализ результатов вывода показывает, что записи перечислены в виде упорядоченной последовательности (по номеру счета), что является простым следствием того, что мы хранили эти записи в файле, используя методы прямого доступа,
<li>по сравнению с пузырьковой сортировкой сортировка с использованием методов прямого доступа заведомо быстрее.
</ul>
<br>Скорость, достигаемая при создании файла, вполне достаточна для сохранения всех мыслимых данных. Правда, файл может оказаться сильно разреженным, что приводит к нерациональному расходу памяти. Таким образом, это еще один пример компромисса в соотношении "память - время": использование больших объемов памяти позволяет создать более быстрый алгоритм сортировки.
<p>&nbsp;</p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
<td><a href="06.htm" class=p>&nbsp 6 &nbsp</a></td>
<td><a href="07.htm" class=p>&nbsp 7 &nbsp</a></td>
<td><a href="08.htm" class=p>&nbsp 8 &nbsp</a></td>
<td><a href="09.htm" class=a>&nbsp 9 &nbsp</a></td>
<td><a href="10.htm" class=p>&nbsp 10 &nbsp</a></td>
<td><a href="11.htm" class=p>&nbsp 11 &nbsp</a></td>
<td><a href="12.htm" class=p>&nbsp 12 &nbsp</a></td>
</tr></table>
<a name=#end></a>
</body>
</html>