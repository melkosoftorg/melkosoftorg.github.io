<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 43</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Статические компоненты класса</p>
<p>Рассмотрим класс, описывающий товары на складе магазина. 
Компонентами класса будут: название товара; оптовая (закупочная) цена; розничная 
(торговая) наценка; функция ввода данных о товаре; функция вывода на дисплей сведений 
о товаре с указанием розничной цены.
<pre>
	// GOODS.СРР - Определение класса "товары на складе "
	#include&lt;iostream.h&gt;
	#include&lt;iomanip.h&gt;
	class goods			// Определение класса "товары"
	{  char name[40];			// Наименование товара
	   float price;			// Оптовая (закупочная) цена
	   public: 
		static int percent;		// Торговая наценка, в %
		// Компонентные функции:
		void Input()		// Ввод сведений о товаре
		{	cout << "Наименование товара: "; cin >> name;
			cout << "Закупочная цена: "; cin >> price;
		}
		void Display()		// Вывод данных о продаваемом товаре
		{	cout << "\n" << name; cout << ", розничная цена: ";
			cout.setf(ios <b>::</b> fixed, ios <b>::</b> floatfield);
			cout << setprecision(2) << float (price * (1.0 + goods <b>::</b> percent * 0.01));
		}
	};
</pre>
<br>Торговая наценка определена как статический 
компонент класса. Каждый объект одного и того же класса имеет собственную копию 
данных класса. Отличаются они друг от друга именно по "привязке" к тому или иному 
объекту, что не всегда соответствует требованиям решаемой задачи. Например, при 
формировании объектов класса может потребоваться счетчик объектов, который можно 
сделать компонентом класса.
<br>Чтобы компонент класса был в единственном экземпляре и не тиражировался при 
создании каждого нового объекта класса, он должен быть определен в классе как 
статический, то есть должен иметь атрибут static.
<p>Статические компоненты класса после инициализации можно использовать в программе 
еще до определения объектов данного класса. Такую возможность для общедоступных 
данных предоставляет квалифицированное имя компонента. Когда определен хотя бы 
один объект класса, к его статическим компонентам можно обращаться, как к обычным 
компонентам, то есть с помощью операций выбора компонентов класса ( <b>.</b> и <b>-></b> ). Доступ к 
статическому компоненту возможен только после его инициализации.
<p><b><i>Для инициализации статического компонента используется конструкция:</i></b>
<p><center>тип имя_класса <b>::</b> имя_компонента инициализатор;</center>
<br>В примере может быть такой вариант: int goods <b>::</b> percent = 12;
<br>Это предложение должно быть размещено в глобальной области (global scope) после 
определения класса. Только при инициализации статический компонент класса получает 
память и становится доступным.
<p><b><i>Для обращения к статическому компоненту используется квалифицированное имя:</i></b>
<p><center>имя_класса <b>::</b> имя_компонента</center>
<br>Кроме того, статический компонент доступен "через" имя конкретного объекта:
<p><center>имя_объекта<b>.</b>имя_класса <b>::</b> имя-компонента</center>
<br>либо
<br><center>имя_объекта<b>.</b>имя_компонента</center>
<p>В программе иллюстрируются перечисленные возможности и особенности классов со 
статическими компонентами, а также используется массив объектов класса goods:
<pre>
	#include&lt;iostream.h&gt;
	#include&lt;conio.h&gt;
	#include "goods.cpp"		// Текст определения класса
	int goods <b>::</b> percent = 12;		// Инициализация статического компонента:
	void main(void)
	{
		goods wares[5] =	{	{ "Мужской костюм", 1900 },
					{ "Косметический набор", 276 }, 
					{ "Калькулятор", 110 }
				};
		int k = sizeof(wares) / sizeof(wares[0]); clrscr();
		cout << "\nВведите сведения о товарах:\n";
		for(int i = 3; i < k; i++) 
			wares[i]<b>.</b>Input();
		cout << "\nСписок товаров при наценке " << wares[0]<b>.</b>percent << "%";
		for(i = 0; i < k; i++) 
			wares[i]<b>.</b>Display();
		goods <b>::</b> percent = 10;	// Изменение статического компонента
		cout << "\n\nСписок товаров при наценке " << wares[0]<b>.</b>goods <b>::</b> percent << "%";
		goods *pGoods = wares;
		for (i = 0; i < k; i++)
			pGoods++ <b>-></b> Display();
		getch();
	}
	
	<b><i>Результаты выполнения программы:</i></b>	<b><i>Введите сведения о товарах:</b></i>
						Наименование товара: Сигареты <Enter>
						Закупочная цена: 7.8 <Enter>
						Наименование товара: Кроссовки <Enter>
						Закупочная цена: 284 <Enter>
						<b><i>Список товаров при наценке 12%</b></i>
						Мужской костюм, розничная цена: 2128
						Косметический набор, розничная цена: 309.12
						Калькулятор, розничная цена: 123.2
						Сигареты, розничная цена: 8.74
						Кроссовки, розничная цена: 318.08
						<b><i>Список товаров при наценке 10%</b></i>
						Мужской костюм, розничная цена: 2090
						Косметический набор, розничная цена: 303.6
						Калькулятор, розничная цена: 121
						Сигареты, розничная цена: 8.58
						Кроссовки, розничная цена: 312.4
</pre>
<br>Обратите внимание на инициализацию первых элементов массива wares[5] объектов 
класса goods. В списках значений не отражено существование статического компонента. 
<br>Точно так же при вводе данных компонентной функцией Input() не изменяется значение 
статического компонента. Он один для всех объектов класса. <p>Для иллюстрации разных 
способов доступа к компонентам классов определен указатель pGoods на объекты класса 
goods. Он инициализирован значением адреса первого элемента массива объектов 
&wares[0]. <br>В цикле указатель с операцией <b>-></b> используется для вызова компонентной 
функции Display(). После каждого вызова указатель изменяется - настраивается на 
следующий элемент массива, то есть на очередной объект класса goods.
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=a>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=p>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>