<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>ОП | Лекция № 43</title>
<link rel=stylesheet type=text/css href=../../../css/lec.css>
</head>
<body>
<a name=#start></a>
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<!-- -------Inside table------- -->
<table width=98% border=0 cellpadding=5 cellspacing=0>
<tr>
<td class=usual>
<p align=center class=dbi><br>Статическая компонентная функция</p>
На статические данные класса распространяются правила статуса доступа. Чтобы иметь возможность обойтись без имени конкретного 
объекта при обращении к статическим данным класса, необходимо использовать 
статические компонентные функции.
<p>Статическая компонентная функция сохраняет все основные особенности обычных 
(нестатических) компонентных функций. К ней можно обращаться, используя имя уже 
существующего объекта класса либо указатель на такой объект. <br>Дополнительно 
статическую компонентную функцию можно вызвать, используя квалифицированное имя:
<p><center>имя_класса <b>::</b> имя_статической функции</center>
<p>С помощью квалифицированного имени статические компонентные функции можно 
вызывать до определения конкретных объектов класса и, не используя конкретных 
объектов. <br>Например, в программе класс point3 определяет точку в трехмерном 
пространстве и одновременно содержит статический счетчик N таких точек. Обращение к 
счетчику обеспечивает статическая компонентная функция count().
<pre>
	// статические компоненты класса
	#include&lt;iostream.h&gt;
	#include&lt;conio.h&gt;
	class point3			// Точка в трехмерном пространстве
	{	double x, y, z;		// Координаты точки
		static int N;		// Количество точек (счетчик)
		public:			// Конструктор инициализирует значения координат:
			point3(double xn = 0.0, double yn = 0.0, double zn = 0.0)
			{ 
				N++; x = xn; y = yn; z = zn;
			}
			static int& count () 
			{ return N; }	// Обращение к счетчику:
	};
	int point3 <b>::</b> N = 0;		// Внешнее описание и инициализация статического элемента:
	void main(void)
	{	clrscr();
		cout << "\nsizeof(point3) = " << sizeof(point3);
		point3 A(0.0, 1.0, 2.0); cout << "\nsizeof(A) = " << sizeof(A);
		point3 B(3.0, 4.0, 5.0);
		cout << "\nОпределены " << point3 <b>::</b> count () << " точки.";
		point3 C(6.0, 7.0, 8.0); cout << "\nОпределены " << B<b>.</b>count() << " точки.";
		getch();
	}

	<b><i>Результаты выполнения программы:</i></b>	sizeof(point3) = 24
						sizeof(A) = 24
						Определены 2 точки.
						Определены 3 точки.
</pre>
<br>Размер типа point3 равен размеру одного объекта этого класса. Память выделена для трех 
элементов типа double, и не учтено наличие в классе статического компонента int N.
<p>В отличие от обычных компонентных данных статические элементы класса необходимо 
дополнительно описать и инициализировать вне его определения, вне класса, еще до 
определения объектов класса, но после определения самого класса, как глобальная 
переменная получает начальное значение статический элемент класса point3 <b>::</b> N. <p>Так как 
N - собственный компонент класса, то последующие обращения к нему возможны только 
с помощью дополнительной общедоступной функции. В примере это статическая 
функция count(). Попытка обратиться к компоненту N с помощью квалифицированного 
имени point3 <b>::</b> N будет воспринята как ошибка, так как для N определен статус private.
<p> &nbsp; </p>
</td></tr>
</table>
<!-- -------End of Inside table------- -->
<table class=pages align=center border=0 cellpadding=0 cellspacing=0>
<tr colspan=5>
<td>&nbsp&nbsp<a href="../../../plan_2.htm" class=p>Календарно-тематический план</a>&nbsp&nbsp</td>
<td><a href="index.htm" class=p>&nbsp План лекции &nbsp</a></td>
<td><a href="01.htm" class=p>&nbsp 1 &nbsp</a></td>
<td><a href="02.htm" class=a>&nbsp 2 &nbsp</a></td>
<td><a href="03.htm" class=p>&nbsp 3 &nbsp</a></td>
<td><a href="04.htm" class=p>&nbsp 4 &nbsp</a></td>
<td><a href="05.htm" class=p>&nbsp 5 &nbsp</a></td>
</tr>
</table>
<a name=#end></a>
</body>
</html>